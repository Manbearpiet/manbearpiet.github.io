<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Manbearpiet</title>
        <link>https://manbearpiet.github.io/posts/</link>
        <description>Recent content in Posts on Manbearpiet</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Wed, 04 Aug 2021 19:31:39 +0200</lastBuildDate>
        <atom:link href="https://manbearpiet.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Deliver your apps using Azure Front Door</title>
            <link>https://manbearpiet.github.io/posts/azurefrontdoor/</link>
            <pubDate>Wed, 04 Aug 2021 19:31:39 +0200</pubDate>
            
            <guid>https://manbearpiet.github.io/posts/azurefrontdoor/</guid>
            <description>Azure Front Door Frequently I speak to admins who&amp;rsquo;ve heard about Azure Front Door, but are not sure about what it does. I have some experience deploying and managing Front Door instances of customers. Most heard comment is: &amp;ldquo;It&amp;rsquo;s a thing that does something with application delivery&amp;rdquo;. In the near future I want to take on the AZ-700 exam, so I thought a win-win in blogging about! With this blog I want to show what Azure Front Door is, what the components are and make sure to mention a few gotcha&amp;rsquo;s.</description>
            <content type="html"><![CDATA[<h1 id="azure-front-door">Azure Front Door</h1>
<p>Frequently I speak to admins who&rsquo;ve heard about Azure Front Door, but are not sure about what it does. I have some experience deploying and managing Front Door instances of customers. Most heard comment is: &ldquo;It&rsquo;s a thing that does something with application delivery&rdquo;. In the near future I want to take on the AZ-700 exam, so I thought a win-win in blogging about! With this blog I want to show what Azure Front Door is, what the components are and make sure to mention a few gotcha&rsquo;s.</p>
<p>At the end of this article hopefully you&rsquo;ll be able to answer these questions:</p>
<ul>
<li>Where can I configure free valid certificates for my Front Door hosted site/app?</li>
<li>Where can I configure Front Door load balancing for the hosts I&rsquo;m routing/redirecting traffic toward to?</li>
<li>Where can I control which requests are forwarded/redirected to which hosts?</li>
<li>How does Front Door deliver webtraffic to my users?</li>
</ul>
<h2 id="overview">Overview</h2>
<h3 id="another-load-balancer-service">Another Load Balancer service?</h3>
<p>Before we dive in some background information is relevant. Because Azure Front Door takes a specific role in the Azure Load Balancing options. There are several load balancers in the Azure native portfolio:</p>
<ul>
<li>For global DNS loadbalancing Azure Traffic Manager can be used.</li>
<li>For load balancing network (HTTP(S) and non-HTTP(S))traffic to Virtual Machines or Virtual Machine scale sets</li>
<li>For regional HTTP/HTTPS load balancing, TLS-offload and Web Application Firewall Azure Application Gateway is a great option.</li>
</ul>
<p><a href="https://docs.microsoft.com/en-us/azure/architecture/guide/technology-choices/load-balancing-overview">This Microsoft Docs article</a> provides an excellent overview of the portfolio of Azure Load Balancing options.</p>
<h3 id="components">Components</h3>
<p>Front Door provides the following functionalities:</p>
<ul>
<li>Forwarding/redirecting requests to backends as a reverse proxy and load balance said requests.</li>
<li>Shape or rewrite the requested URL based.</li>
<li>Layer 7 HTTP(S) Web-Application Firewall scanning of traffic.</li>
<li>Provide a cached version of content to the user by providing CDN-functionality.</li>
</ul>
<p>There are more vendors that provide similar functionality, however Front Door' strong points lie in the tight integration with Azure resources and fact that it&rsquo;s deploy in each POP which makes it a globally scaleable service. It&rsquo;s all manageable via the Azure Portal and not via another internal management panel on a Network Virtual Appliance.</p>
<h3 id="reverse-proxy">Reverse Proxy</h3>
<p><code>In computer networks, a reverse proxy is a type of proxy server where the servers return resources to the client where it would appear to the network that it originated from the reverse proxy server itself. It is mainly used to balance load.</code></p>
<p>From: <a href="https://en.wikipedia.org/wiki/Reverse_proxy">https://en.wikipedia.org/wiki/Reverse_proxy</a></p>
<p>In the case of Front Door this means that requests to url&rsquo;s will be sent to Front Door and the Front Door forwards the traffic to the backend.</p>
<p>The reverse proxy functionality is the most important function of the service. With the reverse proxy all traffic flows through the Front Door. This paves the way for monitoring options, allows you to scan traffic with the Web Application Traffic, but also allows you to provide cached versions of your content. Traffic routing has 3 main components within Azure Front Door:</p>
<ul>
<li>Frontend Domains</li>
<li>Backend Pools</li>
<li>Routing Rules</li>
</ul>
<h2 id="frontend-domains">Frontend Domains</h2>
<p>The frontend domain is the component at which you can start to define your customer experience before they&rsquo;ve even loaded your website. It can be an asset in your branding, but also become a convenient tool (who likes remembering servernames right?). Typing in the frontend domain is usually the only user interactions most users have with the url. The rest is mostly the system administrator and webmasters concern.</p>
<p>In Azure Front Door the frontend domain configuration panel is also the spot where you onboard your custom domains, configure certificate settings for your custom domains, and configure session affinity for your backend hosts.</p>
<h3 id="onboarding-domains">Onboarding Domains</h3>
<p>By default the name of your Azure Front Door is used to provide you with a fresh start i.e. [{name of the Front Door}.azurefd.net]. Onboarding of domains is done via CNAME records, root/apex/naked domains are also supported via alias&rsquo;s via Azure DNS.</p>
<p>Subdomains are onboarded using CNAME records, where you reference your subdomain as the source domain and point to the frontend host(name) of your Front Door [{name of the Front Door}.azurefd.net] as the destination. After verification the domainname is available in Azure Front Door.</p>
<p>Onboarding root domains is documented at <a href="https://docs.microsoft.com/en-us/azure/frontdoor/front-door-how-to-onboard-apex-domain">Microsoft Docs: Onboard a root or apex domain on your Front Door</a>.<br>
 </p>
<p>
    <img src="/images/front-door/domain.png"  alt="HTTP Settings"  class="left"  style="border-radius: 8px;"  />

<br>
 </p>
<h3 id="custom-domain-https">Custom domain HTTPS</h3>
<p>To facilitate safe transfer to your website/app you can enable HTTPS to your custom domain. There is a toggle to select a minimum TLS versions with options for 1.0 and 1.2. There is no support for TLS 1.3 yet.</p>
<p>One of the cool features of Azure Front Door are free Front Door Managed Certificates for your custom domains. With this option you don&rsquo;t have to worry about where to save your certificates or to make sure your order and replace them before they expire.</p>
<p>If this is not an option due to regulatory compliance, custom certificates are also an options with Azure Key Vault integration. There are two requirements for this:</p>
<ul>
<li>Register Azure Front Door Service as an app in your Azure Active Directory (AAD) via PowerShell
<ul>
<li>Do so by using this command:</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">New-AzADServicePrincipal -ApplicationId <span style="color:#e6db74">&#34;ad0e1c7e-6d38-4ba4-9efd-0bc77ba9f037&#34;</span>
</code></pre></div><ul>
<li>Grant Azure Front Door Service the permission to access the secrets in your Key vault.
<ul>
<li>Go to “Access policies” from your Key vault to add a new policy, then grant “Microsoft.Azure.Frontdoor” service principal a “get-secret” permission</li>
</ul>
</li>
</ul>
<p>After which you can select a keyvault, a secret and a secret version (<code>Latest</code> is an option), making replace of certificates a breeze. Do be aware it can take a while for the certificate to be published at each POP.
<br>
<br>

    <img src="/images/front-door/https.png"  alt="HTTP Settings"  class="left"  style="border-radius: 8px;"  />

<br>
 </p>
<h3 id="session-affinity">Session Affinity</h3>
<p>To make sure your users aren&rsquo;t routed to a different backend(host) with consecutive calls to your stateful webapplication (cookie based) session affinity is supported by Azure Front Door. This is configured at the frontend domain.
<br>
<br>

    <img src="/images/front-door/sa.png"  alt="Session Affinity"  class="left"  style="border-radius: 8px;"  />

</p>
<p>Session timeouts are configurable in the Settings tab.
Number of seconds before a forwarded send or receive request times out. When a timeout occurs the request fails and the connection terminates.</p>

    <img src="/images/front-door/timeout.png"  alt="Timeouts"  class="left"  style="border-radius: 8px;"  />


<h2 id="backend-pools">Backend Pools</h2>
<p>Backends in Azure Front Door are the references to endpoints which host your server or webapp. Since it&rsquo;s the component hosting our website/app, want to make sure our customers reach the right app/server.</p>
<p>It might be bit confusing, but the backend in case of the Azure Front Door is your web-frontend (hosting your site/app). Backends are grouped in backend pools. Backends usually host the same content at each backend host in the backend pool. Backends in Azure Front Door can be any public endpoint.</p>
<h3 id="setting-up-backends">Setting up backends</h3>
<p>There are some Azure services which can be configered as backends using Azure suggested settings after selecting your resource. This integration is provided with:</p>
<ul>
<li>Azure App Services</li>
<li>Cloud Services</li>
<li>Storage Account (for Static websites), classic is also supported</li>
<li>Application Gateway</li>
<li>API Management</li>
<li>Public IP Address</li>
<li>Traffic Manager</li>
</ul>
<p><br>
Selecting one of the options above prefills the fields required to register a backend in the backend pool.If your backend is not mentioned in the options above, or you want to set it up yourself, then you can use the <code>Custom Host</code> option. Required options are shown in the image below:
<br>
<br>

    <img src="/images/front-door/backend.png"  alt="Adding a Backend"  class="left"  style="border-radius: 8px;"  />


 </p>
<p>You also have the option to disable backends, traffic will be routed to different backends. If there are no backends available in the pool, requests will throw a recognizable Front Door white error screen with an error code.</p>
<h3 id="backend-traffic-routing-options">Backend traffic routing options</h3>
<p>The load balancing functionality of Azure Front Door is found in the fact that it can load balance between multiple backends within a backend pool. Priority and Weight in the image shown at <a href="#backend-pools">Backend Pools</a> resp. provide functionality for priority based traffic-routing and weighted based traffic-routing.</p>
<h4 id="priority">Priority</h4>
<p>Priority on a backend is configurable from 1 to 5, where 1 is the first priority where traffic will be routed to. When the backends with priority 1 are down the backends with priority 2 are used et cetera.</p>
<h4 id="weighted">Weighted</h4>
<p>Weighted traffic routing is performed by configuring a weight (from 1 to 1000), the default is 50. It&rsquo;s ratio-based, so the higher the weight of a backend, the more traffic it will receive.
<br>
 </p>
<h3 id="health-probing">Health probing</h3>
<p>Front Door can be configured to assess the health of the backends in your backendpool by polling with HTTP requests with a configurable health probe. The health probes can be configured to use both a <code>HEAD</code> and <code>GET</code> method on a specified path.</p>
<p>
    <img src="/images/front-door/probe.png"  alt="Adding a health probe"  class="left"  style="border-radius: 8px;"  />


<br>
The health probe expects a valid HTTP 200 answer from the backend on a provided path. In case HTTPS probing is used the server should present itself with a valid certificate certificate. If the backend host doesn&rsquo;t provide a certificate from a wellknown CA, traffic is not forwarded.
Whenever a backendhost is not responding with HTTP 200 it&rsquo;s deemed unhealthy and if all hosts in the backend are unhealthy Front Door throws a white error screen showing an error id. This error id can be used to find the corresponding log in Log Analytics.
<br>
<br>

    <img src="/images/front-door/lb.png"  alt="Adding a health probe"  class="left"  style="border-radius: 8px;"  />


<br>
For HTTPS traffic there&rsquo;s also an option available to disable enforcement of certificate namechecks. This option which is <code>Enabled</code> by default, it ensures that the backend host presents with a certificate where the hostname is contained in the subject of the certificate. Certificates must be issued by a <a href="https://ccadb-public.secure.force.com/microsoft/IncludedCACertificateReportForMSFT">valid certificate authority</a>, it must contain the complete certificate chain.
<br>

    <img src="/images/front-door/certcheck.png"  alt="Certificate Checks"  class="left"  style="border-radius: 8px;"  />


 </p>
<h2 id="routing-rules">Routing Rules</h2>
<p>With configured domains and backends to host our web(apps), the last and in my opinion most challenging topic are the so called <code>Routing rules</code>. These rules can be configured to forward traffic to backends, based on the front-end domain, a backend pool and the requested path. The decision how this is performed is done with path pattern matching.</p>
<p>You can create multiple routing rules per frontend domain and add multiple domains per routing rule. There are some gotcha&rsquo;s though, these are adressed at the respective topics.</p>
<h3 id="frontend-domains-1">Frontend domains</h3>
<p>When creating a rule you must first you must name the rule and select the frontend(s) you want to route traffic for, then you select which protocol is accepted for that frontend(s).
<br>

    <img src="/images/front-door/rulename.png"  alt="Adding a rule"  class="left"  style="border-radius: 8px;"  />


 </p>
<h3 id="pattern-matching">Pattern Matching</h3>
<p>To determine which rule will be applied pattern matching is applied to the requested url path ie. <code>https://manbearpiet.github.io/posts/</code>. In case multiple rules are applicable, the most specific rule will be applied.
In case none of the rules is matched a 404 error will be thrown.</p>
<p>The most simple way to route traffic to backends is to use a catch-all wildcard, <code>/*</code>.
This will account for anything, but aware that you can only create one rule with a wildcard for a frontend domain.</p>
<p>For example:</p>
<table>
<thead>
<tr>
<th>Rule</th>
<th>Pattern</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>/*</code></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>URL</th>
<th>Match</th>
<th>Matched Rule</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://manbearpiet.github.io/">https://manbearpiet.github.io/</a></td>
<td>1</td>
<td><code>/*</code></td>
</tr>
<tr>
<td><a href="https://manbearpiet.github.io/contact">https://manbearpiet.github.io/contact</a></td>
<td>1</td>
<td><code>/*</code></td>
</tr>
<tr>
<td><a href="https://manbearpiet.github.io/contactyourlovedones">https://manbearpiet.github.io/contactyourlovedones</a></td>
<td>1</td>
<td><code>/*</code></td>
</tr>
<tr>
<td><a href="https://manbearpiet.github.io/posts/">https://manbearpiet.github.io/posts/</a></td>
<td>1</td>
<td><code>/*</code></td>
</tr>
<tr>
<td><a href="https://manbearpiet.github.io/posts/my-first-post/">https://manbearpiet.github.io/posts/my-first-post/</a></td>
<td>1</td>
<td><code>/*</code></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Rule</th>
<th>Pattern</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>/*</code></td>
</tr>
<tr>
<td>2</td>
<td><code>/</code></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>URL</th>
<th>Match</th>
<th>Matched pattern</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://manbearpiet.github.io/">https://manbearpiet.github.io/</a></td>
<td>2</td>
<td><code>/</code></td>
</tr>
<tr>
<td><a href="https://manbearpiet.github.io/contact">https://manbearpiet.github.io/contact</a></td>
<td>1</td>
<td><code>/*</code></td>
</tr>
<tr>
<td><a href="https://manbearpiet.github.io/contactyourlovedones">https://manbearpiet.github.io/contactyourlovedones</a></td>
<td>1</td>
<td><code>/*</code></td>
</tr>
<tr>
<td><a href="https://manbearpiet.github.io/posts/">https://manbearpiet.github.io/posts/</a></td>
<td>1</td>
<td><code>/*</code></td>
</tr>
<tr>
<td><a href="https://manbearpiet.github.io/posts/my-first-post/">https://manbearpiet.github.io/posts/my-first-post/</a></td>
<td>1</td>
<td><code>/*</code></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Rule</th>
<th>Pattern</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>/*</code></td>
</tr>
<tr>
<td>2</td>
<td><code>/</code></td>
</tr>
<tr>
<td>3</td>
<td><code>/contact</code></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>URL</th>
<th>Match</th>
<th>Matched pattern</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://manbearpiet.github.io/">https://manbearpiet.github.io/</a></td>
<td>2</td>
<td><code>/</code></td>
</tr>
<tr>
<td><a href="https://manbearpiet.github.io/contact">https://manbearpiet.github.io/contact</a></td>
<td>3</td>
<td><code>/contact</code></td>
</tr>
<tr>
<td><a href="https://manbearpiet.github.io/contactyourlovedones">https://manbearpiet.github.io/contactyourlovedones</a></td>
<td>1</td>
<td><code>/*</code></td>
</tr>
<tr>
<td><a href="https://manbearpiet.github.io/posts/">https://manbearpiet.github.io/posts/</a></td>
<td>1</td>
<td><code>/*</code></td>
</tr>
<tr>
<td><a href="https://manbearpiet.github.io/posts/my-first-post/">https://manbearpiet.github.io/posts/my-first-post/</a></td>
<td>1</td>
<td><code>/*</code></td>
</tr>
</tbody>
</table>
<h3 id="rules-engine">Rules Engine</h3>
<p>After being matched there is an option to perform granular adjustments to the request before it&rsquo;s redirected or forwarded  or to drop it entirely.
In example for adding headers, doing HTTP to HTTPS redirect et cetera. Options for this is too extensive for this blog, this will be featured in a seperate blog.</p>
<h3 id="route-details">Route Details</h3>
<p>After being matched to a routing rule it can have two generic outcomes, a forward to a backend or a HTTP redirect.
With a routing rules which performs a forward you&rsquo;re forwarding to a specific backend. With a HTTP you&rsquo;re redirecting the request to a different host, path or query string.</p>
<h3 id="forwarding">Forwarding</h3>
<h4 id="backend-pool">Backend pool</h4>
<p>You can select only one backendpool per forwarding rule, also as mentioned earlier it&rsquo;s possible to supply only one catch all pattern per frontend domain, so be mindful when setting up .</p>
<h3 id="redirection">Redirection</h3>
<p>When you&rsquo;re setting up a redirect routing rule you can choose one or a combination of the following, preserving/replacing:</p>
<ul>
<li>The destination host
<ul>
<li>https://<strong><a href="http://www.example.com">www.example.com</a></strong>/whatdoesmarcelluswallacelooklike?a=switch</li>
</ul>
</li>
<li>The destination path
<ul>
<li><a href="https://www.example.com/">https://www.example.com/</a><strong>whatdoesmarcelluswallacelooklike</strong>?a=switch</li>
</ul>
</li>
<li>The query string
<ul>
<li><a href="https://www.example.com/whatdoesmarcelluswallacelooklike">https://www.example.com/whatdoesmarcelluswallacelooklike</a>?<strong>a=switch</strong></li>
</ul>
</li>
</ul>
<p>For more information about URL redirection,the <a href="https://docs.microsoft.com/en-us/azure/frontdoor/front-door-url-redirect">Azure Front Door Documentation</a> is really good. It contains good information about the redirect types,</p>
<h4 id="destination-fragment">Destination Fragment</h4>
<p>There also is an option for a URL destination fragment, this is used to navigate to a specific page section. You might recognize this from a direct link in a section to i.e. Microsoft Docs for example:</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/core/introduction#cross-platform">https://docs.microsoft.com/en-us/dotnet/core/introduction#cross-platform</a> , the last segment (#cross-platform), is the destination fragment.</li>
</ul>
<p>When redirecting you can add a specific destination fragment to add to the redirect URL.</p>
<h4 id="forwarded-protocol">Forwarded protocol</h4>
<p>With the forwarded protocol you can select which protocol (HTTP/HTTPS or choose to match the request' protocol) the request is forwarded with to the backend.</p>
<h2 id="conclusion">Conclusion</h2>
<p>This was my overview of the Azure Front Door service. I hope you enjoyed reading and learned enough about the inners of Front Door. This article became a bit longer than I hoped for, but more is coming up. Other topics that will be featured in seperate future articles are:</p>
<ul>
<li>Example setups</li>
<li>Architectural considerations</li>
<li>Deployment</li>
<li>Rules Engine for Routing rules</li>
<li>Content Delivery Network (CDN)</li>
<li>Web Application Firewall (WAF)</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Auditing GPOs with Azure Guest Configuration Policy</title>
            <link>https://manbearpiet.github.io/posts/guest-configuration-policy/</link>
            <pubDate>Tue, 02 Feb 2021 08:07:31 +0100</pubDate>
            
            <guid>https://manbearpiet.github.io/posts/guest-configuration-policy/</guid>
            <description>OS-hardening security auditing What? I wanted to check compliance of a security baseline on Azure without first applying it via DSC. My primary goal was to check out how to validate our own internal security controls without using GPO&amp;rsquo;s.
Group Policy Objects are frequently used within a windows server domain to push settings, like security controls, and validate/reapply them to prevent configuration drift. My challenge was how to audit these settings, while knowing some customers also use Demilitarized Zones (DMZ&amp;rsquo;s) in Azure.</description>
            <content type="html"><![CDATA[<h1 id="os-hardening-security-auditing">OS-hardening security auditing</h1>
<h2 id="what">What?</h2>
<p>I wanted to check compliance of a security baseline on Azure without first applying it via DSC. My primary goal was to check out how to validate our own internal security controls without using GPO&rsquo;s.</p>
<p>Group Policy Objects are frequently used within a windows server domain to push settings, like security controls, and validate/reapply them to prevent configuration drift. My challenge was how to audit these settings, while knowing some customers also use Demilitarized Zones (DMZ&rsquo;s) in Azure. Servers which reside in this network segment are exposed so they are not joined to the domain. But especially these servers do need to be checked on security controls. So there we have our puzzle. How to audit virtual machines on Azure for custom security configurations.</p>
<h2 id="security-control-audit-mechanism">Security control audit-mechanism</h2>
<p>To prevent me from making another overengineered solution based on our own security baseline, I went looking for reference data. Luckily Microsoft offers their <a href="https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-security-baselines">Windows Security Baselines</a> in exported GPO&rsquo;s, so we have some reference data to check for in our VM&rsquo;s. I&rsquo;d almost want to say half of the puzzle is done! You can find the GPO&rsquo;s here <a href="https://www.microsoft.com/en-us/download/details.aspx?id=55319">link</a>.</p>
<p>But this was far from over! I&rsquo;ve written a few Pester testcases for other projects to validate files and settings, but I was not sure how to pull the audit data back again to some internal management panel to monitor compliance and drill down to what setting. All the cool stuff is in later Pester releases, so I&rsquo;d have to update the module on VM&rsquo;s and still exporting/pulling the audit-data was too much of a hassle in my opinion. We have multiple customers but that&rsquo;s just too much links in the chain. So Pester was not going to cut it for me.</p>
<p>So I was looking for an integrated security audit mechanism to prevent me writing everything and increasing the chance of stuff breaking randomly. So I checked out Automation Accounts and PowerShell Desired State Configuration, can&rsquo;t blame a PowerShell user right?, but there was no Audit/Monitor mode without applying the security controls. While I really like having safe environments, I really dislike broken applications due to too strict settings. So even with the <code>ApplyAndMonitor</code> this just would be too invasive to try in live environments. So Azure Automation DSC is off the table too.</p>
<h2 id="something-something-dark">Something, something dark</h2>
<p>I was a bit bugged and unsatisfied in my search for a solution for this challenge, I tend to find things immediately after stopping the search for said things, and I wanted to know more about DSC. To satisfy the knowledge craving I watched a <a href="https://youtu.be/hXS-rzs3Hak">PowerShell Conference EU 2020 video</a> by Gael Colas and Michael Greene, awesome video bit noisy though. I read the outline, but had to stop half way during the video. Boy I missed some nice stuff. I did however spot <code>Azure Policy Guest Configuration</code> on the outline of the talk.</p>
<p>Later on in my search for a solution to the security baseline challenge, I found a <a href="https://docs.microsoft.com/en-us/powershell/scripting/dsc/quickstarts/gpo-quickstart?view=powershell-7.1">quickstart</a> on Microsoft Docs which showed how to create a DSC configuration and .MOF file (compiled DSC configuration) from an exported GPO, which felt a little bit random, but hey let&rsquo;s see how far we can get.</p>
<p>I converted a GPO from the Microsoft Security Baseline and received some errors, but it did deliver both the configuration.ps1 and .MOF. The modules referenced on the <a href="https://github.com/microsoft/BaselineManagement">GitHub page</a> of the module were already installed, so I applied it to a test VM using Azure Automation DSC' <code>ApplyAndMonitor</code> configuration. And it workses! Awesome! In case you&rsquo;d want to export your own GPO&rsquo;s you can use <a href="https://docs.microsoft.com/en-us/powershell/module/grouppolicy/backup-gpo?view=win10-ps">Backup-GPO</a> for this.</p>
<p>Later that week I saw a <a href="https://twitter.com/ThomasMaurer/status/1354531440944427008">post</a> on Twitter by Thomas Maurer mentioning <code>Azure Policy Guest Configuration</code>, waaait a minute I saw that before! I read the  Microsoft Docs page and came to the conclusion, this was my missing link to my solution! This was also the moment I realized I had performed the first steps in the <a href="https://docs.microsoft.com/en-us/azure/governance/policy/how-to/guest-configuration-create-group-policy">quickstart</a> on the Docs page, but no harm in doing so then!</p>
<h2 id="azure-policy-guest-configuration">Azure Policy Guest Configuration</h2>
<p>Maybe it&rsquo;s my English reading profiency, but I just couldn&rsquo;t really figure out what the quickstart was guiding me through. Eventually I came to the following conclusion:
Azure Policy Guest Configuration uses a .MOF-file and modules to validate local settings and report the compliance status to Azure Policy.</p>
<ul>
<li>The VM&rsquo;s require a Managed Identity and a VM extensions, both of which can be deployed via a default initiative.</li>
<li>The MOF-file and technical prerequisites must be packaged.</li>
<li>It uses a distinct PowerShell instance and doesn&rsquo;t interfere with DSC if it&rsquo;s already utilized on the VM.</li>
</ul>
<p>The steps to start using Azure Policy Guest Configuration could be summarized to:</p>
<ol>
<li>Create a .MOF file with security controls based on the GPO-export using <code>ConvertFrom-GPO</code> (Baseline Management).</li>
<li>Deploy prerequisites for auditing mechanism</li>
<li>Make a package with configuration using <code>New-GuestConfigurationPackage</code>.</li>
<li>(Maybe test configuration on VM using <code>Test-GuestConfigurationPackage</code>), can also be piped from <code>New-GuestConfigurationPackage</code>.</li>
<li>Use <code>Publish-GuestConfigurationPackage</code> to publish the configuration to a storage container in an Azure Storage Account and produce a sharing link with SAS-token.</li>
<li>Use the link + sas token, displayname, a description, platform specifion and potentially a tag filter, an Azure Policy is created with <code>New-GuestConfigurationPolicy</code>.</li>
<li>Publish the said policy and apply it to a scope.</li>
</ol>
<p>The cmdlets are from the PowerShell module <code>GuestConfiguration</code>. Ok,ok, so far so good.</p>
<h2 id="deployment">Deployment</h2>
<p>We&rsquo;ve a few choices here, we could use an own GPO with settings to be validated, but to make it interesting I&rsquo;ve added steps to download all the Windows Security baselines.
That way you&rsquo;d check your hardening for each server OS-version.</p>
<h3 id="1-creating-a-mof-file">1. Creating a MOF-file</h3>
<p>If you have an exported GPO then you can skip this part to the codeblock with <code>ConvertFrom-GPO</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#75715e">&lt;#
</span><span style="color:#75715e">  All the download links found for Windows Security baselines
</span><span style="color:#75715e">  Download each zip via it&#39;s link to the current working directory and replace the whitespace-character %20 in the foldername with a space
</span><span style="color:#75715e">#&gt;</span>
@(
<span style="color:#e6db74">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201909%20and%20Windows%20Server%20Version%201909%20Security%20Baseline.zip&#34;</span>,
<span style="color:#e6db74">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201507%20Security%20Baseline.zip&#34;</span>,
<span style="color:#e6db74">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201607%20and%20Windows%20Server%202016%20Security%20Baseline.zip&#34;</span>,
<span style="color:#e6db74">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201803%20Security%20Baseline.zip&#34;</span>,
<span style="color:#e6db74">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201809%20and%20Windows%20Server%202019%20Security%20Baseline.zip&#34;</span>,
<span style="color:#e6db74">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201903%20and%20Windows%20Server%20Version%201903%20Security%20Baseline%20-%20Sept2019Update.zip&#34;</span>,
<span style="color:#e6db74">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201909%20and%20Windows%20Server%20Version%201909%20Security%20Baseline.zip&#34;</span>,
<span style="color:#e6db74">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%202004%20and%20Windows%20Server%20Version%202004%20Security%20Baseline.zip&#34;</span>
) | Foreach-Object {
  Invoke-Webrequest -URI $_ -OutFile ($_.split(<span style="color:#e6db74">&#34;/&#34;</span>)[-1].replace(<span style="color:#e6db74">&#39;%20&#39;</span>,<span style="color:#e6db74">&#39; &#39;</span>))
  }
</code></pre></div><p>I&rsquo;m primairly focussed on the <code>Windows 10 Version 2004 and Windows Server Version 2004 Security Baseline.zip</code> so I did:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#75715e"># Focus on the zip file and unzip the content in the working directory</span>
Get-ChildItem <span style="color:#e6db74">&#34;.\Windows 10 Version 2004 and Windows Server Version 2004 Security Baseline.zip&#34;</span> |
Expand-archive
</code></pre></div><p>Inside the unzipped folder another theres another folder, which contains a <code>GPOs</code> folder. That&rsquo;s what we&rsquo;re looking for!
Now I was a bit bugged, because I had no idea which folder contains what inside the GPO folder (I don&rsquo;t speak GUID). Luckily there&rsquo;s an XML with the correct information.</p>

    <img src="/images/guest-configuration-policy/guid.png"  alt="GUID to GPO"  class="left"  style="border-radius: 8px;"  />


<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#75715e"># Create an XML-variable object</span>
<span style="color:#66d9ef">[xml]</span>$xml = Get-Content .\manifest.xml
<span style="color:#75715e"># Create a new variable using the $xml and output the export ID (GUID) and the corresponding Displayname</span>
$guidtogpo = $xml.Backups.BackupInst | Select-Object @(
    @{ n=<span style="color:#e6db74">&#39;ID&#39;</span>; e={ $_.ID.<span style="color:#e6db74">&#39;#cdata-section&#39;</span> }}
    @{ n=<span style="color:#e6db74">&#39;DisplayName&#39;</span>; e={ $_.GPOdisplayname.<span style="color:#e6db74">&#39;#cdata-section&#39;</span> }}
)
</code></pre></div><p>Thanks to help from the PowerShell discord I was able to unraffle the above, I was looking in the wrong direction (<code>Select-XML</code>).</p>
<p><strong>Matching GPO-ID to Displayname</strong></p>

    <img src="/images/guest-configuration-policy/guid-to-gpo.png"  alt="GUID to GPO"  class="left"  style="border-radius: 8px;"  />


<p>Configuration names can only contain alphanumerical characters and underscores, so knowing that I want to use the GPO <code>MSFT Windows Server 2004 - Member Server</code> I replaced the spaces with underscores (for the configurationname) and are going to convert the GPO to a MOF-file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#75715e"># Using a regex search replace the spaces and - characters with an underscore</span>
<span style="color:#e6db74">&#34;MSFT Windows Server 2004 - Member Server&#34;</span> <span style="color:#f92672">-replace</span> <span style="color:#e6db74">&#39;[\s-]&#39;</span>, <span style="color:#e6db74">&#39;_&#39;</span>
MSFT_Windows_Server_2004_-_Member_Server

<span style="color:#75715e"># Convert the GPO and give the configuration the name of the GPO</span>
ConvertFrom-GPO `
-Path <span style="color:#e6db74">&#39;.\{A57A9BF8-C5CC-4CBE-AC7D-A1D0746523FE}\&#39;</span> `
-ConfigName <span style="color:#e6db74">&#34;MSFT_Windows_Server_2004_Member_Server&#34;</span> `
-OutputConfigurationScript
</code></pre></div><p>This conversion operation creates an Output folder by default, which contains:</p>
<ul>
<li>a configuration .ps1 (this can be used to apply your GPO-settings with Azure Automation DSC !!)</li>
<li>Managed Object Format (MOF) file (this compiled configuration is used to check the settings)</li>
</ul>
<p><strong>.MOF-file</strong></p>

    <img src="/images/guest-configuration-policy/mof.png"  alt="Policy Compliance"  class="left"  style="border-radius: 8px;"  />


<p>Yay we can finally start with setting up our Policy deployment!</p>
<h3 id="2-deploy-prerequisites-for-auditing-mechanism">2. Deploy prerequisites for auditing mechanism</h3>
<p>I assigned the initiative <code>[Preview]: Deploy prerequisites to enable Guest Configuration policies on virtual machines</code> or <code>/providers/Microsoft.Authorization/policySetDefinitions/12794019-7a00-42cf-95c2-882eed337cc8</code> so the VM&rsquo;s receive the proper pre-requisites and the long Policy wait has begun.</p>
<p>The initiative contains the following (Policies and Effect Type):</p>
<ul>
<li>Add system-assigned managed identity to enable Guest Configuration assignments on virtual machines with no identities, Modify;</li>
<li>Add system-assigned managed identity to enable Guest Configuration assignments on VMs with a user-assigned identity, Modify;</li>
<li>Deploy the Windows Guest Configuration extension to enable Guest Configuration assignments on Windows VMs, DeployIfNotExists;</li>
<li>Deploy the Linux Guest Configuration extension to enable Guest Configuration assignments on Linux VMs,DeployIfNotExists;</li>
</ul>
<p>After a while the VM&rsquo;s had a Managed Identity in Azure AD and the proper extension: <code>AzurePolicyforWindows</code>.</p>
<h3 id="3-make-a-guest-configuration-package">3. Make a guest configuration package</h3>
<p>This is pretty straight forward, we need to create a package with the .MOF-file we created in step 1 and give our Guest Configuration policy a name.
<strong>Note</strong> that you can&rsquo;t have spaces in the name of your packages (this kept me busy for a few weeks).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">New-GuestConfigurationPackage `
-Name <span style="color:#e6db74">&#34;MSFT_Windows_Server_2004_Member_Server&#34;</span> `
-Configuration .\localhost.mof
</code></pre></div><p>This creates a package which has the name as set above and a folder with the contents of the package called <code>unzippedPackage</code> it contains all the prerequisites required to perform the audit if step 2 was performed correctly.</p>

    <img src="/images/guest-configuration-policy/package.png"  alt="Policy Compliance"  class="left"  style="border-radius: 8px;"  />


<h3 id="4-test-configuration-package">4. Test Configuration Package</h3>
<p>This step is not mandatory, but can be nice to test your converted GPO if it contains all the checks you need. I&rsquo;d mostly use a machine on which you&rsquo;d want audit anyway. I bound the results of a test to a variable so results can be revisited easily:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">$hank = Test-GuestConfigurationPackage `
-Path <span style="color:#e6db74">&#39;.\MSFT_Windows_Server_2004_Member_Server.zip&#39;</span>
</code></pre></div><p><strong>$hank</strong></p>

    <img src="/images/guest-configuration-policy/output.png"  alt="Policy Compliance"  class="left"  style="border-radius: 8px;"  />


<p>The outputted results arent&rsquo;t what&rsquo;s so nice, the value is in the <code>$hank.resources</code>.</p>
<p>When you check-out that one with out-gridview, it gives a nice example what the end-result will look like.</p>
<p><strong>Out-Gridview</strong></p>
<p>Results from <code>Out-Gridview $hank.resources</code></p>

    <img src="/images/guest-configuration-policy/ogv.png"  alt="Policy Compliance"  class="left"  style="border-radius: 8px;"  />


<p>This shows that we can succesfully audit the settings with the .MOF on one machine manually!
But I&rsquo;m lazy and want to make Azure Policy do the heavy lifting for me.</p>
<h3 id="5-publish-the-configuration-package-to-a-storage-container-and-produce-a-sharing-link">5. Publish the configuration package to a storage container and produce a sharing link</h3>
<p>This step initially was a bit confusing in the documentation. In the Microsoft Docs it states:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Publish-GuestConfigurationPackage `
-Path ./AuditBitlocker.zip `
-ResourceGroupName  myResourceGroupName `
-StorageAccountName myStorageAccountName
</code></pre></div><p>Filling in my information I received errors which stated:</p>
<ul>
<li>The specified container does not exist.</li>
</ul>
<p>I wasn&rsquo;t sure which container it couldn&rsquo;t find. One look in the .psm1 file and I found that the storageaccount container by default is named <code>guestcontainer</code>. Later I thought why bother looking there if <code>Get-Help</code> also would suffice, doh!</p>
<p>I went the easy way out and just created a storage container named <code>guestcontainer</code>, but you can name it anyway you want,<code>Publish-GuestConfigurationPackage</code> has an argument <code>-StorageContainerName</code>. This allows you to be creative and give an own name to your storage container.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Publish-GuestConfigurationPackage `
-Path <span style="color:#e6db74">&#39;.\MSFT Windows Server 2004 - Member Server.zip&#39;</span> `
-ResourceGroupName christian-rsg `
-StorageAccountName &lt;name of my storageaccount&gt; `
-StorageContainerName guestconfiguration
</code></pre></div><p>This returns a sharing link with SAS-token, keep it close you&rsquo;ll need it later!</p>
<h3 id="6-create-an-azure-policy">6. Create an Azure Policy</h3>
<p>We&rsquo;re going to use the link + sas token, a displayname, a description, platform specifion and potentially a tag filter, and create an Azure Policy with <code>New-GuestConfigurationPolicy</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"> $NewGuestConfigurationPolicySplat = @{
     ContentUri = <span style="color:#e6db74">&#39;&lt;fill in your sharing link&gt;&#39;</span>
     DisplayName = <span style="color:#e6db74">&#39;MSFT Windows Server 2004 - Member Server&#39;</span>
     Description = <span style="color:#e6db74">&#39;Validation os-hardening baseline configuration for Windows Server (2004) Domain Members&#39;</span>
     Path = <span style="color:#e6db74">&#39;./policyDefinitions&#39;</span>
     Platform = <span style="color:#e6db74">&#34;Windows&#34;</span>
     }
New-GuestConfigurationPolicy @NewGuestConfigurationPolicySplat
</code></pre></div><p>This creates a JSON-file (<code>AuditIfNotExists.json</code>) in the <code>Path</code> supplied in the splat. The contents of the file is the long awaited Azure Policy template!</p>
<p><strong>AuditIfNotExists.json</strong></p>

    <img src="/images/guest-configuration-policy/auditifnotexists.png"  alt="Policy Compliance"  class="left"  style="border-radius: 8px;"  />


<p>You can also immediately publish the Azure Policy, by doing <code>New-GuestConfigurationPolicy @NewGuestConfigurationPolicySplat</code>
But we didn&rsquo;t do that so we have to Publish the policy the policy by hand.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Publish-GuestConfigurationPolicy -Path <span style="color:#e6db74">&#39;.\policyDefinitions&#39;</span>
</code></pre></div><p>I received the output below and saw it in the Azure Policy blade, awesome!!</p>
<p><strong>Policy</strong></p>

    <img src="/images/guest-configuration-policy/policy.png"  alt="VM Compliance"  class="left"  style="border-radius: 8px;"  />


<p>This command stores the policy definition in the current PowerShell-scope (subscription, with azcontext), you could also publish the policy definition to a different scope/policy-store (maybe a Management Group).</p>

    <img src="/images/guest-configuration-policy/policystore.png"  alt="Policy Store"  class="left"  style="border-radius: 8px;"  />


<p><strong>Policy Assignment</strong></p>
<p>The custom policy is available in the store, we assign the policy to a specific resource-scope, where can differentiate in assignment names (to specify scopes) and input our parameters. In this case we can chose to audit Azure Arc machines, but this is currently not relevant for our purpose.</p>

    <img src="/images/guest-configuration-policy/assignment.png"  alt="Policy Assignment"  class="left"  style="border-radius: 8px;"  />


<p>It took a while for all VM&rsquo;s to be processed, it stated for a long time:</p>
<p><em>Reason for non-compliance
No related resources match the effect details in the policy definition.</em></p>
<p>So a nice bowl of spaghetti later, and the details pane of the VM showed a new item:</p>
<ul>
<li>Last evaluated resource (out of 1) with a clickable resource-id.</li>
</ul>
<p>This gives the nice overview over all VM&rsquo;s with a drilldown on settings, this is exactly what I needed and what I&rsquo;d expect from an integrated tool to assess compliance of each setting. I really like it, it ticks all the boxes for the said challenge.</p>
<p><strong>Policy Compliance</strong></p>

    <img src="/images/guest-configuration-policy/policycomplianceoverviewnew.png"  alt="Policy Compliance"  class="left"  style="border-radius: 8px;"  />


<p><strong>VM Compliance details overview</strong></p>

    <img src="/images/guest-configuration-policy/vmdetailsnew.png"  alt="VM Compliance"  class="left "  style="border-radius: 8px;"  />


<p><strong>VM Compliance</strong></p>

    <img src="/images/guest-configuration-policy/vmcompliance.png"  alt="VM Compliance"  class="left"  style="border-radius: 8px;"  />


<h2 id="conclusion-and-next-steps">Conclusion and next steps</h2>
<p>By converting the GPO&rsquo;s to .MOF, packaging them and applying them to audit OS-settings, we&rsquo;ve a method to check our OS-hardening using DSC and Azure Policy.
Using this feature of Azure Policy you can check compliance and drill down on specific settings, or test your security baseline vs. a reference without applying it directly.
The examples used were the Microsoft Windows Security Baselines, but you could as well use something internal or something like the CIS GPO&rsquo;s.
Next steps are automating deployment to customers with tag filtering and creating a build pipeline when a new security policy is designed!</p>
]]></content>
        </item>
        
        <item>
            <title>Start a blog!</title>
            <link>https://manbearpiet.github.io/posts/my-first-post/</link>
            <pubDate>Sun, 31 Jan 2021 10:19:52 +0100</pubDate>
            
            <guid>https://manbearpiet.github.io/posts/my-first-post/</guid>
            <description>Blog! Blarg! Blorg!? Why? Sometimes I have decent&amp;rsquo;ish ideas to solve challenges faced on the Microsoft Azure cloud, using Azure DevOps or with PowerShell. If there&amp;rsquo;s code involved with solving these problems, that code tends to disappear in a folder I&amp;rsquo;ve accordingly named Trash. I frequently hear from colleagues and read tweets of people struggling with the same challenges.
This blog will mostly feature my noobish take on challenges with these topics.</description>
            <content type="html"><![CDATA[<h1 id="blog-blarg-blorg">Blog! Blarg! Blorg!?</h1>
<h2 id="why">Why?</h2>
<p>Sometimes I have decent&rsquo;ish ideas to solve challenges faced on the Microsoft Azure cloud, using Azure DevOps or with PowerShell.
If there&rsquo;s code involved with solving these problems, that code tends to disappear in a folder I&rsquo;ve accordingly named <code>Trash</code>.
I frequently hear from colleagues and read tweets of people struggling with the same challenges.</p>
<p>This blog will mostly feature my noobish take on challenges with these topics.
By writing this blog I hope to improve my webdev and writing skills, but mostly try to help readers facing earlier mentioned challenges.</p>
<h2 id="how">How</h2>
<p>Years ago I did an attempt using a cheap hosting service and WordPress, that just wouldn&rsquo;t look like I wanted it to. I didn&rsquo;t ask for help and just let it bleed out.
To prevent the same error, I reached out earlier on the <a href="https://aka.ms/psdiscord">PowerShell discord</a> (amazing community). I told the members on the <em>#bridge</em> I had the idea to start a blog, but had no writing experience nor the idea on how to start a blog technically.  I was hinted to use GitHub Pages and Hugo and that it should be fairly easy to set up and go.</p>
<p>The nice thing about Hugo is that it allows me to write content in Markdown, which I&rsquo;m ok with. My webdev-skills are non-existant. So Hugo it is!</p>
<p>I read a blog where someone explained the steps <a href="https://earvingad.github.io/posts/blogwithhugo/">link</a></p>
<p>From this blog I learned:</p>
<ul>
<li>How to setup Hugo</li>
<li>How to use GitHub Pages for my Hugo based website</li>
<li>And how to install a theme for my Hugo based static website</li>
</ul>
<p>Before reading I was still looking toward hosting on a VPS (because new things like GitHub Pages are scary!), but reading eaarvingad his blog I had to give it a try.</p>
<h2 id="lets-go">Let&rsquo;s go</h2>
<p>So I created a private repository on GitHub, and you&rsquo;re looking at my first commit.
All in all setting up took less than 30 minutes.</p>
<p>My first choice was a minimalistic blog theme, but it didn&rsquo;t scale nicely with my content. Most of the extensive themes require seperate NPM packages, then I chose the the ananke theme it looks nice and doesn&rsquo;t really require all the bells and whistles.
But when I was reading the draft I almost was blinded by the white background. So I switched to <strong>hello-friend-ng</strong> by rhazdon on github <a href="https://github.com/rhazdon/hugo-theme-hello-friend-ng">link</a>.</p>
<p>This has a nice implementation which uses your system preference (light/dark).</p>
<h2 id="conclusion">Conclusion</h2>
<p>All in all the tips of the PowerShell discord members really helped, using Hugo and the right theme gives you an awesome experience.
While it is published under the MIT-license I really like Drodje Atlialp his theme so I bought him a coffee, if you like your theme please do the same!</p>
]]></content>
        </item>
        
    </channel>
</rss>
