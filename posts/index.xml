<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Manbearpiet</title>
        <link>https://manbearpiet.github.io/posts/</link>
        <description>Recent content in Posts on Manbearpiet</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 02 Feb 2021 08:07:31 +0100</lastBuildDate>
        <atom:link href="https://manbearpiet.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Azure Guest Configuration Policy</title>
            <link>https://manbearpiet.github.io/posts/guest-configuration-policy/</link>
            <pubDate>Tue, 02 Feb 2021 08:07:31 +0100</pubDate>
            
            <guid>https://manbearpiet.github.io/posts/guest-configuration-policy/</guid>
            <description>OS-hardening security auditing What? I wanted to check compliance of a security baseline on Azure without first applying it via DSC. My primary goal was to check out how to validate our own internal security controls without using GPO&amp;rsquo;s.
Group Policy Objects are frequently used within a windows server domain to push settings, like security controls, and validate/reapply them to prevent configuration drift. My challenge was how to audit these settings, while knowing some customers also use Demilitarized Zones (DMZ&amp;rsquo;s) in Azure.</description>
            <content type="html"><![CDATA[<h1 id="os-hardening-security-auditing">OS-hardening security auditing</h1>
<h2 id="what">What?</h2>
<p>I wanted to check compliance of a security baseline on Azure without first applying it via DSC. My primary goal was to check out how to validate our own internal security controls without using GPO&rsquo;s.</p>
<p>Group Policy Objects are frequently used within a windows server domain to push settings, like security controls, and validate/reapply them to prevent configuration drift. My challenge was how to audit these settings, while knowing some customers also use Demilitarized Zones (DMZ&rsquo;s) in Azure. Servers which reside in this network segment are exposed so they are not joined to the domain. But especially these servers do need to be checked on security controls. So there we have our puzzle. How to audit virtual machines on Azure for custom security configurations.</p>
<h2 id="security-control-audit-mechanism">Security control audit-mechanism</h2>
<p>To prevent me from making another overengineered solution based on our own security baseline, I went looking for reference data. Luckily Microsoft offers their <a href="https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-security-baselines">Windows Security Baselines</a> in exported GPO&rsquo;s, so we have some reference data to check for in our VM&rsquo;s. I&rsquo;d almost want to say half of the puzzle is done! You can find the GPO&rsquo;s here <a href="https://www.microsoft.com/en-us/download/details.aspx?id=55319">link</a>.</p>
<p>But this was far from over! I&rsquo;ve written a few Pester testcases for other projects to validate files and settings, but I was not sure how to pull the audit data back again to some internal management panel to monitor compliance and drill down to what setting. All the cool stuff is in later Pester releases, so I&rsquo;d have to update the module on VM&rsquo;s and still exporting/pulling the audit-data was too much of a hassle in my opinion. We have multiple customers but that&rsquo;s just too much links in the chain. So Pester was not going to cut it for me.</p>
<p>So I was looking for an integrated security audit mechanism to prevent me writing everything and increasing the chance of stuff breaking randomly. So I checked out Automation Accounts and PowerShell Desired State Configuration, can&rsquo;t blame a PowerShell user right?, but there was no Audit/Monitor mode without applying the security controls. While I really like having safe environments, I really dislike broken applications due to too strict settings. So even with the <code>ApplyAndMonitor</code> this just would be too invasive to try in live environments. So Azure Automation DSC is off the table too.</p>
<h2 id="something-something-dark">Something, something dark</h2>
<p>I was a bit bugged and unsatisfied in my search for a solution for this challenge, I tend to find things immediately after stopping the search for said things, and I wanted to know more about DSC. To satisfy the knowledge craving I watched a <a href="https://youtu.be/hXS-rzs3Hak">PowerShell Conference EU 2020 video</a> by Gael Colas and Michael Greene, awesome video bit noisy though. I read the outline, but had to stop half way during the video. Boy I missed some nice stuff. I did however spot <code>Azure Policy Guest Configuration</code> on the outline of the talk.</p>
<p>Later on in my search for a solution to the security baseline challenge, I found a <a href="https://docs.microsoft.com/en-us/powershell/scripting/dsc/quickstarts/gpo-quickstart?view=powershell-7.1">quickstart</a> on Microsoft Docs which showed how to create a DSC configuration and .MOF file (compiled DSC configuration) from an exported GPO, which felt a little bit random, but hey let&rsquo;s see how far we can get.</p>
<p>I converted a GPO from the Microsoft Security Baseline and received some errors, but it did deliver both the configuration.ps1 and .MOF. The modules referenced on the <a href="https://github.com/microsoft/BaselineManagement">GitHub page</a> of the module were already installed, so I applied it to a test VM using Azure Automation DSC' <code>ApplyAndMonitor</code> configuration. And it workses! Awesome! In case you&rsquo;d want to export your own GPO&rsquo;s you can use <a href="https://docs.microsoft.com/en-us/powershell/module/grouppolicy/backup-gpo?view=win10-ps">Backup-GPO</a> for this.</p>
<p>Steps to download all the Windows Security baselines:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">@(<span style="color:#e6db74">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201909%20and%20Windows%20Server%20Version%201909%20Security%20Baseline.zip&#34;</span>,
<span style="color:#e6db74">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201507%20Security%20Baseline.zip&#34;</span>,
<span style="color:#e6db74">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201607%20and%20Windows%20Server%202016%20Security%20Baseline.zip&#34;</span>,
<span style="color:#e6db74">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201803%20Security%20Baseline.zip&#34;</span>,
<span style="color:#e6db74">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201809%20and%20Windows%20Server%202019%20Security%20Baseline.zip&#34;</span>,
<span style="color:#e6db74">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201903%20and%20Windows%20Server%20Version%201903%20Security%20Baseline%20-%20Sept2019Update.zip&#34;</span>,
<span style="color:#e6db74">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201909%20and%20Windows%20Server%20Version%201909%20Security%20Baseline.zip&#34;</span>,
<span style="color:#e6db74">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%202004%20and%20Windows%20Server%20Version%202004%20Security%20Baseline.zip&#34;</span>) | <span style="color:#66d9ef">Foreach</span>-Object {
  Invoke-Webrequest -URI $_ -OutFile ($_.split(<span style="color:#e6db74">&#34;/&#34;</span>)[-1].replace(<span style="color:#e6db74">&#39;%20&#39;</span>,<span style="color:#e6db74">&#39; &#39;</span>))}
</code></pre></div><p>I&rsquo;m primairly focussed on the <code>Windows-10-Windows Server-v2004-Security-Baseline-FINAL.zip</code> so I did:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-ChildItem Windows-10-Windows Server-v2004-Security-Baseline-FINAL | Expand-archive
</code></pre></div><p>This unpacks the zip, and allows us to pursue our journey. Now I was a bit bugged, because I had no idea which folder contains what inside the GPO folder (I don&rsquo;t speak GUID). Luckily there&rsquo;s an XML with the correct information.</p>

    <img src="/images/guest-configuration-policy/guid.png"  alt="GUID to GPO"  class="left"  style="border-radius: 8px;"  />


<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#66d9ef">[xml]</span>$xml = Get-Content .\manifest.xml
$guidtogpo = $xml.Backups.BackupInst | Select-Object @(
    @{ n=<span style="color:#e6db74">&#39;ID&#39;</span>; e={ $_.ID.<span style="color:#e6db74">&#39;#cdata-section&#39;</span> }}
    @{ n=<span style="color:#e6db74">&#39;DisplayName&#39;</span>; e={ $_.GPOdisplayname.<span style="color:#e6db74">&#39;#cdata-section&#39;</span> }}
)
</code></pre></div><p>Thanks to help from the PowerShell discord I was able to unraffle the above, I was looking in the wrong direction (<code>Select-XML</code>).</p>

    <img src="/images/guest-configuration-policy/guid-to-gpo.png"  alt="GUID to GPO"  class="left"  style="border-radius: 8px;"  />


<p>Configuration names can only contain alphanumerical characters and underscores, so knowing that I want to use the GPO <code>MSFT Windows Server 2004 - Member Server</code> I replace the spaces with underscores and convert the GPO inside the folder to a DSC configuration and MOF-file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#e6db74">&#34;MSFT Windows Server 2004 - Member Server&#34;</span> <span style="color:#f92672">-replace</span> <span style="color:#e6db74">&#39;[\s-]&#39;</span>, <span style="color:#e6db74">&#39;_&#39;</span>
MSFT_Windows_Server_2004_-_Member_Server

ConvertFrom-GPO -Path <span style="color:#e6db74">&#39;.\{A57A9BF8-C5CC-4CBE-AC7D-A1D0746523FE}\&#39;</span> -OutputConfigurationScript -ConfigName <span style="color:#e6db74">&#34;MSFT_Windows_Server_2004___Member_Server&#34;</span>
</code></pre></div><p>This creates an Output folder by default, which contains a configuration and MOF file.</p>
<p>Later that week I saw a <a href="https://twitter.com/ThomasMaurer/status/1354531440944427008">post</a> on Twitter by Thomas Maurer mentioning <code>Azure Policy Guest Configuration</code>, waaait a minute I saw that before! I read the  Microsoft Docs page and came to the conclusion, this was my missing link to my solution! This was also the moment I realized I had performed the first steps in the <a href="https://docs.microsoft.com/en-us/azure/governance/policy/how-to/guest-configuration-create-group-policy">quickstart</a> on the Docs page, but no harm in doing so then!</p>
<h2 id="azure-policy-guest-configuration">Azure Policy Guest Configuration</h2>
<p>Maybe it&rsquo;s my English reading profiency, but I just couldn&rsquo;t really figure out what the quickstart was guiding me through. I think others will have no problem following the quickstart.
Azure Policy Guest Configuration uses a .MOF-file and modules to validate local settings and report the compliance status on Azure Policy. The VM&rsquo;s require a Managed Identity and a VM extensions, both of which can be deployed via a default initiative. The MOF-file and technical prerequisites must be packaged. It uses a distinct PowerShell instance and doesn&rsquo;t interfere with DSC if it&rsquo;s already utilized on the VM.</p>
<p>The steps to be taken could be summarized to:</p>
<ol>
<li>Create a .MOF file with security controls based on the GPO-export using <code>ConvertFrom-GPO</code> (Baseline Management).</li>
<li>Make a package with configuration using <code>New-GuestConfigurationPackage</code>.</li>
<li>(Maybe test configuration on VM using <code>Test-GuestConfigurationPackage</code>), can also be piped from <code>New-GuestConfigurationPackage</code>.</li>
<li>Use <code>Publish-GuestConfigurationPackage</code> to publish the configuration to a storage container in an Azure Storage Account and produce a sharing link with SAS-token.</li>
<li>Use the link + sas token, displayname, a description, platform specifion and potentially a tag filter, an Azure Policy is created with <code>New-GuestConfigurationPolicy</code>.</li>
<li>Publish the said policy and apply it to a scope.</li>
</ol>
<p>The cmdlets are from the PowerShell module <code>GuestConfiguration</code>. Ok,ok, so far so good.</p>
<h2 id="lets-gooooo">Let&rsquo;s gooooo</h2>
<p>So I went and started, anddd I failed. Aand failed again. Until I started read a bit more carefully.</p>
<p>The error message was the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Set-AzStorageBlobContent<span style="color:#960050;background-color:#1e0010">:</span> C:\Users\ChristianPiet\Documenten\PowerShell\Modules\GuestConfiguration\3.0.0\GuestConfiguration.psm1<span style="color:#960050;background-color:#1e0010">:</span>469
Line |
 469 |          $Blob = Set-AzStorageBlobContent -Context $Context `
     |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     | The specified container does not exist. HTTP Status Code<span style="color:#960050;background-color:#1e0010">:</span> 404 - HTTP Error Message<span style="color:#960050;background-color:#1e0010">:</span> The specified container does not exist. ErrorCode<span style="color:#960050;background-color:#1e0010">:</span> ContainerNotFound ErrorMessage<span style="color:#960050;background-color:#1e0010">:</span> The specified container does not exist.
</code></pre></div><p>I wasn&rsquo;t sure which container it couldn&rsquo;t find. One look in the .psm1 file and I found that the storageaccount container by default is named <code>guestcontainer</code>. Later I thought why bother looking there if <code>Get-Help</code> also would suffice, doh! But onward I went and deployed the Policy.</p>
<p>I received a policy-ID and saw it in the Azure Policy blade, awesome!! I assigned the initiative <code>[Preview]: Deploy prerequisites to enable Guest Configuration policies on virtual machines</code> or <code>/providers/Microsoft.Authorization/policySetDefinitions/12794019-7a00-42cf-95c2-882eed337cc8</code> so the VM&rsquo;s receive the proper pre-requisites and the long Policy wait has begun.</p>
<p>The initiative contains the following (Policies and Effect Type):</p>
<ul>
<li>Add system-assigned managed identity to enable Guest Configuration assignments on virtual machines with no identities, Modify;</li>
<li>Add system-assigned managed identity to enable Guest Configuration assignments on VMs with a user-assigned identity, Modify;</li>
<li>Deploy the Windows Guest Configuration extension to enable Guest Configuration assignments on Windows VMs, DeployIfNotExists;</li>
<li>Deploy the Linux Guest Configuration extension to enable Guest Configuration assignments on Linux VMs,DeployIfNotExists;</li>
</ul>
<p>After a while the VM&rsquo;s had a Managed Identity in Azure AD and the proper extension: <code>AzurePolicyforWindows</code>.</p>
<p>It took a while for all VM&rsquo;s to be processed, it stated for a long time:</p>
<p><em>Reason for non-compliance
No related resources match the effect details in the policy definition.</em></p>
<p>So a nice bowl of spaghetti later, and the details pane of the VM showed a new item: Last evaluated resource (out of 1) with a clickable resource-id.
This gives the nice overview over all VM&rsquo;s with a drilldown on settings, this is exactly what I needed and what I&rsquo;d expect from an integrated tool to assess compliance of each setting. I really like it, it ticks all the boxes for the said challenge.</p>
<p><strong>Policy Compliance</strong></p>

    <img src="/images/guest-configuration-policy/policycomplianceoverview.png"  alt="Policy Compliance"  class="left"  style="border-radius: 8px;"  />


<p><strong>VM Compliance details overview</strong></p>

    <img src="/images/guest-configuration-policy/vmdetails.png"  alt="VM Compliance"  class="left "  style="border-radius: 8px;"  />


<p><strong>VM Compliance</strong></p>

    <img src="/images/guest-configuration-policy/vmcompliance.png"  alt="VM Compliance"  class="left"  style="border-radius: 8px;"  />


<h2 id="conclusion-and-next-steps">Conclusion and next steps</h2>
<p>By converting the GPO&rsquo;s to .MOF, packaging them and applying them to audit OS-settings, we&rsquo;ve a method to check our security posture using DSC and Azure Policy.
Using this feature of Azure Policy you can check compliance and drill down on specific settings, or test your security baseline vs. a reference without applying it directly.
The examples used were the Microsoft Windows Security Baselines, but you could as well use something internal or something like the CIS GPO&rsquo;s.
Next steps are automating deployment to customers with tag filtering and creating a build pipeline when a new security policy is designed!</p>
]]></content>
        </item>
        
        <item>
            <title>Start a blog!</title>
            <link>https://manbearpiet.github.io/posts/my-first-post/</link>
            <pubDate>Sun, 31 Jan 2021 10:19:52 +0100</pubDate>
            
            <guid>https://manbearpiet.github.io/posts/my-first-post/</guid>
            <description>Blog! Blarg! Blorg!? Why? Sometimes I have decent&amp;rsquo;ish ideas to solve challenges faced on the Microsoft Azure cloud, using Azure DevOps or with PowerShell. If there&amp;rsquo;s code involved with solving these problems, that code tends to disappear in a folder I&amp;rsquo;ve accordingly named Trash. I frequently hear from colleagues and read tweets of people struggling with the same challenges.
This blog will mostly feature my noobish take on challenges with these topics.</description>
            <content type="html"><![CDATA[<h1 id="blog-blarg-blorg">Blog! Blarg! Blorg!?</h1>
<h2 id="why">Why?</h2>
<p>Sometimes I have decent&rsquo;ish ideas to solve challenges faced on the Microsoft Azure cloud, using Azure DevOps or with PowerShell.
If there&rsquo;s code involved with solving these problems, that code tends to disappear in a folder I&rsquo;ve accordingly named <code>Trash</code>.
I frequently hear from colleagues and read tweets of people struggling with the same challenges.</p>
<p>This blog will mostly feature my noobish take on challenges with these topics.
By writing this blog I hope to improve my webdev and writing skills, but mostly try to help readers facing earlier mentioned challenges.</p>
<h2 id="how">How</h2>
<p>Years ago I did an attempt using a cheap hosting service and WordPress, that just wouldn&rsquo;t look like I wanted it to. I didn&rsquo;t ask for help and just let it bleed out.
To prevent the same error, I reached out earlier on the <a href="https://aka.ms/psdiscord">PowerShell discord</a> (amazing community). I told the members on the <em>#bridge</em> I had the idea to start a blog, but had no writing experience nor the idea on how to start a blog technically.  I was hinted to use GitHub Pages and Hugo and that it should be fairly easy to set up and go.</p>
<p>The nice thing about Hugo is that it allows me to write content in Markdown, which I&rsquo;m ok with. My webdev-skills are non-existant. So Hugo it is!</p>
<p>I read a blog where someone explained the steps <a href="https://earvingad.github.io/posts/blogwithhugo/">link</a></p>
<p>From this blog I learned:</p>
<ul>
<li>How to setup Hugo</li>
<li>How to use GitHub Pages for my Hugo based website</li>
<li>And how to install a theme for my Hugo based static website</li>
</ul>
<p>Before reading I was still looking toward hosting on a VPS (because new things like GitHub Pages are scary!), but reading eaarvingad his blog I had to give it a try.</p>
<h2 id="lets-go">Let&rsquo;s go</h2>
<p>So I created a private repository on GitHub, and you&rsquo;re looking at my first commit.
All in all setting up took less than 30 minutes.</p>
<p>My first choice was a minimalistic blog theme, but it didn&rsquo;t scale nicely with my content. Most of the extensive themes require seperate NPM packages, then I chose the the ananke theme it looks nice and doesn&rsquo;t really require all the bells and whistles.
But when I was reading the draft I almost was blinded by the white background. So I switched to <strong>hello-friend-ng</strong> by rhazdon on github <a href="https://github.com/rhazdon/hugo-theme-hello-friend-ng">link</a>.</p>
<p>This has a nice implementation which uses your system preference (light/dark).</p>
<h2 id="conclusion">Conclusion</h2>
<p>All in all the tips of the PowerShell discord members really helped, using Hugo and the right theme gives you an awesome experience.
While it is published under the MIT-license I really like Drodje Atlialp his theme so I bought him a coffee, if you like your theme please do the same!</p>
]]></content>
        </item>
        
    </channel>
</rss>
