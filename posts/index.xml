<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Blog on Azure and DevOops</title>
    <link>https://manbearpiet.github.io/posts/</link>
    <description>Recent content in Blog on Azure and DevOops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Christian Piet (CC BY 4.0)</copyright>
    <lastBuildDate>Thu, 25 Sep 2025 10:00:00 +0200</lastBuildDate>
    <atom:link href="https://manbearpiet.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Other Neovim editing basics</title>
      <link>https://manbearpiet.github.io/posts/nvim-search/</link>
      <pubDate>Thu, 25 Sep 2025 10:00:00 +0200</pubDate>
      <guid>https://manbearpiet.github.io/posts/nvim-search/</guid>
      <description>&lt;h1 id=&#34;searching-replacing-and-commenting-in-neovim&#34;&gt;Searching, replacing, and commenting in Neovim&lt;/h1&gt;&#xA;&lt;p&gt;In my previous posts, I covered the basics of navigating Neovim and editing text. While moving around words, lines, or paragraphs in &lt;code&gt;Normal&lt;/code&gt; mode and selecting text with &lt;code&gt;Visual&lt;/code&gt; mode, it works swiftly to navigate around text; sometimes, you need to look for something specific one or multiple times. In this post, I will cover another set of basic editing features: searching, replacing text, and commenting.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="searching-replacing-and-commenting-in-neovim">Searching, replacing, and commenting in Neovim</h1>
<p>In my previous posts, I covered the basics of navigating Neovim and editing text. While moving around words, lines, or paragraphs in <code>Normal</code> mode and selecting text with <code>Visual</code> mode, it works swiftly to navigate around text; sometimes, you need to look for something specific one or multiple times. In this post, I will cover another set of basic editing features: searching, replacing text, and commenting.</p>
<h2 id="searching">Searching</h2>
<p>There are several ways to search for text in Neovim. The fastest way is to use <code>Normal</code>-mode commands. You can also use <code>Visual</code>-mode to search for the selected text. Finally, you can use <code>Command</code>-mode to perform more complex searches and replacements.</p>
<p>Searching in Neovim sometimes highlights text matches in your buffer/opened file. You can disable this highlighting using the <code>:nohlsearch</code>-command, or use the shortcut <code>:noh</code>. If you think &ldquo;Oh, I can&rsquo;t remember this command&rdquo;, you can map it to a key combination of your choice. In a later post, I will cover how to create custom mappings.</p>
<h3 id="searching-in-normal-mode">Searching in Normal mode</h3>
<p>The easiest way to search for text depends on your starting context/where your cursor is. If your cursor is on the word you&rsquo;re looking for, you can use <code>*</code> to search forward for the next occurrence of that word, or <code>#</code> to search backward. To go to the next occurrence of the word, you can press <code>n</code>, and to go to the previous occurrence, you can press <code>N</code>.</p>
<p>The status line will show the search term and the current match number out of the total number of matches.</p>
<table>
  <thead>
      <tr>
          <th>Search-method</th>
          <th>Key/Command</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Backwards search of word under cursor</td>
          <td><code>*</code></td>
      </tr>
      <tr>
          <td>Forward search of word under cursor</td>
          <td><code>#</code></td>
      </tr>
  </tbody>
</table>
<figure><img src="/images/nvim-search/ster.png"
    alt="Select all text on line">
</figure>

<p>However, if you&rsquo;re nowhere near the word you&rsquo;re looking for, you can also search for the term directly. You can use <code>/</code> to search forward by pressing <code>/</code> or <code>?</code> to search backward.</p>
<p>After typing <code>/</code> or <code>?</code>, you can type the word or phrase you want to search for and press <code>Enter</code>. Neovim will then move the cursor to the next occurrence of that word or phrase.</p>
<table>
  <thead>
      <tr>
          <th>Search-method</th>
          <th>Key/Command</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Backwards search</td>
          <td><code>?&lt;pattern&gt;&lt;CR&gt;</code></td>
      </tr>
      <tr>
          <td>Forward search</td>
          <td><code>/&lt;pattern&gt;&lt;CR&gt;</code></td>
      </tr>
  </tbody>
</table>
<p><code>&lt;CR&gt;</code> means pressing the <code>Enter</code>-key. You can ignore casing using <code>\c</code> at the end of your search term, or enforce casing with <code>\C</code>. You can also disable case sensitivity for all searches by adding <code>:set ignorecase</code> to ignore it, and <code>:set noignorecase</code> to enable case-sensitivity again. If you want to override this setting and enforce case sensitivity when searching, you can add <code>set smartcase</code> to your configuration file. This will make searches case-sensitive if your search term contains uppercase letters.</p>
<figure><img src="/images/nvim-search/slash.png"
    alt="Select all text on line">
</figure>

<h3 id="regex-searching">Regex searching</h3>
<p>The keen-eyed among you might have noticed that, when pressing <code>*</code> and <code>#</code>, the editor populates the search commands with the term under your cursor. So, if you&rsquo;re wondering how to search for this specific word manually, you can see that after pressing <code>*</code> and <code>#</code>, the search term is populated. You can then edit this term to your liking and press <code>Enter</code> to search for it.</p>
<p>You can also use regular expressions in your search terms. For example, if you want to search for all text on a line that starts with &ldquo;foo&rdquo; and ends with &ldquo;bar&rdquo;, you can use the search term <code>/foo.*bar</code>. For more information on regular expressions, you can read <code>:h regular-expression</code> and <code>:h magic</code>.</p>
<figure><img src="/images/nvim-search/regex.png"
    alt="Select all text on line">
</figure>

<p>There are also options to search for an offset of characters/lines before/after your matched text. You can read more on pattern searching at <code>:h pattern-searches</code> or at the Vim <a href="https://neovim.io/doc/user/usr_03.html#_simple-searches">user manual</a> written by Bram Molenaar (the creator of Vim).</p>
<h3 id="searching-with-visual-mode">Searching with Visual mode</h3>
<p>Sometimes you want to search for a specific piece of text near your cursor, but it&rsquo;s not a single word. In this case, you can use <code>Visual</code>-mode to select the text you want to search for and then press <code>*</code> or <code>#</code> to search for the next or previous occurrence of that text.</p>
<p>This works exactly the same as in <code>Normal</code>-mode, but now you can select the text you want to search for. This is especially useful if you wish to search for a specific set of characters or a phrase.</p>
<figure><img src="/images/nvim-search/vis.png"
    alt="Select all text on line">
</figure>

<h2 id="replacing">Replacing</h2>
<p>All this searching is great, but sometimes you want to replace text. You can do this in <code>Command</code>-mode using the <code>:substitute</code>, or <code>:s</code> command. The <code>:s</code> command allows you to search for a specific term and replace it with another term. Providing no replacement term will delete the matched text.</p>
<p>The substitute command is shown as follows in the help (<code>:h :s</code>):
<code>:[range]s[ubstitute]/{pattern}/{string}/[flags] [count]</code></p>
<p>The <code>range</code> specifies the lines you want to search and replace in. If you don&rsquo;t specify a range, it will only search and replace in the current line.</p>
<p>You can specify a range using line numbers, for example, <code>:1,19s</code> will search and replace in lines 1 to 19. You can also use <code>%</code> to specify the entire file, for example, <code>:%s/&lt;pattern&gt;&lt;CR&gt;</code> will search and replace in the whole file. Command ranges are explained in more detail at <a href="https://neovim.io/doc/user/usr_10.html#10.3">user manual - 10.3 - Command Ranges</a>.</p>
<p>The pattern is the text you want to search for, just like we did earlier with the <code>/</code> and <code>?</code> commands. The string is the text you want to replace the pattern with.</p>
<p>The flags are optional and can be used to modify the behavior of the substitute command. The most common flags are:</p>
<table>
  <thead>
      <tr>
          <th>Flag</th>
          <th>Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>i</code></td>
          <td>Ignore casing when searching for the pattern.</td>
      </tr>
      <tr>
          <td><code>I</code></td>
          <td>Enforce casing when searching for the pattern.</td>
      </tr>
      <tr>
          <td><code>g</code></td>
          <td>Replace all occurrences of the pattern in the line. If you don&rsquo;t specify this flag, only the first occurrence will be replaced.</td>
      </tr>
      <tr>
          <td><code>c</code></td>
          <td>Confirm each replacement.</td>
      </tr>
  </tbody>
</table>
<p>You can find more info on flags for substitute at <code>:h :s_flags</code>.</p>
<table>
  <thead>
      <tr>
          <th>Replace-example</th>
          <th>Key/Command</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Replace matched pattern on current line</td>
          <td><code>:s/&lt;pattern&gt;/&lt;replacing text&gt;&lt;CR&gt;</code></td>
      </tr>
      <tr>
          <td>Replace first match searched across entire file</td>
          <td><code>:%s/&lt;pattern&gt;/Iamthereplacingtext</code></td>
      </tr>
      <tr>
          <td>Replace all matches across the entire file</td>
          <td><code>:%s/&lt;pattern&gt;/Iamthereplacingtext/g</code></td>
      </tr>
      <tr>
          <td>Case insensitivy search and remove all pattern matches across the entire file and ask for confirmation on each try</td>
          <td><code>:%s/&lt;pattern&gt;//gci</code></td>
      </tr>
  </tbody>
</table>
<h3 id="example">Example</h3>
<p>Example of replacing all occurrences of &lsquo;dns&rsquo; with nothing (deleting), across the entire file, ignoring case, and asking for confirmation on each replacement:</p>
<p><figure><img src="/images/nvim-search/before.png"
    alt="Select all text on line">
</figure>

<figure><img src="/images/nvim-search/replace.png"
    alt="Select all text on line">
</figure>

<figure><img src="/images/nvim-search/confirm.png"
    alt="Select all text on line">
</figure>
</p>
<p>There are several options to repeat a search and flags you can use. This should be sufficient to get you started. You can read more about the substitute command at <code>:h :s</code> and <code>:h substitute</code>.</p>
<h2 id="commenting">Commenting</h2>
<p>Another common task when editing code is commenting and uncommenting code. There are several ways to do this in Neovim, accelerated by plugins, but there are also native methods available. You can read help on commenting at <code>:h commenting</code>.</p>
<p>In <code>Normal</code>-mode you can use <code>gcc</code> to comment or uncomment the current line. You can also use <code>gc</code> in <code>Visual</code>-mode to comment or uncomment the selected lines.</p>
<p><code>gcc</code> works by toggling the comment on the current line. If the line is already commented, it will uncomment it. If the line is not commented, it will comment it. This also supports multiple lines if you provide a count before the command; for example, <code>3gcc</code> will comment or uncomment the following three lines.</p>
<p>Do note that commenting doesn&rsquo;t work if Neovim is unaware of the filetype you&rsquo;re editing. You can check the filetype with <code>:set filetype?</code>. If Neovim doesn&rsquo;t know the filetype, it won&rsquo;t know how to comment the code. There are options to set the file type, but I find it easier to start a file with <code>:e myfile.&lt;filetype&gt;</code>.</p>
<figure><img src="/images/nvim-search/comment.png"
    alt="Select all text on line">
</figure>

<table>
  <thead>
      <tr>
          <th>Comment-method</th>
          <th>Key/Command</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Comment/uncomment current line</td>
          <td><code>gcc</code></td>
      </tr>
      <tr>
          <td>Comment/uncomment next 3 lines</td>
          <td><code>3gcc</code></td>
      </tr>
      <tr>
          <td>Comment/uncomment selected lines</td>
          <td>Visually select and press <code>gc</code> in Visual mode</td>
      </tr>
  </tbody>
</table>
<h2 id="the-end">The End</h2>
<p>That&rsquo;s it for the basics of navigating, editing, searching, replacing, and commenting in Neovim. I hope you found this post helpful. In my next post, I will cover how to customize your experience using options and create custom mappings to further speed up your workflow. Happy coding, everyone!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Basics of Vim/Neovim continued</title>
      <link>https://manbearpiet.github.io/posts/nvim-continued/</link>
      <pubDate>Fri, 19 Sep 2025 10:00:00 +0200</pubDate>
      <guid>https://manbearpiet.github.io/posts/nvim-continued/</guid>
      <description>&lt;h1 id=&#34;basics-of-vimneovim-continued&#34;&gt;Basics of Vim/Neovim continued&lt;/h1&gt;&#xA;&lt;p&gt;In my previous post (&lt;a href=&#34;https://manbearpiet.com/posts/nvim/%29&#34;&gt;https://manbearpiet.com/posts/nvim/)&lt;/a&gt;, I mentioned several modes and basics of editing in Vim/Neovim. In this post, I&amp;rsquo;ll continue the topic and show you how to use Tutor and help, as well as what you can do with Visual mode.&lt;/p&gt;&#xA;&lt;h2 id=&#34;help-and-tutor&#34;&gt;Help and Tutor&lt;/h2&gt;&#xA;&lt;p&gt;In the last post, I mentioned how to access and quit help articles in Vim/Neovim; these articles contain gems. There is even a tutoring tutorial program you can access with the Commandline Mode command using &lt;code&gt;:Tutor&lt;/code&gt;.&#xA;This program will guide you through the Neovim tutorial and will contain help with links.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="basics-of-vimneovim-continued">Basics of Vim/Neovim continued</h1>
<p>In my previous post (<a href="https://manbearpiet.com/posts/nvim/%29">https://manbearpiet.com/posts/nvim/)</a>, I mentioned several modes and basics of editing in Vim/Neovim. In this post, I&rsquo;ll continue the topic and show you how to use Tutor and help, as well as what you can do with Visual mode.</p>
<h2 id="help-and-tutor">Help and Tutor</h2>
<p>In the last post, I mentioned how to access and quit help articles in Vim/Neovim; these articles contain gems. There is even a tutoring tutorial program you can access with the Commandline Mode command using <code>:Tutor</code>.
This program will guide you through the Neovim tutorial and will contain help with links.</p>
<figure><img src="/images/nvim-continued/tutor.png"
    alt="Select all text on line">
</figure>

<p>The default Tutor is <code>:Tutor tutor</code>, but there are also <code>:Tutor vim-01-beginner</code> and <code>:Tutor vim-02-beginner</code>.
I couldn&rsquo;t access Tutor because I copied and pasted some flawed configuration code, d&rsquo;oh! But make sure to check <code>:Tutor</code>, it&rsquo;s excellent.
If the area of the help is too small, you can drag the borders with ehh your mouse.</p>
<p>Help can be accessed with the <code>:help</code>, or <code>:h</code>-command. This also supports tab-completion, and you can cycle through the articles with tab/shift-tab.</p>
<figure><img src="/images/nvim-continued/help.png"
    alt="Select all text on line">
</figure>

<h2 id="visual-mode">Visual Mode</h2>
<p>Visual mode is a mode in which you select text relative to your cursor&rsquo;s position. If you&rsquo;re still using your mouse, although it doesn&rsquo;t exist, dragging across a sentence, double-clicking, and dragging across lines is what Visual mode is. It&rsquo;s a swift way to select a lot of text and allows you to use your operators. Visual mode grants you flexibility in selecting the text.</p>
<p>Visual mode comes in three flavors:</p>
<ul>
<li>v</li>
<li>Ctrl-v</li>
<li>V</li>
</ul>
<h3 id="v">v</h3>
<p><code>v</code>, starts visual mode with just the character under your cursor selected, and with the motion keys (e.g. hjkl), you can choose more text.
Navigating with your cursor in the <code>v</code> mode will select all text between your visual starting position and your cursor&rsquo;s position. So if your cursor goes up with <code>k</code> in the middle of a sentence, it will select all text on the line backwards up to the position of the cursor.</p>
<p>As an example if you want to visually select all text from your cursor up to the end of the line, you can do <code>v$</code>, which enters visual mode at your cursor position. Say you&rsquo;d want to yank/copy the selected text, you could press <code>y' to do so, delete it with </code>d&rsquo; or change it.</p>
<p>This can be handy if you want to copy all text except the line ending. Of course, you can also press <code>Y</code>/<code>D</code>/<code>C</code> to do the same, but this will also include the line ending. <code>v</code> is excellent to use if you need precision.
<figure><img src="/images/nvim-continued/v.png"
    alt="Select all text on line">
</figure>
</p>
<h3 id="ctrl-v">Ctrl-v</h3>
<p><code>Ctrl-v</code> or blockwise Visual mode is a bit odd in the sense that it starts at the cursor&rsquo;s current position, but moving the cursor will select only the character relative to the cursor&rsquo;s starting position. So if you go up/down a line, it doesn&rsquo;t select all text on the line between your starting position and your cursor&rsquo;s position, like <code>v</code> does.</p>
<p>The way I remember this is it feels a lot like selecting a column in a spreadsheet, then you&rsquo;re also not interested in the rows before, just in the cells above or under your starting position. Ctrl-v is excellent when you need extreme precision or when you want to edit leading characters. Try it with <code>gg</code> (start of the file), <code>Ctrl-v</code>, <code>GG</code> (end of file), and <code>d</code> to delete the selected position.</p>
<p>One handy trick I frequently use in other IDEs is the multi-line insert; you can also do this with <code>Ctrl-v</code>. Select the positions you&rsquo;d want to enter text in, press <code>Shift+i</code>, make your change on a single line, and press <code>Esc</code>.
<figure><img src="/images/nvim-continued/block.png"
    alt="Select all text on line">
</figure>
</p>
<h3 id="v-1">V</h3>
<p><code>V</code> starts visual mode on the line your cursor is positioned at and selects all the text on that line. When you go up or down, it includes all text on that line and all text and other selected lines. This is the mode I use the most, as it allows me to select whole lines quickly.
<figure><img src="/images/nvim-continued/groteV.png"
    alt="Select all text on line">
</figure>
</p>
<h2 id="fin">Fin</h2>
<p>I don&rsquo;t frequently use visual mode, but some people like it, so it can be handy to have it in your toolbelt and know how to use it. The help for visual mode is excellent and can be found at <code>:h visual-mode</code>. I hope this was helpful. Happy coding, everyone!</p>
<p>PS:
There are some excellent resources I found on the web, be sure to checkout:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=TQn2hJeHQbM&amp;list=PLep05UYkc6wTyBe7kPjQFWVXTlhKeQejM&amp;index=1">Advent of Neovim by TJ de Vries - YouTube playlist</a></li>
<li>These posts by m4xshen:
<ul>
<li><a href="https://m4xshen.dev/posts/vim-basic-commands">Essential Vim commands for efficient text editing</a></li>
<li><a href="https://m4xshen.dev/posts/vim-command-workflow">Practical Vim command workflow</a></li>
<li><a href="https://m4xshen.dev/posts/vim-commands-for-navigation-between-brackets">3 Vim commands for blazingly fast navigation between brackets</a></li>
</ul>
</li>
<li>VSCode Learn Vim extension by vintharas:
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=vintharas.learn-vim">VSCode extension</a></li>
<li><a href="https://www.youtube.com/watch?v=llo7kgSjcBM">Learn Vim - the VSCode extension</a></li>
<li><a href="https://www.youtube.com/watch?v=zQ6Ua-8pM9g">Boost Your Coding Fu With VSCode and Vim - YouTube video</a></li>
<li><a href="https://www.barbarianmeetscoding.com/boost-your-coding-fu-with-vscode-and-vim/">Boost your coding Fu with VSCode and Vim - Website</a></li>
<li><a href="https://www.barbarianmeetscoding.com/boost-your-coding-fu-with-vscode-and-vim/table-of-contents">Free book online</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Basics of Vim/Neovim</title>
      <link>https://manbearpiet.github.io/posts/nvim/</link>
      <pubDate>Fri, 12 Sep 2025 10:00:00 +0200</pubDate>
      <guid>https://manbearpiet.github.io/posts/nvim/</guid>
      <description>&lt;h1 id=&#34;neowhat&#34;&gt;Neowhat?&lt;/h1&gt;&#xA;&lt;p&gt;It was the end of May 2025. A friend and former colleague of mine sent me a link about a YouTuber called ThePrimeagen. In his videos, he featured some funny takes on tech news and had some sassy remarks, but what sparked my interest was his IDE. He used a terminal in which he was editing text, but it didn&amp;rsquo;t look like old-school Vi. It had rich support for languages, an uncluttered interface, and I never saw a mouse cursor. I was interested, so I viewed some more videos, and my Neovim journey began. I&amp;rsquo;ve a deep interest in how technology works, and I wanted a deeper understanding of how VSCode works and how it helps me with code editing. What better way than to check out the competition? This, plus a desire to become more able with editors like Vi, made it a clear choice to invest time to better understand this editor.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="neowhat">Neowhat?</h1>
<p>It was the end of May 2025. A friend and former colleague of mine sent me a link about a YouTuber called ThePrimeagen. In his videos, he featured some funny takes on tech news and had some sassy remarks, but what sparked my interest was his IDE. He used a terminal in which he was editing text, but it didn&rsquo;t look like old-school Vi. It had rich support for languages, an uncluttered interface, and I never saw a mouse cursor. I was interested, so I viewed some more videos, and my Neovim journey began. I&rsquo;ve a deep interest in how technology works, and I wanted a deeper understanding of how VSCode works and how it helps me with code editing. What better way than to check out the competition? This, plus a desire to become more able with editors like Vi, made it a clear choice to invest time to better understand this editor.</p>
<p>If you&rsquo;re unfamiliar with Vim or Neovim, or if you&rsquo;re interested in the topic, this blog post will provide a brief overview of my understanding of how to navigate text in Vim/Neovim. In later posts, I&rsquo;ll dive deeper into more advanced topics and how to extend Neovim to make it a full-fledged IDE.</p>
<h2 id="neovim">Neovim</h2>
<p>Vim is the scary editor in your terminal where noobies die because they can&rsquo;t get out. However, it isn&rsquo;t as frightening as it looks. You do, however, need to understand why it works differently from other editors. Neovim is a fork of Vim, so it shares many similarities with Vim and offers added value beyond it. It provides speed, extensibility, and is a fun timesink.</p>
<h2 id="installing">Installing</h2>
<p>I&rsquo;m a macOS user, so I installed using <code>brew install neovim</code>. After doing so, you have to type <code>nvim</code> in your terminal, and you&rsquo;re in the editor. It is a strange editor if you&rsquo;re used to clicking on all the things, because where are the buttons? The central idea is that your buttons are on your keyboard, and you use shortcuts/keymaps to perform your actions.
An Integrated Developer Environment is a rich text editor first, so I did some baby steps in trying to edit, and I wasn&rsquo;t really successful. I had to read a bit and view some Vim for Dummies videos, because all Neovim getting-started videos are about extending functionality, but not about how to edit text.
I could&rsquo;ve saved myself a lot of time at this point by first reading the documentation, which is the first thing the editor shows you, d&rsquo;oh! When it launches, you can type <code>:help neovim</code> and read the help. Although you do need to know how to navigate text to do so.</p>
<h2 id="modes">Modes</h2>
<p>Neovim uses <strong>modes</strong> to change between functionalities.
When using a text editor, we&rsquo;re used to clicking on the position we want to edit, typing what we want, and then scrolling. Regular text editing is done in the <strong>Insert</strong>-mode, by default, the editor is launched in the <strong>Normal</strong> mode, in which you can navigate the text.
Every time I tried to use Vim via a terminal on a remote machine, I was intimidated and ended up installing the nano editor. But no more! If you press <code>i</code>, the editor enters <strong>Insert</strong> mode, and you can type as you&rsquo;re used to. This all worked fine, but when I needed to navigate to a different line, things got scary again. Luckily, <code>Esc</code> brings our editor back to <strong>Normal</strong>-mode.
But now I was faced with the scariest part: how do you exit the darn editor? When not in <strong>Insert</strong>-mode, you can press <code>:</code>, to enter <strong>Commandline</strong> mode. This Command-line mode allows us to <code>:write</code> the text in our current editor and <code>:quit</code> the editor, but this being a fast editor, you can also just type <code>:w</code> and <code>:q</code> or <code>:wq</code>.
Quitting a help or any vim tab also works via <code>:q</code>, so if you&rsquo;ve a help open, this way you can exit that too. You can read more about modes by reading the help on modes with <code>:help vim-modes</code>.
<figure><img src="/images/nvim/exit.jpg"
    alt="Exit Vim meme">
</figure>
</p>
<h2 id="navigating">Navigating</h2>
<p>So far so good, but this wasn&rsquo;t more than a extremely simple &ldquo;Hello World&rdquo;-like example. The normal mode isn&rsquo;t a shortcut to the command mode, it&rsquo;s so much more!
In the <strong>Normal</strong> mode you can navigate your cursor in the editor, manipulate text relative to your cursor and a lot more. But it all start with navigating your cursor across the editor. In all the videos they talked about the <strong>home row</strong>, this means the row your fingers hopefully land on when you touch a keyboard.</p>
<p>The most important fact you have to understand is, you have no mouse, and no arrow-keys they just don&rsquo;t exist anymore from this point on.</p>
<figure><img src="/images/nvim/meme.png"
    alt="Drake meme, don&#39;t use a mouse, use your keyboard">
</figure>

<p>On your home-row the most import keys are located in the portion of your right hand, the <code>hjkl</code> section.</p>
<p>The barebones:</p>
<ul>
<li><code>h</code> moves the cursor one character left</li>
<li><code>j</code> moves the cursor one line down</li>
<li><code>k</code> moves the cursor one line up</li>
<li><code>l</code> moves the cursor one character right</li>
</ul>
<p>I watched <a href="https://www.youtube.com/watch?v=z4eA2eC28qg">this video</a> by DevOps Toolbox. And I was ready to take on the world, at least I thought. It didn&rsquo;t click with me until I tried a browser based game called <a href="https://vim-adventures.com/">Vim Adventures</a>. After the video and the game I was able to navigate text using vim motions.</p>
<p>In the video and game it&rsquo;s made clear that in <strong>Normal</strong> mode you can move your cursor not only per character, but you can move around words, sentences, paragraphs etc. A small note I made to remember these:</p>
<ul>
<li><code>w</code> moves the cursor to the first character of the next word</li>
<li><code>b</code> moves the cursor to the first character of the previous word</li>
<li><code>e</code> moves the cursor to the last character of the current word</li>
<li><code>a</code> moves to the next character and enters <strong>Insert</strong> mode</li>
<li><code>$</code> moves the cursor to the end of the line</li>
<li><code>0</code> moves the cursor to the start of the line</li>
<li><code>^</code> moves the cursor to the first non blank character of the line</li>
<li><code>gg</code> moves towards the start of your file</li>
<li><code>G</code> moves towards the end of your file</li>
<li><code>H</code> moves to the top of your screen</li>
<li><code>M</code> moves towards the middle of your screen</li>
<li><code>L</code> moves towards the bottom of your screen</li>
<li><code>{</code> moves towards the previous paragraph</li>
<li><code>}</code> moves towards the next paragraph (blank line)</li>
<li><code>Ctrl + D</code> moves your screen down</li>
<li><code>Ctrl + U</code> moves your screen up</li>
<li><code>zz</code> moves your screen in a way your cursor is in the middle.</li>
</ul>
<p>Those are my most-used shortcuts for navigation. This makes you a lot faster navigating around files, so there might be something about that <strong>Normal</strong>-mode after all. However, the editing still felt a bit clunky; I was always moving around, entering <strong>Insert</strong> mode with i , and then going back to <strong>Normal</strong> mode.</p>
<h2 id="operators">Operators</h2>
<p>The clunkiness came from the fact that I was navigating, but not really combining knowledge. For instance if I wanted to delete a word, I&rsquo;d move towards the end of the word, then move right with <code>l</code>, enter <strong>Insert</strong> mode and backspace until the word is gone. There are better ways to do so. Enter operators, if I&rsquo;d only would&rsquo;ve read the manual at <code>:help operator</code> sooner..</p>
<p>Operators are commands you provide a motion and then the editor performs the command on the text based on the motion you provided. This maybe sounds difficult, but bear with me. The most important operators are:</p>
<ul>
<li><code>d</code> for delete</li>
<li><code>c</code> for change, this deletes and sets the editor mode to Insert, so you can type the text immediatly</li>
<li><code>y</code> for yank, this yanks/copies the text to a buffer/clipboard</li>
</ul>
<p>So, if you want to delete a word, you can type <code>dw</code>, which deletes from your current cursor position to the start of the next word. If you want to delete from your current position to the end of the line, you can type <code>d$</code>. You get the idea, you can combine operators with motions.
To delete a whole line, you can type <code>dd</code>, which deletes the entire line you are on. The same applies to <code>yy</code> , which yanks the entire line. Or <code>cc</code> , which removes the whole line and sets you in Insert-mode.</p>
<p>Pasting is done with <code>p</code> for paste after your cursor and <code>P</code> for paste before your cursor. What caught me offguard a few time is that your buffer/clipboard is filled when yanking but also with deleting text. So deleting a word will default to overwriting your clipboard. This caught me offguard a bit, since I usually copy/yank my text, delete the thing I want gone and then paste, but this will paste the deleted text.</p>
<p>This may feel like a lot, but just start small with <code>dw</code>, <code>d$</code>, <code>dd</code>,<code>cw</code>,<code>cc</code>,<code>yw</code>, <code>yy</code> and <code>p</code> and you&rsquo;ll be amazed how fast you can edit text.</p>
<h2 id="operators-on-steroids">Operators on Steroids</h2>
<p>This enables us to edit text much faster by combining motions and operators. But wait, there&rsquo;s more. You can also repeat an action a few times by providing a number before the operator. So if you want to delete 3 words, you can type <code>d3w</code>, or if you want to delete 4 lines, you can type <code>d4d</code>. This also works with change and yank, so <code>c3w</code>, <code>y3w</code>, <code>c4d</code>, and <code>y4d</code> work too. The same applies to <code>dd</code> and <code>yy</code>; so, <code>3dd</code> deletes 3 lines and <code>4yy</code> yanks 4 lines relative to your cursor.</p>
<p>There are also other tools, like delete until the character you provide, which is done with <code>d</code> + <code>t</code> + <code>character</code>. So if you want to delete until the next comma you can type <code>dt,</code>. This also works with change and yank, so <code>ct,</code> and <code>yt,</code> work too. If you want to include the comma, you can use <code>f</code> instead of <code>t</code>, so <code>df,</code>, <code>cf,</code> and <code>yf,</code>.</p>
<p>With some googling, I found out you can delete something and not have it in your buffer/clipboard, by using the <code>_</code> register, so <code>_d3w</code> deletes 3 words without putting it in your clipboard.</p>
<h2 id="undoredo">Undo/Redo</h2>
<p>Mistakes happen, luckily you can undo and redo your actions. Undo is done with <code>u</code> and redo with <code>Ctrl + r</code>.</p>
<h2 id="other-useful-commands">Other useful commands</h2>
<p>There are some other useful commands I use often:</p>
<ul>
<li><code>.</code> repeats your last action, so if you deleted a word with <code>dw</code> you can repeat that with <code>.</code></li>
<li><code>x</code> deletes the character under your cursor, this is like backspace in <strong>Insert</strong>-mode</li>
<li><code>X</code> deletes the character before your cursor, this is like delete in <strong>Insert</strong>-mode</li>
<li><code>r</code> + <code>character</code> replaces the character under your cursor with the character you provided</li>
<li><code>R</code> enters <strong>Replace</strong>-mode, this is like <strong>Insert</strong>-mode but it overwrites text</li>
<li><code>o</code> opens a new line below your current line and enters <strong>Insert</strong>-mode</li>
<li><code>O</code> opens a new line above your current line and enters <strong>Insert</strong>-mode</li>
<li><code>K</code> adds a new line above your cursor in <strong>Normal</strong>-mode</li>
<li><code>P</code> pastes on the line above your cursor</li>
<li><code>J</code> joins the current line with the next line</li>
<li><code>D</code> deletes from your cursor to the end of the line, this is like <code>d$</code></li>
<li><code>Y</code> yanks from your cursor to the end of the line, this is like <code>y$</code></li>
<li><code>C</code> changes from your cursor to the end of the line, this is like <code>c$</code></li>
<li><code>A</code> moves your cursor to the end of the line and enters <strong>Insert</strong>-mode</li>
<li><code>I</code> moves your cursor to the first non-blank character of the line and enters <strong>Insert</strong>-mode</li>
<li><code>ZZ</code> saves and exits the editor, this is like <code>:wq</code></li>
<li><code>ZQ</code> exits the editor without saving, this is like <code>:q!</code></li>
</ul>
<p>There is also a trick in which you can do a motion towards text inside braces, parentheses or quotes. If on a line you have text in quotes, you can use <code>ci&quot;</code> to change the text inside the quotes. Or for instance if there are braces on a line you can delete the text inside by typing <code>di[</code>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I left out a significant amount of commands and motions, but this is a good start to get you going. In a subsequent post, I&rsquo;d like to demonstrate how to utilize substitutions, visual mode, and extend Neovim to make it a full-fledged IDE. These tips work in both Vim and Neovim, so if you&rsquo;re using Vim, you can use these too. There are several cheat sheets available online; just Google &ldquo;vim cheat sheet&rdquo; and you&rsquo;ll find several. But the best way to git gud is by putting in the hours and getting it in the fingers, Happy Vimming!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Signing your JWTs for your GitHub Apps using Azure KeyVault</title>
      <link>https://manbearpiet.github.io/posts/signing-jwt/</link>
      <pubDate>Mon, 07 Jul 2025 12:30:00 +0200</pubDate>
      <guid>https://manbearpiet.github.io/posts/signing-jwt/</guid>
      <description>&lt;h1 id=&#34;github-apps&#34;&gt;GitHub Apps&lt;/h1&gt;&#xA;&lt;p&gt;In a previous post about GitHub Apps, I demonstrated how to use a PowerShell module to create your JWTs and interact with GitHub&amp;rsquo;s REST APIs. I don&amp;rsquo;t like storing the private key on the server, so in this post, I&amp;rsquo;ll show you how to use Azure Key Vault&amp;rsquo;s signing API to sign your JWT.&lt;/p&gt;&#xA;&lt;p&gt;We want to get the same results, but without the private key on our host locally.&#xA;&lt;figure&gt;&lt;img src=&#34;https://manbearpiet.github.io/images/github-apps/content.png&#34;&#xA;    alt=&#34;Getting content with a GitHub App&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="github-apps">GitHub Apps</h1>
<p>In a previous post about GitHub Apps, I demonstrated how to use a PowerShell module to create your JWTs and interact with GitHub&rsquo;s REST APIs. I don&rsquo;t like storing the private key on the server, so in this post, I&rsquo;ll show you how to use Azure Key Vault&rsquo;s signing API to sign your JWT.</p>
<p>We want to get the same results, but without the private key on our host locally.
<figure><img src="/images/github-apps/content.png"
    alt="Getting content with a GitHub App">
</figure>
</p>
<h3 id="azure-keyvault">Azure KeyVault</h3>
<p>Since the Azure Functions host, in our scenario (HTTP-triggered), is a public web server, I strongly disliked storing my private key file locally on that host&rsquo;s file system. We typically store our private keys in a Microsoft-hosted secret vault, specifically the Azure Key Vault service. I investigated whether I could use Azure Key Vault for this use case.</p>
<p>Unfortunately, PowerShell-JWT doesn&rsquo;t support creating an unsigned JWT, so we&rsquo;ll have to make our tokens ourselves.
JWTs are just JSON&rsquo;s base64 URL encoded, so it&rsquo;s base64 with a few characters replaced.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">New-UnsignedJWT</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">       <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">(</span><span class="na">SupportsShouldProcess</span><span class="p">)]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">       <span class="k">param</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">              <span class="c"># JWT Header (https://www.rfc-editor.org/rfc/rfc7519#page-11), always creates JWT typ and uses RS256 signing algorith.</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">              <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">              <span class="p">[</span><span class="no">Hashtable</span><span class="p">]</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">              <span class="nv">$Headers</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">              <span class="c"># Payload with the JWT claims (https://www.rfc-editor.org/rfc/rfc7519#page-8), always adds iat and exp by default.</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">              <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">              <span class="p">[</span><span class="no">Hashtable</span><span class="p">]</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">              <span class="nv">$Payload</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">       <span class="p">)</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl">       <span class="k">if</span> <span class="p">(</span><span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ShouldProcess</span><span class="p">(</span><span class="s1">&#39;New UnsignedJWT&#39;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">              <span class="nv">$jwtHeader</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">                     <span class="n">alg</span> <span class="p">=</span> <span class="s1">&#39;RS256&#39;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">                     <span class="n">typ</span> <span class="p">=</span> <span class="s1">&#39;JWT&#39;</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">              <span class="p">}</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl">              <span class="nv">$unformattedHeader</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$Headers</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">                     <span class="nv">$Headers</span> <span class="p">+</span> <span class="nv">$jwtHeader</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">                     <span class="nv">$jwtHeader</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">              <span class="p">}</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">
</span></span><span class="line"><span class="ln">26</span><span class="cl">              <span class="nv">$formattedHeader</span> <span class="p">=</span> <span class="nv">$unformattedHeader</span> <span class="p">|</span> <span class="nb">ConvertTo-Json</span> <span class="n">-Compress</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">
</span></span><span class="line"><span class="ln">28</span><span class="cl">              <span class="nv">$jwtPayload</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">                     <span class="s1">&#39;iat&#39;</span> <span class="p">=</span> <span class="p">[</span><span class="no">Int32</span><span class="p">](</span><span class="nb">Get-Date</span> <span class="n">-UFormat</span> <span class="k">%</span><span class="n">s</span><span class="p">)</span> <span class="p">-</span> <span class="mf">60</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">                     <span class="s1">&#39;exp&#39;</span> <span class="p">=</span> <span class="p">[</span><span class="no">Int32</span><span class="p">](</span><span class="nb">Get-Date</span> <span class="p">(</span><span class="nb">Get-Date</span><span class="p">).</span><span class="py">AddMinutes</span><span class="p">(</span><span class="mf">8</span><span class="p">)</span> <span class="n">-UFormat</span> <span class="k">%</span><span class="n">s</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">              <span class="p">}</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">
</span></span><span class="line"><span class="ln">33</span><span class="cl">              <span class="nv">$unformattedPayload</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$Payload</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">                     <span class="nv">$Payload</span> <span class="p">+</span> <span class="nv">$jwtPayload</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">36</span><span class="cl">                     <span class="nv">$jwtPayload</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">              <span class="p">}</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">
</span></span><span class="line"><span class="ln">39</span><span class="cl">              <span class="nv">$formattedPayload</span> <span class="p">=</span> <span class="nv">$unformattedPayload</span> <span class="p">|</span> <span class="nb">ConvertTo-Json</span> <span class="n">-Compress</span> <span class="n">-Depth</span> <span class="mf">99</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl">
</span></span><span class="line"><span class="ln">41</span><span class="cl">              <span class="s1">&#39;{0}.{1}&#39;</span> <span class="o">-f</span> <span class="vm">@</span><span class="p">(</span>
</span></span><span class="line"><span class="ln">42</span><span class="cl">                     <span class="p">[</span><span class="no">Convert</span><span class="p">]::</span><span class="n">ToBase64String</span><span class="p">([</span><span class="no">System.Text.UTF8Encoding</span><span class="p">]::</span><span class="n">UTF8</span><span class="p">.</span><span class="py">GetBytes</span><span class="p">(</span><span class="nv">$formattedHeader</span><span class="p">)).</span><span class="py">TrimEnd</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">).</span><span class="py">Replace</span><span class="p">(</span><span class="s1">&#39;+&#39;</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">).</span><span class="py">Replace</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">43</span><span class="cl">                     <span class="p">[</span><span class="no">Convert</span><span class="p">]::</span><span class="n">ToBase64String</span><span class="p">([</span><span class="no">System.Text.UTF8Encoding</span><span class="p">]::</span><span class="n">UTF8</span><span class="p">.</span><span class="py">GetBytes</span><span class="p">(</span><span class="nv">$formattedPayload</span><span class="p">)).</span><span class="py">TrimEnd</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">).</span><span class="py">Replace</span><span class="p">(</span><span class="s1">&#39;+&#39;</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">).</span><span class="py">Replace</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">44</span><span class="cl">              <span class="p">)</span>
</span></span><span class="line"><span class="ln">45</span><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="ln">46</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>After much tinkering with Base64 URL-encoded strings and finally overcoming the last hurdle with the hash, thanks again to Drew from the PowerShell Discord, I generated a valid JWT signature using this code. Make sure you&rsquo;re logged into Azure PowerShell and that the identity performing the script has the Key-signing permission on the key vault containing the private key.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">New-AZKVTokenSignature</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">       <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">(</span><span class="na">SupportsShouldProcess</span><span class="p">)]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">       <span class="k">param</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">              <span class="p">[</span><span class="nb">Parameter</span><span class="p">(</span><span class="na">Mandatory</span><span class="p">)]</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">              <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">              <span class="nv">$JWT</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">              <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">              <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">              <span class="nv">$KeyVaultName</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">              <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">              <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">              <span class="nv">$PrivateKeyName</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">              <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">              <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">              <span class="nv">$PrivateKeyVersion</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">       <span class="p">)</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">       <span class="k">if</span> <span class="p">(</span><span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ShouldProcess</span><span class="p">(</span><span class="s1">&#39;Requesting KeyVault API JWT signature&#39;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">              <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">                     <span class="nv">$KeyVaultToken</span> <span class="p">=</span> <span class="nb">Get-AzAccessToken</span> <span class="n">-ResourceTypeName</span> <span class="n">KeyVault</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">                     <span class="k">if</span> <span class="p">(!</span><span class="nv">$KeyVaultToken</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">                            <span class="k">throw</span> <span class="s1">&#39;Could not get KeyVault token&#39;</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">                     <span class="p">}</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">              <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">                     <span class="k">throw</span> <span class="nv">$_</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">              <span class="p">}</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">       <span class="nv">$JwsResultAsByteArr</span> <span class="p">=</span> <span class="p">[</span><span class="no">System.Text.Encoding</span><span class="p">]::</span><span class="n">UTF8</span><span class="p">.</span><span class="py">GetBytes</span><span class="p">(</span><span class="nv">$JWT</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">
</span></span><span class="line"><span class="ln">29</span><span class="cl">       <span class="c"># Signing requires the hash of the JWT at this point (which should include the header)</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">       <span class="nv">$hash</span> <span class="p">=</span> <span class="p">[</span><span class="no">System.Security.Cryptography.SHA256</span><span class="p">]::</span><span class="n">Create</span><span class="p">().</span><span class="py">ComputeHash</span><span class="p">(</span><span class="nv">$JwsResultAsByteArr</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">
</span></span><span class="line"><span class="ln">32</span><span class="cl">       <span class="nv">$hash64</span> <span class="p">=</span> <span class="p">[</span><span class="no">Convert</span><span class="p">]::</span><span class="n">ToBase64String</span><span class="p">(</span><span class="nv">$hash</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">
</span></span><span class="line"><span class="ln">34</span><span class="cl">       <span class="k">if</span> <span class="p">(</span><span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ShouldProcess</span><span class="p">(</span><span class="nv">$KeyVaultName</span><span class="p">,</span> <span class="s2">&#34;Requesting JWT signing operation from KeyVault with </span><span class="nv">$PrivateKeyName</span><span class="s2">&#34;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">              <span class="nv">$irmSplat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">36</span><span class="cl">                     <span class="n">Method</span>         <span class="p">=</span> <span class="s1">&#39;Post&#39;</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">                     <span class="n">Authentication</span> <span class="p">=</span> <span class="s1">&#39;Bearer&#39;</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">                     <span class="n">Token</span>          <span class="p">=</span> <span class="nv">$KeyVaultToken</span><span class="p">.</span><span class="py">Token</span>
</span></span><span class="line"><span class="ln">39</span><span class="cl">                     <span class="n">Body</span>           <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl">                            <span class="n">alg</span>   <span class="p">=</span> <span class="s1">&#39;RS256&#39;</span>
</span></span><span class="line"><span class="ln">41</span><span class="cl">                            <span class="n">value</span> <span class="p">=</span> <span class="nv">$hash64</span>
</span></span><span class="line"><span class="ln">42</span><span class="cl">                     <span class="p">}</span> <span class="p">|</span> <span class="nb">ConvertTo-Json</span>
</span></span><span class="line"><span class="ln">43</span><span class="cl">                     <span class="n">ContentType</span>    <span class="p">=</span> <span class="s1">&#39;application/json&#39;</span>
</span></span><span class="line"><span class="ln">44</span><span class="cl">                     <span class="n">Uri</span>            <span class="p">=</span> <span class="s2">&#34;https://</span><span class="nv">$KeyVaultName</span><span class="s2">.vault.azure.net/keys/</span><span class="nv">$PrivateKeyName</span><span class="s2">/</span><span class="nv">$PrivateKeyVersion</span><span class="s2">/sign?api-version=7.4&#34;</span>
</span></span><span class="line"><span class="ln">45</span><span class="cl">              <span class="p">}</span>
</span></span><span class="line"><span class="ln">46</span><span class="cl">
</span></span><span class="line"><span class="ln">47</span><span class="cl">              <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">48</span><span class="cl">                     <span class="nv">$signature</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="nv">@irmSplat</span>
</span></span><span class="line"><span class="ln">49</span><span class="cl">                     <span class="k">if</span> <span class="p">(!</span><span class="nv">$signature</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">50</span><span class="cl">                            <span class="k">throw</span> <span class="s1">&#39;Could not get signature from KeyVault&#39;</span>
</span></span><span class="line"><span class="ln">51</span><span class="cl">                     <span class="p">}</span>
</span></span><span class="line"><span class="ln">52</span><span class="cl">              <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">53</span><span class="cl">                     <span class="k">throw</span> <span class="nv">$_</span>
</span></span><span class="line"><span class="ln">54</span><span class="cl">              <span class="p">}</span>
</span></span><span class="line"><span class="ln">55</span><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="ln">56</span><span class="cl">       <span class="s1">&#39;{0}.{1}&#39;</span> <span class="o">-f</span> <span class="nv">$JWT</span><span class="p">,</span> <span class="nv">$signature</span><span class="p">.</span><span class="py">value</span>
</span></span><span class="line"><span class="ln">57</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">58</span><span class="cl"><span class="nv">$newAZKVTokenSignatureSplat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">59</span><span class="cl">       <span class="n">JWT</span>               <span class="p">=</span> <span class="p">(</span><span class="nb">New-UnsignedJWT</span> <span class="n">-Payload</span> <span class="vm">@</span><span class="p">{</span><span class="n">iss</span> <span class="p">=</span> <span class="mf">1459729</span> <span class="p">})</span>
</span></span><span class="line"><span class="ln">60</span><span class="cl">       <span class="n">KeyVaultName</span>      <span class="p">=</span> <span class="s1">&#39;d826699b15174c50b627616&#39;</span>
</span></span><span class="line"><span class="ln">61</span><span class="cl">       <span class="n">PrivateKeyName</span>    <span class="p">=</span> <span class="s1">&#39;githubkey&#39;</span>
</span></span><span class="line"><span class="ln">62</span><span class="cl">       <span class="n">PrivateKeyVersion</span> <span class="p">=</span> <span class="s1">&#39;cf96e6ec6f104f71882b5309f718c6e2&#39;</span>
</span></span><span class="line"><span class="ln">63</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">64</span><span class="cl">
</span></span><span class="line"><span class="ln">65</span><span class="cl"><span class="nv">$JWT</span> <span class="p">=</span> <span class="nb">New-AZKVTokenSignature</span> <span class="nv">@newAZKVTokenSignatureSplat</span></span></span></code></pre></div><p>With this JWT I could call my installations and retrieve a short-lived installation token. AWESOME!</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">New-GHRepoToken</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">       <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">(</span><span class="na">SupportsShouldProcess</span><span class="p">)]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">       <span class="k">param</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">              <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">              <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">              <span class="nv">$JWT</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">       <span class="p">)</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">       <span class="k">if</span> <span class="p">(</span><span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ShouldProcess</span><span class="p">(</span><span class="s1">&#39;Requesting GitHub App Installations using Signed JWT Token&#39;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">              <span class="nv">$invokeRestMethodSplat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">                     <span class="n">Uri</span>     <span class="p">=</span> <span class="s1">&#39;https://api.github.com/app/installations&#39;</span> <span class="c"># This gets all installations and should just be used cross organizations.</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">                     <span class="n">Headers</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">                            <span class="n">Accept</span>                 <span class="p">=</span> <span class="s1">&#39;application/vnd.github+json&#39;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">                            <span class="n">Authorization</span>          <span class="p">=</span> <span class="s2">&#34;Bearer </span><span class="nv">$JWT</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">                            <span class="s1">&#39;X-GitHub-Api-Version&#39;</span> <span class="p">=</span> <span class="s1">&#39;2022-11-28&#39;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">                     <span class="p">}</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">              <span class="p">}</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">              <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">                     <span class="nv">$Installations</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="nv">@invokeRestMethodSplat</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">                     <span class="k">if</span> <span class="p">(!</span><span class="nv">$Installations</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">                            <span class="k">throw</span> <span class="s1">&#39;Could not get installations with JWT&#39;</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">                     <span class="p">}</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">              <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">                     <span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ThrowTerminatingError</span><span class="p">(</span><span class="nv">$_</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">              <span class="p">}</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">
</span></span><span class="line"><span class="ln">29</span><span class="cl">       <span class="nv">$AccessTokensUrl</span> <span class="p">=</span> <span class="p">(</span><span class="nv">$Installations</span><span class="p">).</span><span class="py">access_tokens_url</span> <span class="c"># This assumes there is only 1 installation</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">
</span></span><span class="line"><span class="ln">31</span><span class="cl">       <span class="k">if</span> <span class="p">(</span><span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ShouldProcess</span><span class="p">(</span><span class="s1">&#39;Requesting GitHub Repo token using JWT&#39;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">
</span></span><span class="line"><span class="ln">33</span><span class="cl">              <span class="nv">$irmSplat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">                     <span class="n">Uri</span>     <span class="p">=</span> <span class="nv">$AccessTokensUrl</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">                     <span class="n">Method</span>  <span class="p">=</span> <span class="s1">&#39;Post&#39;</span>
</span></span><span class="line"><span class="ln">36</span><span class="cl">                     <span class="n">Headers</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">                            <span class="n">Accept</span>                 <span class="p">=</span> <span class="s1">&#39;application/vnd.github+json&#39;</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">                            <span class="n">Authorization</span>          <span class="p">=</span> <span class="s2">&#34;Bearer </span><span class="nv">$JWT</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">39</span><span class="cl">                            <span class="s1">&#39;X-GitHub-Api-Version&#39;</span> <span class="p">=</span> <span class="s1">&#39;2022-11-28&#39;</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl">                     <span class="p">}</span>
</span></span><span class="line"><span class="ln">41</span><span class="cl">              <span class="p">}</span>
</span></span><span class="line"><span class="ln">42</span><span class="cl">              <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">43</span><span class="cl">                     <span class="nv">$outputtoken</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="nv">@irmSplat</span>
</span></span><span class="line"><span class="ln">44</span><span class="cl">                     <span class="k">if</span> <span class="p">(!</span><span class="nv">$outputtoken</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">45</span><span class="cl">                            <span class="k">throw</span> <span class="s1">&#39;Could not get GitHub Repo token&#39;</span>
</span></span><span class="line"><span class="ln">46</span><span class="cl">                     <span class="p">}</span>
</span></span><span class="line"><span class="ln">47</span><span class="cl">              <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">48</span><span class="cl">                     <span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ThrowTerminatingError</span><span class="p">(</span><span class="nv">$_</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">49</span><span class="cl">              <span class="p">}</span>
</span></span><span class="line"><span class="ln">50</span><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="ln">51</span><span class="cl">       <span class="nv">$outputtoken</span> <span class="c"># for reflection, this has the token as plaintext as a property</span>
</span></span><span class="line"><span class="ln">52</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">53</span><span class="cl">
</span></span><span class="line"><span class="ln">54</span><span class="cl"><span class="nv">$installationToken</span> <span class="p">=</span> <span class="nb">New-GHRepoToken</span> <span class="n">-JWT</span> <span class="nv">$JWT</span>
</span></span><span class="line"><span class="ln">55</span><span class="cl">
</span></span><span class="line"><span class="ln">56</span><span class="cl"><span class="nv">$Organization</span> <span class="p">=</span> <span class="s1">&#39;Manbearpiet&#39;</span>
</span></span><span class="line"><span class="ln">57</span><span class="cl"><span class="nv">$RepositoryName</span> <span class="p">=</span> <span class="s1">&#39;Manbearpiet&#39;</span> <span class="c"># Public repo</span>
</span></span><span class="line"><span class="ln">58</span><span class="cl"><span class="nv">$Path</span> <span class="p">=</span> <span class="s1">&#39;README.md&#39;</span>
</span></span><span class="line"><span class="ln">59</span><span class="cl">
</span></span><span class="line"><span class="ln">60</span><span class="cl"><span class="nv">$file</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">61</span><span class="cl">       <span class="n">Uri</span>     <span class="p">=</span> <span class="s2">&#34;https://api.github.com/repos/</span><span class="nv">$Organization</span><span class="s2">/</span><span class="nv">$RepositoryName</span><span class="s2">/contents/</span><span class="nv">$Path</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">62</span><span class="cl">       <span class="n">Method</span>  <span class="p">=</span> <span class="s1">&#39;Get&#39;</span>
</span></span><span class="line"><span class="ln">63</span><span class="cl">       <span class="n">Headers</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">64</span><span class="cl">              <span class="n">Accept</span>                 <span class="p">=</span> <span class="s1">&#39;application/vnd.github+json&#39;</span>
</span></span><span class="line"><span class="ln">65</span><span class="cl">              <span class="n">Authorization</span>          <span class="p">=</span> <span class="s2">&#34;Bearer </span><span class="p">$(</span><span class="nv">$installationToken</span><span class="p">.</span><span class="n">token</span><span class="p">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">66</span><span class="cl">              <span class="s1">&#39;X-GitHub-Api-Version&#39;</span> <span class="p">=</span> <span class="s1">&#39;2022-11-28&#39;</span>
</span></span><span class="line"><span class="ln">67</span><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="ln">68</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">69</span><span class="cl"><span class="nb">Invoke-RestMethod</span> <span class="nv">@file</span>
</span></span><span class="line"><span class="ln">70</span><span class="cl">
</span></span><span class="line"><span class="ln">71</span><span class="cl"><span class="nv">$Organization</span> <span class="p">=</span> <span class="s1">&#39;Manbearpiet&#39;</span>
</span></span><span class="line"><span class="ln">72</span><span class="cl"><span class="nv">$RepositoryName</span> <span class="p">=</span> <span class="s1">&#39;ManbearpietPrivate&#39;</span> <span class="c"># Private repo</span>
</span></span><span class="line"><span class="ln">73</span><span class="cl"><span class="nv">$file</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">74</span><span class="cl">       <span class="n">Uri</span>     <span class="p">=</span> <span class="s2">&#34;https://api.github.com/repos/</span><span class="nv">$Organization</span><span class="s2">/</span><span class="nv">$RepositoryName</span><span class="s2">/contents/</span><span class="nv">$Path</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">75</span><span class="cl">       <span class="n">Method</span>  <span class="p">=</span> <span class="s1">&#39;Get&#39;</span>
</span></span><span class="line"><span class="ln">76</span><span class="cl">       <span class="n">Headers</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">77</span><span class="cl">              <span class="n">Accept</span>                 <span class="p">=</span> <span class="s1">&#39;application/vnd.github+json&#39;</span>
</span></span><span class="line"><span class="ln">78</span><span class="cl">              <span class="n">Authorization</span>          <span class="p">=</span> <span class="s2">&#34;Bearer </span><span class="p">$(</span><span class="nv">$installationToken</span><span class="p">.</span><span class="n">token</span><span class="p">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">79</span><span class="cl">              <span class="s1">&#39;X-GitHub-Api-Version&#39;</span> <span class="p">=</span> <span class="s1">&#39;2022-11-28&#39;</span>
</span></span><span class="line"><span class="ln">80</span><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="ln">81</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">82</span><span class="cl">
</span></span><span class="line"><span class="ln">83</span><span class="cl"><span class="nb">Invoke-RestMethod</span> <span class="nv">@file</span></span></span></code></pre></div><figure><img src="/images/signing-jwt/result.png"
    alt="A successful get of the repository content using the Azure Key Vault Signed JWT">
</figure>

<h2 id="conclusion">Conclusion</h2>
<p>Using GitHub Apps, we have an identity that allows us to automate actions on the GitHub platform. Because we&rsquo;re using Azure Functions as a platform, I don&rsquo;t feel comfortable storing the private key of my GitHub App on the Azure Functions Host. Therefore, I used the Key Vault Signing REST API, and I can sleep better at night. It&rsquo;ll make implementations for GitHub Apps or other identity platforms with JWT signing more secure.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Automating GitHub operations using GitHub Apps</title>
      <link>https://manbearpiet.github.io/posts/githubapp/</link>
      <pubDate>Mon, 07 Jul 2025 10:00:00 +0200</pubDate>
      <guid>https://manbearpiet.github.io/posts/githubapp/</guid>
      <description>&lt;h1 id=&#34;github-apps&#34;&gt;GitHub Apps&lt;/h1&gt;&#xA;&lt;p&gt;At the company I work at, InSpark, we had a use case for automating our operations on the GitHub platform. We needed to perform automated actions in a headless fashion, so an external process on Azure should be able to call the GitHub Platform and perform some actions. To do so, I learned about GitHub Apps, which enable me to perform actions from a script. In this blog, I will share what I&amp;rsquo;ve learned and how you can utilize a daemon application to automate actions on the GitHub platform.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="github-apps">GitHub Apps</h1>
<p>At the company I work at, InSpark, we had a use case for automating our operations on the GitHub platform. We needed to perform automated actions in a headless fashion, so an external process on Azure should be able to call the GitHub Platform and perform some actions. To do so, I learned about GitHub Apps, which enable me to perform actions from a script. In this blog, I will share what I&rsquo;ve learned and how you can utilize a daemon application to automate actions on the GitHub platform.</p>
<h2 id="why">Why</h2>
<p>In some cases, you need to be able to initiate a commit of specific files, address GitHub issues, or trigger a workflow dispatch event.</p>
<p>We were researching how to automate the enrollment process for a new customer of one of our company&rsquo;s services. Enrollment meant that, through a web portal, a customer would enter information, and, with the press of a button, the portal would initiate a single request to my tool, triggering a chain of operations.</p>
<p>I had a wishlist of operations on the GitHub platform for my tool:</p>
<ul>
<li>Create a repository secret on the repository.</li>
<li>Copy template folder structure</li>
<li>Create new files in the new folder.</li>
<li>Create a new workflow.</li>
<li>Start a workflow with information from the customer&rsquo;s web request.</li>
</ul>
<h2 id="platform">Platform</h2>
<p>With my PowerShell background, I began exploring GitHub scripts and soon discovered that they did not precisely meet my use case. I then read the REST API reference (<a href="https://docs.github.com/en/rest">GitHub REST API documentation - GitHub Docs</a>), which showed that the REST API was a better fit for the use case. I would like to know what platform to use to interact with the REST API from a PowerShell script. The host running my PowerShell must be fast, available 24/7, and easily extendable, which ruled out Azure Automation. I had yet to gain experience using Azure Functions, though.</p>
<p>I created an Azure Function App and was puzzled by the authentication. Will I use a Personal Access Token (PAT) and attribute every action to my account, or do it in a more sophisticated way? In Azure DevOps, service accounts (users) with PATs were once a workaround for the lack of SPN support.</p>
<p>PATs are always user-account bound, sometimes scoped, and expire when you don&rsquo;t want them to. If I win the lottery someday, I hope my colleagues don&rsquo;t pull too many hairs out on the search for which PAT expired. So, authentication-wise, I wanted something else for my new shiny project.</p>
<p>Entra ID SPNs can now integrate with Azure DevOps, and it works excellently <a href="https://learn.microsoft.com/en-us/azure/devops/release-notes/2023/sprint-228-update#managed-identity-and-service-principal-support-for-azure-devops-now-in-general-availability-ga">Managed identity and service principal support for Azure DevOps now in general availability (GA)</a>. This video by John Savill explains it in detail: <a href="https://www.youtube.com/watch?v=saTUeR_U3lA">Azure DevOps Workload Identity Federation with Azure Overview. NO MORE SECRETS!</a></p>
<h2 id="github-app">GitHub App</h2>
<p>I looked to see if GitHub supported an extension from Microsoft Entra ID, meaning I hoped to invite or register an Entra ID SPN to perform these actions instead of everything attributed to my GitHub user with a PAT. Unfortunately, the GitHub platform doesn&rsquo;t support Entra ID SPNs as an entity; however, GitHub has its own SPN implementation on its platform, known as a GitHub App.</p>
<p>I found documentation and started reading the GitHub documentation. GitHub Apps are identities or apps that can act independently, rather than on behalf of a user (this is also possible, but it is not my use case). In my use case, a PowerShell script can authenticate as the GitHub App and call the GitHub REST API with that identity.</p>
<p>First, we needed to register a new GitHub App, which you can read about here: <a href="https://docs.github.com/en/apps/creating-github-apps/registering-a-github-app/registering-a-github-app">Registering a GitHub App - GitHub Docs</a>.</p>
<ul>
<li>I gave my GitHub app a name.</li>
<li>I gave the GitHub app a homepage URL (a reference to our company).</li>
<li>I didn&rsquo;t need anything related to users. Therefore, I removed all content related to user flows and users.</li>
<li>There was no need for feedback on the PoC, so the webhook feedback was out, too.</li>
</ul>
<p>Based on the REST API documentation, I had a good idea of what repository permissions we required, and the role permissions are excellent. Therefore, I selected the required permissions, adhering to the principle of least privilege, while also considering the REST API&rsquo;s documented requirements.
From there, we have a GitHub App ready to be installed on our repositories. After registering, GitHub automatically forwards you to the overview of your GitHub App. Lastly, I chose to install the GitHub App only on a demo organization. If you&rsquo;d like to use this in your organization, you will need to delegate the GitHub App to a set of repositories. It will then have the permissions you configured earlier on those repositories.</p>
<h2 id="authentication">Authentication</h2>
<p>The overview shows you details like &ldquo;Owned by&rdquo; (your organization or user, depending on where you created it), your &ldquo;App-ID&rdquo;, and a &ldquo;Client ID&rdquo;. This App ID is essential because you&rsquo;ll need it later.</p>
<p>GitHub has a 2 step authentication. Authentication to the GitHub Platform as the GitHub App, as documented by GitHub:</p>
<blockquote>
<p>To authenticate as itself, the app will use a JSON Web Token (JWT).
Your app should authenticate as itself when it needs to generate an installation access token. An installation access token is required to authenticate as an app installation.
Your app should also authenticate as itself when it needs to make API requests to manage resources related to the app.</p></blockquote>
<p>First, we need to write some code to generate a JWT. With that JWT, we can authenticate to GitHub, request an installation token, and then make API requests. However, I had yet to learn what an installation token is.</p>
<p>I had to look up the meaning of &lsquo;installation&rsquo; in this context; the installation is the registration of the app in a GitHub organization. The installation ID is the identifier of that installation. GitHub gives the following guidance to find the Installation ID:
You can also use the REST API to find the installation ID for an installation of your app. For example, you can get an installation ID with the GET /users/{username}/installation, GET /repos/{owner}/{repo}/installation, GET /orgs/{org}/installation, or GET /app/installations endpoints.</p>
<p>Secondly, you&rsquo;ll need to create an installation token to authenticate with that organization and retrieve the access_tokens_url token.</p>
<figure><img src="/images/github-apps/auth.png"
    alt="Auth dance for GitHub App as an Installation">
</figure>

<p>In short:</p>
<ul>
<li>Create a JWT and send a request to <code>https://api.github.com/app/installations</code>, <code>/orgs/{org}/installation</code> or <code>/repos/{owner}/{repo}/installation</code> (make sure to use least privilege)</li>
<li>Find the correct installation in the response and its access_tokens_url</li>
<li>Call the access_tokens_url and receive an installation token</li>
<li>Call all the repo APIs</li>
</ul>
<h2 id="creating-a-jwt">Creating a JWT</h2>
<p>Creating JWTs may sound more intimidating than it is. It&rsquo;s just a base64 URL-encoded representation of a JSON string, accompanied by a signature. To sign your JWT, you can download a private key to sign your JWT.
Fortunately, a PowerShell module author has already taken into account all of these considerations. I tried using <a href="https://github.com/Nucleware/powershell-jwt">powershell-jwt</a>, which worked great. Note: The module&rsquo;s implementation requires having the private key file of my GitHub App locally on the host, where I am running the PowerShell code.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nb">install-PSResource</span> <span class="s1">&#39;powershell-jwt&#39;</span> <span class="n">-Repository</span> <span class="n">PSGallery</span> <span class="p">|</span> <span class="nb">Import-Module</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="nv">$newjwtSplat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="n">Algorithm</span>       <span class="p">=</span> <span class="s1">&#39;RS256&#39;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="n">SecretKey</span>       <span class="p">=</span> <span class="p">(</span><span class="nb">Get-Content</span> <span class="p">/</span><span class="n">Users</span><span class="p">/</span><span class="n">christianpiet</span><span class="p">/</span><span class="n">Downloads</span><span class="p">/</span><span class="nb">manbearpiet-app</span><span class="p">.</span><span class="mf">2025</span><span class="p">-</span><span class="mf">06</span><span class="p">-</span><span class="mf">25</span><span class="p">.</span><span class="nb">private-key</span><span class="p">.</span><span class="py">pem</span> <span class="n">-AsByteStream</span><span class="p">)</span> <span class="c"># This accepts a byte-array</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="n">ExpiryTimestamp</span> <span class="p">=</span> <span class="p">([</span><span class="no">math</span><span class="p">]::</span><span class="n">Round</span><span class="p">((</span><span class="nb">Get-Date</span> <span class="n">-UFormat</span> <span class="k">%</span><span class="n">s</span><span class="p">))</span> <span class="p">+</span> <span class="p">(</span><span class="mf">8</span> <span class="p">*</span> <span class="mf">60</span><span class="p">))</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="n">Issuer</span>          <span class="p">=</span> <span class="mf">1459729</span> <span class="c"># Trimmed</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="n">PayloadClaims</span>   <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="n">iat</span> <span class="p">=</span> <span class="p">([</span><span class="no">math</span><span class="p">]::</span><span class="n">Round</span><span class="p">((</span><span class="nb">Get-Date</span> <span class="n">-UFormat</span> <span class="k">%</span><span class="n">s</span><span class="p">))</span> <span class="p">-</span> <span class="mf">10</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="nv">$JWT</span> <span class="p">=</span> <span class="nb">New-JWT</span> <span class="nv">@newjwtSplat</span></span></span></code></pre></div><p>With a locally stored private key, you can create your JWTs. Very cool, right?</p>
<p>With this JWT, we could request an installation token:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">New-GHRepoToken</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">(</span><span class="na">SupportsShouldProcess</span><span class="p">)]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="nv">$JWT</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ShouldProcess</span><span class="p">(</span><span class="s1">&#39;Requesting GitHub App Installations using Signed JWT Token&#39;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="nv">$invokeRestMethodSplat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">            <span class="n">Uri</span>     <span class="p">=</span> <span class="s1">&#39;https://api.github.com/app/installations&#39;</span> <span class="c"># This gets all installations and should just be used cross organizations.</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">            <span class="n">Headers</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">                <span class="n">Accept</span>                 <span class="p">=</span> <span class="s1">&#39;application/vnd.github+json&#39;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">                <span class="n">Authorization</span>          <span class="p">=</span> <span class="s2">&#34;Bearer </span><span class="nv">$JWT</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">                <span class="s1">&#39;X-GitHub-Api-Version&#39;</span> <span class="p">=</span> <span class="s1">&#39;2022-11-28&#39;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">        <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">            <span class="nv">$Installations</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="nv">@invokeRestMethodSplat</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">            <span class="k">if</span> <span class="p">(!</span><span class="nv">$Installations</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">                <span class="k">throw</span> <span class="s1">&#39;Could not get installations with JWT&#39;</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">        <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">            <span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ThrowTerminatingError</span><span class="p">(</span><span class="nv">$_</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">
</span></span><span class="line"><span class="ln">29</span><span class="cl">    <span class="nv">$AccessTokensUrl</span> <span class="p">=</span> <span class="p">(</span><span class="nv">$Installations</span><span class="p">).</span><span class="py">access_tokens_url</span> <span class="c"># This assumes there is only 1 installation</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">
</span></span><span class="line"><span class="ln">31</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ShouldProcess</span><span class="p">(</span><span class="s1">&#39;Requesting GitHub Repo token using JWT&#39;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">
</span></span><span class="line"><span class="ln">33</span><span class="cl">        <span class="nv">$irmSplat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">            <span class="n">Uri</span>     <span class="p">=</span> <span class="nv">$AccessTokensUrl</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">            <span class="n">Method</span>  <span class="p">=</span> <span class="s1">&#39;Post&#39;</span>
</span></span><span class="line"><span class="ln">36</span><span class="cl">            <span class="n">Headers</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">                <span class="n">Accept</span>                 <span class="p">=</span> <span class="s1">&#39;application/vnd.github+json&#39;</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">                <span class="n">Authorization</span>          <span class="p">=</span> <span class="s2">&#34;Bearer </span><span class="nv">$JWT</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">39</span><span class="cl">                <span class="s1">&#39;X-GitHub-Api-Version&#39;</span> <span class="p">=</span> <span class="s1">&#39;2022-11-28&#39;</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln">41</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">42</span><span class="cl">        <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">43</span><span class="cl">            <span class="nv">$outputtoken</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="nv">@irmSplat</span>
</span></span><span class="line"><span class="ln">44</span><span class="cl">            <span class="k">if</span> <span class="p">(!</span><span class="nv">$outputtoken</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">45</span><span class="cl">                <span class="k">throw</span> <span class="s1">&#39;Could not get GitHub Repo token&#39;</span>
</span></span><span class="line"><span class="ln">46</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln">47</span><span class="cl">        <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">48</span><span class="cl">            <span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ThrowTerminatingError</span><span class="p">(</span><span class="nv">$_</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">49</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">50</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">51</span><span class="cl">    <span class="nv">$outputtoken</span> <span class="c"># for reflection, this has the token as plaintext as a property</span>
</span></span><span class="line"><span class="ln">52</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">53</span><span class="cl">
</span></span><span class="line"><span class="ln">54</span><span class="cl"><span class="nv">$installationToken</span> <span class="p">=</span> <span class="nb">New-GHRepoToken</span> <span class="n">-JWT</span> <span class="nv">$JWT</span></span></span></code></pre></div><p>This <code>$installationToken</code>-variable has our wanted installation token, which works similarly to a short-lived PAT.</p>
<p>Finally, we can call the REST API as we&rsquo;re used to:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nv">$Organization</span> <span class="p">=</span> <span class="s1">&#39;Manbearpiet&#39;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="nv">$RepositoryName</span> <span class="p">=</span> <span class="s1">&#39;Manbearpiet&#39;</span> <span class="c"># Public repo</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="nv">$Path</span> <span class="p">=</span> <span class="s1">&#39;README.md&#39;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="nv">$file</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="n">Uri</span>     <span class="p">=</span> <span class="s2">&#34;https://api.github.com/repos/</span><span class="nv">$Organization</span><span class="s2">/</span><span class="nv">$RepositoryName</span><span class="s2">/contents/</span><span class="nv">$Path</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="n">Method</span>  <span class="p">=</span> <span class="s1">&#39;Get&#39;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="n">Headers</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="n">Accept</span>                 <span class="p">=</span> <span class="s1">&#39;application/vnd.github+json&#39;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="n">Authorization</span>          <span class="p">=</span> <span class="s2">&#34;Bearer </span><span class="p">$(</span><span class="nv">$installationToken</span><span class="p">.</span><span class="n">token</span><span class="p">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="s1">&#39;X-GitHub-Api-Version&#39;</span> <span class="p">=</span> <span class="s1">&#39;2022-11-28&#39;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="nb">Invoke-RestMethod</span> <span class="nv">@file</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="nv">$Organization</span> <span class="p">=</span> <span class="s1">&#39;ManbearpietApp&#39;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="nv">$RepositoryName</span> <span class="p">=</span> <span class="s1">&#39;thisisprivate&#39;</span> <span class="c"># Private repo</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="nv">$file</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">    <span class="n">Uri</span>     <span class="p">=</span> <span class="s2">&#34;https://api.github.com/repos/</span><span class="nv">$Organization</span><span class="s2">/</span><span class="nv">$RepositoryName</span><span class="s2">/contents/</span><span class="nv">$Path</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="n">Method</span>  <span class="p">=</span> <span class="s1">&#39;Get&#39;</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="n">Headers</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">        <span class="n">Accept</span>                 <span class="p">=</span> <span class="s1">&#39;application/vnd.github+json&#39;</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">        <span class="n">Authorization</span>          <span class="p">=</span> <span class="s2">&#34;Bearer </span><span class="p">$(</span><span class="nv">$installationToken</span><span class="p">.</span><span class="n">token</span><span class="p">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">        <span class="s1">&#39;X-GitHub-Api-Version&#39;</span> <span class="p">=</span> <span class="s1">&#39;2022-11-28&#39;</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">
</span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="nb">Invoke-RestMethod</span> <span class="nv">@file</span></span></span></code></pre></div><figure><img src="/images/github-apps/content.png"
    alt="Getting public content with a GitHub App">
</figure>

<figure><img src="/images/github-apps/private-content.png"
    alt="Getting private content with a GitHub App">
</figure>

<p>In the content key of the response body we can find our private repositories it&rsquo;s README.md contents base64 encoded:</p>





<pre tabindex="0"><code class="language-base64" data-lang="base64">IyB0aGlzaXNwcml2YXRlCuKAnE9uZSBkb2VzIG5vdCBzaW1wbHkgYWNjZXNzIGEgcHJpdmF0ZSByZXBvIHdpdGhvdXQgYSB0b2tlbi7igJ0g4oCTIEJvcm9taXIK</code></pre><p>With this setup I can call my installations and retrieve a short-lived installation token. Using that I can access our repositories, start workflows et cetera. AWESOME! For convenience I added my code to a <a href="https://gist.github.com/Manbearpiet/1e91545353ab24013afeb54dc7a5bb3d">GitHub Gist</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Using GitHub Apps, we have an identity that allows us to automate actions on the GitHub platform. After registering and installing a GitHub App, you can assign it access to repositories or the organization and access the REST API. By fetching and accessing the installation token, you can access your public and private repositories through GitHub REST APIs. So we can continue to automate all the things. That&rsquo;s my adventure with GitHub Apps. I hope someone can utilize this to do cool stuff with it. I certainly enjoyed tinkering with it.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Pester Crash course</title>
      <link>https://manbearpiet.github.io/posts/pester/</link>
      <pubDate>Tue, 21 Jan 2025 10:00:00 +0100</pubDate>
      <guid>https://manbearpiet.github.io/posts/pester/</guid>
      <description>&lt;p&gt;Most developers reach a point where they can fluently write code in their language of choice. As features are added and the codebase expands, a critical question arises: do these changes break existing functionality? Do they work as expected? Testing frameworks like PowerShell&amp;rsquo;s Pester are designed to address these concerns.&lt;/p&gt;&#xA;&lt;p&gt;In this blog, I will give you an overview of what Pester is, how you can write your own tests, how you need to structure them, and what value it can bring to your development.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Most developers reach a point where they can fluently write code in their language of choice. As features are added and the codebase expands, a critical question arises: do these changes break existing functionality? Do they work as expected? Testing frameworks like PowerShell&rsquo;s Pester are designed to address these concerns.</p>
<p>In this blog, I will give you an overview of what Pester is, how you can write your own tests, how you need to structure them, and what value it can bring to your development.</p>
<h2 id="why">Why</h2>
<p>You might think, what are we actually doing? Why are we testing? If you think of it in a very high abstraction, when we write code, we solve problems by creating logic that handles information, events, or inputs in a way that results in an end result/output that we want. So there&rsquo;s input, and at the end, we expect a certain result or output. By using a test framework like Pester, we can validate that with a given input, executing our code results in the desired output.</p>
<p>And since I mostly write PowerShell, it&rsquo;s convenient to choose a testing module/framework written in the same language. The most used Testing framework for PowerShell is the Pester-module.</p>
<h2 id="pester">Pester</h2>
<p>I found this awesome description on the module description in the PowerShell Gallery.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Find-PSResource</span> <span class="n">-Repository</span> <span class="n">PSGallery</span> <span class="n">-Name</span> <span class="n">Pester</span> <span class="p">|</span> <span class="nb">Select-Object</span> <span class="n">-ExpandProperty</span> <span class="n">Description</span></span></span></code></pre></div><blockquote>
<p>Pester provides a framework for running BDD style Tests to execute and validate PowerShell commands inside of PowerShell and offers a powerful set of Mocking Functions that allow tests to mimic and mock the functionality of any command inside of a piece of PowerShell code being tested. Pester tests can execute any command or script that is accessible to a pester test file. This can include functions, Cmdlets, Modules, and scripts. Pester can be run in ad hoc style in a console, or it can be integrated into the Build scripts of a Continuous Integration system.</p></blockquote>
<p>Pester is a PowerShell module and can be used via its own Domain Specific Language (DSL), so some notations are different or represent things other than those in &rsquo;normal&rsquo; PowerShell. You can use it to test almost anything on PowerShell and beyond PowerShell, but more on that later.</p>
<h3 id="pester-versions">Pester versions</h3>
<p>Pester is included in Windows installations of Windows PowerShell, but it contains an outdated version (major version 3/3.4.0). There are breaking changes from that version to the latest. So make sure you get the latest version, so you&rsquo;re not missing out on new cool features:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Find-PSResource</span> <span class="n">-Repository</span> <span class="n">PSGallery</span> <span class="n">-Name</span> <span class="n">Pester</span> <span class="p">|</span> <span class="nb">Install-PSResource</span></span></span></code></pre></div><p>The current version while writing this blog is <strong>5.7.1</strong>, but do know that Pester 6 is <a href="https://github.com/pester/Pester/releases/tag/6.0.0-alpha5">in the making</a>, so new breaking changes are coming up. It will drop support for older versions of PowerShell, so make sure you start with the latest stable version of PowerShell and Pester, to prevent unnecessary rework.</p>
<h2 id="structure">Structure</h2>
<p>To start, we&rsquo;ll have to start with understanding the DSL and the idea of testing our code.</p>
<p>Pester tests are written in files with the <strong>.tests.ps1</strong>-extension. So a Pester test file example is &ldquo;function.tests.ps1&rdquo;. If you want to follow along, make sure you have <strong>.tests</strong> in front of the <strong>.ps1</strong>-extension.</p>
<p>Consider the follow Pester file:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="cm">&lt;#
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm"> example.tests.ps1
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">    Mind the keywords and how they&#39;re used, like BeforeAll, Describe, Context, and It.
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="n">BeforeAll</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="kd">function</span><span class="w"> </span><span class="nb">Get-ToBeTestedOutput</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="k">param</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">            <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">            <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">            <span class="nv">$Text</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">            <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">            <span class="p">[</span><span class="no">Switch</span><span class="p">]</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">            <span class="nv">$OutputSwitch</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nv">$OutputSwitch</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">            <span class="nv">$Text</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="n">Describe</span> <span class="s1">&#39;Get-ToBeTestedOutput&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="n">Context</span> <span class="s1">&#39;Output validation&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">        <span class="n">It</span> <span class="s1">&#39;Given no OutputSwitch-parameter, it outputs nothing&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">            <span class="nb">Get-ToBeTestedOutput</span> <span class="n">-Text</span> <span class="s2">&#34;I am output, look at me&#34;</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-BeNullOrEmpty</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>This file contains some setup in the <code>BeforeAll</code> scriptBlock, <code>BeforeAll</code> runs once before all the tests. That <code>BeforeAll</code> contains a function that is available in the actual tests.</p>
<p>The file also has a <code>Describe</code> keyword, which is a mechanism to logically group tests. Do mind the curly braces that enclose all our tests. <code>Context</code> is a similar grouping construct that is nested within <code>Describe.</code> These are not required, but they have excellent use cases when you want to scope test runs or loops.</p>
<p>Inside the <code>Context</code>-block is a single test, which is represented by <code>It.</code> The&rsquo; It `Block has a title, which is a description of what testcase it tests for. Again, mind the curly braces.</p>
<p>Contained inside the <code>It</code>-block, we see a single-line script block that executes some code and is piped to an assertion, which you can recognize by the <code>Should</code>-keyword. If I use my dictionary: &ldquo;an assertion is a confident and forceful statement of fact or belief&rdquo;. So inside this It-block, we execute code, and we want to test for the assumption that our function with those arguments results in a NullOrEmpty output.</p>
<p>There are other concepts within the language, like <code>Mocks,</code> which deserve their own post; I&rsquo;ll probably create a post about this concept in the near future.</p>
<h2 id="running-tests">Running tests</h2>
<p>When we want to execute this Pester file in VSCode, we can do so via the IDE itself, via the &ldquo;Run Tests&rdquo;:
<figure><img src="/images/pester/vscode.png"
    alt="Debug Test and Run Test buttons in VSCode">
</figure>
</p>
<p>Or we can do so via the terminal:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Invoke-Pester</span> <span class="p">/</span><span class="n">Users</span><span class="p">/</span><span class="n">christianpiet</span><span class="p">/</span><span class="n">Documents</span><span class="p">/</span><span class="n">InSpark</span><span class="p">/</span><span class="n">Git</span><span class="p">/</span><span class="n">Personal</span><span class="p">/</span><span class="n">blog</span><span class="p">/</span><span class="n">content</span><span class="p">/</span><span class="n">script</span><span class="p">/</span><span class="n">example</span><span class="p">.</span><span class="py">tests</span><span class="p">.</span><span class="py">ps1</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">Starting</span> <span class="n">discovery</span> <span class="k">in</span> <span class="mf">1</span> <span class="n">files</span><span class="p">.</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">Discovery</span> <span class="n">found</span> <span class="mf">1</span> <span class="n">tests</span> <span class="k">in</span> <span class="n">10ms</span><span class="p">.</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="n">Running</span> <span class="n">tests</span><span class="p">.</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="p">[+]</span> <span class="p">/</span><span class="n">Users</span><span class="p">/</span><span class="n">christianpiet</span><span class="p">/</span><span class="n">Documents</span><span class="p">/</span><span class="n">InSpark</span><span class="p">/</span><span class="n">Git</span><span class="p">/</span><span class="n">Personal</span><span class="p">/</span><span class="n">blog</span><span class="p">/</span><span class="n">content</span><span class="p">/</span><span class="n">script</span><span class="p">/</span><span class="n">example</span><span class="p">.</span><span class="py">tests</span><span class="p">.</span><span class="py">ps1</span> <span class="n">76ms</span> <span class="p">(</span><span class="n">19ms</span><span class="p">|</span><span class="n">48ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="n">Tests</span> <span class="n">completed</span> <span class="k">in</span> <span class="n">77ms</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="n">Tests</span> <span class="n">Passed</span><span class="err">:</span> <span class="mf">1</span><span class="p">,</span> <span class="n">Failed</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">Skipped</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">Inconclusive</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">NotRun</span><span class="err">:</span> <span class="mf">0</span></span></span></code></pre></div><h3 id="output-verbosity">Output verbosity</h3>
<p>The output shows that the Pester did test discovery; more on that later. After Discovery, Pester ran the tests in the file, and after completion, the results were shown. The output is summarized in the results of the whole file. Personally, I like a bit more verbose output to get a better grasp on what&rsquo;s going on. In VSCode, we can click &ldquo;Debug Tests,&rdquo; and in the terminal, we can use the Output-parameter of Invoke-Pester and select the Detailed preference. More options on verbosity can be found on the module&rsquo;s documentation website <a href="https://pester.dev/docs/usage/output">pester.dev - Output Page</a>.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">Starting</span> <span class="n">discovery</span> <span class="k">in</span> <span class="mf">1</span> <span class="n">file</span><span class="p">.</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">Discovery</span> <span class="n">found</span> <span class="mf">1</span> <span class="n">tests</span> <span class="k">in</span> <span class="n">11ms</span><span class="p">.</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">Running</span> <span class="n">tests</span><span class="p">.</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="n">Running</span> <span class="n">tests</span> <span class="n">from</span> <span class="s1">&#39;/Users/christianpiet/Documents/InSpark/Git/Personal/blog/content/script/example.tests.ps1&#39;</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="n">Describing</span> <span class="nb">Get-ToBeTestedOutput</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"> <span class="p">[+]</span> <span class="n">Given</span> <span class="n">no</span> <span class="nb">OutputSwitch-parameter</span><span class="p">,</span> <span class="n">it</span> <span class="n">outputs</span> <span class="n">nothing</span> <span class="n">3ms</span> <span class="p">(</span><span class="n">1ms</span><span class="p">|</span><span class="n">2ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="n">Tests</span> <span class="n">completed</span> <span class="k">in</span> <span class="n">89ms</span>
</span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="n">Tests</span> <span class="n">Passed</span><span class="err">:</span> <span class="mf">1</span><span class="p">,</span> <span class="n">Failed</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">Skipped</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">Inconclusive</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">NotRun</span><span class="err">:</span> <span class="mf">0</span></span></span></code></pre></div><p>In this output style, we can see per test if it succeeded; yay, we can test stuff!</p>
<h2 id="assertions">Assertions</h2>
<p>PowerShell code can be written in several ways to reach the desired end result. To verify we actually achieved that end result, we write the <code>It</code>-blocks with an assertion. There are several assertions available to verify results with. I mostly use the following:</p>
<table>
  <thead>
      <tr>
          <th>Assertion</th>
          <th>Comment</th>
          <th>Equivalent</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>Should -Be</code></td>
          <td>Case-insensitively checks for equality of objects (and everything is an object, yay!). You can also check arrays with this assertion. <!-- raw HTML omitted -->Reading the docs, I also found out <code>-Be</code> is sensitive to array order, so be careful about that.</td>
          <td>-eq</td>
      </tr>
      <tr>
          <td><code>Should -BeIn</code></td>
          <td>Checks if an item is present in the array.</td>
          <td>-in</td>
      </tr>
      <tr>
          <td><code>Should -BeLike</code></td>
          <td>Wildcard match a string output</td>
          <td>-like</td>
      </tr>
      <tr>
          <td><code>Should -Match</code></td>
          <td>Match a string output using regular expressions</td>
          <td>-match</td>
      </tr>
      <tr>
          <td><code>Should -Throw</code></td>
          <td>Verify if an exception was thrown. Nice throwback to my <a href="https://manbearpiet.com/posts/powershellerrors/">&ldquo;How to work with errors in PowerShell&rdquo; -blogpost</a>, right?</td>
          <td></td>
      </tr>
  </tbody>
</table>
<p>You can find the documentation on all available assertions at <a href="https://pester.dev/docs/assertions/">pester.dev - Assertion Reference</a>.</p>
<h3 id="considerations-when-writing-tests">Considerations when writing tests</h3>
<p>When we looked at the function code we wanted to test, we asserted that it doesn&rsquo;t output if the switch isn&rsquo;t provided. However, we didn&rsquo;t test if it outputs anything when we do provide it, and especially, does it output what we want?</p>
<p>Let&rsquo;s add those in the mix:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="cm">&lt;#
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm"> example.tests.ps1
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">    Mind the assertions and negations used to test the function.
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="n">BeforeAll</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="kd">function</span><span class="w"> </span><span class="nb">Get-ToBeTestedOutput</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="k">param</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">            <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">            <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">            <span class="nv">$Text</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">            <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">            <span class="p">[</span><span class="no">Switch</span><span class="p">]</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">            <span class="nv">$OutputSwitch</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nv">$OutputSwitch</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">            <span class="nv">$Text</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="n">Describe</span> <span class="s1">&#39;Get-ToBeTestedOutput&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="n">It</span> <span class="s1">&#39;Given no OutputSwitch-parameter, it outputs nothing&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">        <span class="nb">Get-ToBeTestedOutput</span> <span class="n">-Text</span> <span class="s2">&#34;I am output, look at me&#34;</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-BeNullOrEmpty</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">    <span class="n">It</span> <span class="s1">&#39;Given OutputSwitch-parameter, it outputs the text&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">        <span class="nb">Get-ToBeTestedOutput</span> <span class="n">-Text</span> <span class="s2">&#34;I am output, look at me&#34;</span> <span class="n">-OutputSwitch</span> <span class="p">|</span> <span class="n">Should</span> <span class="o">-Not</span> <span class="n">-BeNullOrEmpty</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">    <span class="n">It</span> <span class="s1">&#39;Given Text-parameter, it outputs the correct text&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">        <span class="nb">Get-ToBeTestedOutput</span> <span class="n">-Text</span> <span class="s2">&#34;I am output, look at me&#34;</span> <span class="n">-OutputSwitch</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-Be</span> <span class="s2">&#34;I am output, look at me&#34;</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>If you look closely, I changed the assertion on the second test to contain &lsquo;a result by adding a negation <code>-Not</code> to invert the logic on the assertion, and it tests for any output if OutputSwitch-switch is provided.
The third assertion tests whether the output is exactly what we expect it to be using the <code>-Be</code> assertion. If you&rsquo;ve created similar tests before, you might&rsquo;ve spotted that the second test can be considered redundant since the third test tests the same. If it has the result we want, it implicitly as a result, and thus is not $null or empty. Let&rsquo;s run the test to validate our assertions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">Describing</span> <span class="nb">Get-ToBeTestedOutput</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"> <span class="p">[+]</span> <span class="n">Given</span> <span class="n">no</span> <span class="nb">OutputSwitch-parameter</span><span class="p">,</span> <span class="n">it</span> <span class="n">outputs</span> <span class="n">nothing</span> <span class="n">1ms</span> <span class="p">(</span><span class="n">1ms</span><span class="p">|</span><span class="n">1ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"> <span class="p">[+]</span> <span class="n">Given</span> <span class="nb">OutputSwitch-parameter</span><span class="p">,</span> <span class="n">it</span> <span class="n">outputs</span> <span class="n">the</span> <span class="n">text</span> <span class="n">1ms</span> <span class="p">(</span><span class="n">1ms</span><span class="p">|</span><span class="n">0ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"> <span class="p">[+]</span> <span class="n">Given</span> <span class="nb">Text-parameter</span><span class="p">,</span> <span class="n">it</span> <span class="n">outputs</span> <span class="n">the</span> <span class="n">correct</span> <span class="n">text</span> <span class="n">1ms</span> <span class="p">(</span><span class="n">1ms</span><span class="p">|</span><span class="n">0ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="n">Tests</span> <span class="n">completed</span> <span class="k">in</span> <span class="n">30ms</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="n">Tests</span> <span class="n">Passed</span><span class="err">:</span> <span class="mf">3</span><span class="p">,</span> <span class="n">Failed</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">Skipped</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">Inconclusive</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">NotRun</span><span class="err">:</span> <span class="mf">0</span></span></span></code></pre></div><p>You might think yay, less code; let&rsquo;s shove that all in a single It-block, less code, more time for us.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="cm">&lt;#
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">    Mind the test structure inside the It-block.
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="n">BeforeAll</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="kd">function</span><span class="w"> </span><span class="nb">Get-ToBeTestedOutput</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="k">param</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">            <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">            <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">            <span class="nv">$Text</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">            <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">            <span class="p">[</span><span class="no">Switch</span><span class="p">]</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">            <span class="nv">$OutputSwitch</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nv">$OutputSwitch</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">            <span class="nv">$Text</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">
</span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="n">Describe</span> <span class="s1">&#39;Get-ToBeTestedOutput&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">    <span class="n">It</span> <span class="s1">&#39;Outputs what we want, nothing if we don&#39;&#39;t want it to and something if we need it to&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">        <span class="nb">Get-ToBeTestedOutput</span> <span class="n">-Text</span> <span class="s2">&#34;I am output, look at me&#34;</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-BeNullOrEmpty</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">        <span class="nb">Get-ToBeTestedOutput</span> <span class="n">-Text</span> <span class="s2">&#34;I am output, look at me&#34;</span> <span class="n">-OutputSwitch</span> <span class="p">|</span> <span class="n">Should</span> <span class="o">-Not</span> <span class="n">-BeNullOrEmpty</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">        <span class="nb">Get-ToBeTestedOutput</span> <span class="n">-Text</span> <span class="s2">&#34;I am output, look at me&#34;</span> <span class="n">-OutputSwitch</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-Be</span> <span class="s2">&#34;I am output, look at me&#34;</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>If we run this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">Describing</span> <span class="nb">Get-ToBeTestedOutput</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"> <span class="p">[+]</span> <span class="n">Outputs</span> <span class="n">what</span> <span class="n">we</span> <span class="n">want</span><span class="p">,</span> <span class="n">nothing</span> <span class="k">if</span> <span class="n">we</span> <span class="n">don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">want</span> <span class="n">it</span> <span class="n">to</span> <span class="n">and</span> <span class="n">something</span> <span class="k">if</span> <span class="n">we</span> <span class="n">need</span> <span class="n">it</span> <span class="n">to</span> <span class="n">18ms</span> <span class="p">(</span><span class="n">16ms</span><span class="p">|</span><span class="n">1ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">Tests</span> <span class="n">completed</span> <span class="k">in</span> <span class="n">148ms</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">Tests</span> <span class="n">Passed</span><span class="err">:</span> <span class="mf">1</span><span class="p">,</span> <span class="n">Failed</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">Skipped</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">Inconclusive</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">NotRun</span><span class="err">:</span> <span class="mf">0</span></span></span></code></pre></div><p>Pester code written this way can get hard to read in the output (if you/colleagues even take the time to make a decent description); it is not very friendly to read as test code and is annoying to maintain. <strong>A good practice is to stick to a single assertion per <code>It</code>-block.</strong> This keeps it easy to read, both in the output and the IDE. If you need another test, you can just add another one at the bottom; you don&rsquo;t have to think about what happened to the state in the earlier tests.</p>
<h2 id="functions">Functions</h2>
<p>To prevent us from repeating ourselves in code, PowerShell has the concept of functions. Functions are named script blocks and can be reused throughout the code. Functions can also contain parameters, which can tweak the function&rsquo;s behavior based on information provided via parameters. Functions are nice mechanisms that provide functionality to our users flexibly.</p>
<p>To access the functions of our scripts, we&rsquo;d have to execute the whole script. This means we&rsquo;d also apply the operations inside the script instead of asserting our code does what we want it to do.</p>
<p>Imagine you write a script to wipe a machine. You wouldn&rsquo;t want to execute the whole script just to test it! Instead, you&rsquo;d want to know if it calls the right endpoints/external functions with the right information and handles input as expected.</p>
<p>If we want to test functions in scripts, we need to separate them from the script logic. We can do this by placing the functions in an external PowerShell script file. By doing so, you can use <a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators?view=powershell-7.4#dot-sourcing-operator-"><code>dot-sourcing</code></a>, to make the functions available in your own scripts.</p>
<h3 id="dot-sourcing-vs-import-module">Dot-sourcing vs. Import-Module</h3>
<p>If you&rsquo;re unfamiliar with dotsourcing, the Microsoft learn page <a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators?view=powershell-7.4#dot-sourcing-operator-">about_Operators</a> has a nice explanation on it:</p>
<blockquote>
<p>Dot sourcing operator .</p>
<p>Runs a script in the current scope so that any functions, aliases, and variables that the script creates are added to the current scope, overriding existing ones. Parameters declared by the script become variables. Parameters for which no value has been given become variables with no value. However, the automatic variable $args is preserved.
. .\sample.ps1</p></blockquote>
<p>Even better would to change the extension of the script file containing your functions to <strong>.psm1</strong> making it a full-fledged <a href="https://learn.microsoft.com/en-us/powershell/scripting/learn/ps101/10-script-modules?view=powershell-7.4#script-modules">scriptmodule</a>. This way you can segregate functions into private and public/user-facing functions. Be sure to give the directory and the script the same name. This way, you can use Import-Module or #requires, as well as #using statements in your scripts.</p>
<p>I prefer Import-Module over dot-sourcing since dot-sourcing exposes all of the functions. If you have separate script files for every function, you&rsquo;ll need to dot source every file containing the functions you want to test. You could choose to define all functions in the same psm1 file, but that&rsquo;ll also expose all private functions.</p>
<h3 id="testing-private-functions-in-a-manifest-module">Testing private functions in a manifest module</h3>
<p>For example, a lot of PowerShell modules use this file structure:</p>





<pre tabindex="0"><code>├── Private
│   └── New-DummyOutputPrivate.ps1
├── Public
│   └── New-DummyOutput.ps1
├── testModule.psd1
└── testModule.psm1</code></pre><p>It&rsquo;s a common pattern to split functions in your module into public-facing functions that users of your module can use, as well as private functions that can be used in other functions but not directly by your users. Since we&rsquo;re trying to test all our code, we need access to all functions in a module. For this concept, Pester has the language concept of <a href="https://pester.dev/docs/commands/InModuleScope">InModuleScope</a>. InModuleScope injects code into a module, that allows us to expose internal functions and allows us to Pester test private functions too. Public functions are available from importing the module, so those can be tested that way.</p>
<p>Since private functions are not accessible directly from outside the module, we can&rsquo;t test the private function in Pester using the usual method.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">.</span> <span class="s2">&#34;/Users/christianpiet/Documents/InSpark/Git/Personal/blog/content/script/testModule/testModule.psm1&#34;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">gcm New-Dummy</span><span class="p">*</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">CommandType</span>     <span class="n">Name</span>            <span class="n">Version</span>    <span class="n">Source</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="p">-----------</span>     <span class="p">----</span>            <span class="p">-------</span>    <span class="p">------</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="kd">Function</span><span class="w">        </span><span class="nb">New-DummyOutput</span> <span class="mf">0.0</span>        <span class="n">testModule</span></span></span></code></pre></div><p>So, we need InModuleScope to fix this for Pester.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="cm">&lt;#
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm"> New-DummyOutputPrivate.ps1
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">    This is not exposed by default, as seen in the script block above; we need to implement InModuleScope for that.
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">New-DummyOutputPrivate</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="s2">&#34;I am a private Function&#34;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="cm">&lt;#
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="cm"> New-DummyOutput.ps1
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="cm">    Public functions are exposed on import, so if the function is not private, we can test them straight away.
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">New-DummyOutput</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="s2">&#34;I am a public Function&#34;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="cm">&lt;#
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="cm"> example.tests.ps1
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="cm">    Note the use of InModuleScope
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="n">BeforeAll</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="nb">Import-Module</span> <span class="n">-Name</span> <span class="s2">&#34;</span><span class="nv">$PSScriptRoot</span><span class="s2">/testModule&#34;</span> <span class="n">-Force</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="n">Describe</span> <span class="s1">&#39;Get-ToBeTestedOutput&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="n">It</span> <span class="s1">&#39;Validates output of New-DummyOutput&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">        <span class="nb">New-DummyOutput</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-Be</span> <span class="s1">&#39;I am a public Function&#39;</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">    <span class="n">InModuleScope</span> <span class="n">testModule</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">        <span class="n">It</span> <span class="s1">&#39;Validates output of New-DummyOutputPrivate&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">            <span class="nb">New-DummyOutputPrivate</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-Be</span> <span class="s1">&#39;I am a private Function&#39;</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>The first time you run this on a module that&rsquo;s not imported, it&rsquo;ll error with:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">Starting</span> <span class="n">discovery</span> <span class="k">in</span> <span class="mf">1</span> <span class="n">files</span><span class="p">.</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="p">[-]</span> <span class="n">Discovery</span> <span class="k">in</span> <span class="n">C:</span><span class="p">\</span><span class="n">Git</span><span class="p">\</span><span class="n">blog</span><span class="p">\</span><span class="n">content</span><span class="p">\</span><span class="n">script</span><span class="p">\</span><span class="n">example</span><span class="p">.</span><span class="py">tests</span><span class="p">.</span><span class="py">ps1</span> <span class="n">failed</span> <span class="n">with</span><span class="err">:</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">System</span><span class="p">.</span><span class="py">Management</span><span class="p">.</span><span class="py">Automation</span><span class="p">.</span><span class="n">RuntimeException</span><span class="err">:</span> <span class="n">No</span> <span class="n">modules</span> <span class="n">named</span> <span class="s1">&#39;testModule&#39;</span> <span class="n">are</span> <span class="n">currently</span> <span class="n">loaded</span><span class="p">.</span></span></span></code></pre></div><p>Don&rsquo;t worry for now. If you run the code again, it will work. In the next section, we&rsquo;ll dive into the phases of Pester and fix that error.</p>
<h2 id="discovery-and-run">Discovery and Run</h2>
<p>Pester has two phases of running the code in your Pester-file:</p>
<ul>
<li><strong>Discovery</strong>, this runs all of the Discovery-blocks.</li>
<li><strong>Run</strong>, the codeblocks during the test phases.</li>
</ul>
<p>The <strong>Discovery</strong>-phase discovers the structure of your test file searching for <code>Describe</code>, <code>Context</code>, and <code>It</code>. You can loop over objects that are created before the discovery phase using the <code>BeforeDiscovery</code>-keyword to prevent having to write the same tests over and over again with different subjects. Before the discovery phase, Pester runs all of the <code>BeforeDiscovery</code>-blocks, even when selecting just a specific test to run. That burned me before.</p>
<p>The <strong>Run</strong>-phase runs your code inside the <code>BeforeAll</code>,<code>BeforeEach</code>, <code>AfterAll</code>, <code>AfterEach</code>, and, of course, the <code>It</code>-blocks. This is the phase we used earlier. Since the run phase is performed after the discovery phase, any code in the run phase is not available during the discovery phase.</p>
<h3 id="beforediscovery">BeforeDiscovery</h3>
<p>We had the following test-code earlier:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="cm">&lt;#
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm"> example.tests.ps1
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">    Errors out the first time when ran, because testModule isn&#39;t in $PSModulePath, but is referenced with InModuleScope.
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="n">BeforeAll</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="nb">Import-Module</span> <span class="n">-Name</span> <span class="s2">&#34;</span><span class="nv">$PSScriptRoot</span><span class="s2">/testModule&#34;</span> <span class="n">-Force</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="n">Describe</span> <span class="s1">&#39;Get-ToBeTestedOutput&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="n">It</span> <span class="s1">&#39;Validates output of New-DummyOutput&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="nb">New-DummyOutput</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-Be</span> <span class="s1">&#39;I am a public Function&#39;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="n">InModuleScope</span> <span class="n">testModule</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">        <span class="n">It</span> <span class="s1">&#39;Validates output of New-DummyOutputPrivate&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">            <span class="nb">New-DummyOutputPrivate</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-Be</span> <span class="s1">&#39;I am a private Function&#39;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>This gave the error:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">Starting</span> <span class="n">discovery</span> <span class="k">in</span> <span class="mf">1</span> <span class="n">files</span><span class="p">.</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="p">[-]</span> <span class="n">Discovery</span> <span class="k">in</span> <span class="n">C:</span><span class="p">\</span><span class="n">Git</span><span class="p">\</span><span class="n">blog</span><span class="p">\</span><span class="n">content</span><span class="p">\</span><span class="n">script</span><span class="p">\</span><span class="n">example</span><span class="p">.</span><span class="py">tests</span><span class="p">.</span><span class="py">ps1</span> <span class="n">failed</span> <span class="n">with</span><span class="err">:</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">System</span><span class="p">.</span><span class="py">Management</span><span class="p">.</span><span class="py">Automation</span><span class="p">.</span><span class="n">RuntimeException</span><span class="err">:</span> <span class="n">No</span> <span class="n">modules</span> <span class="n">named</span> <span class="s1">&#39;testModule&#39;</span> <span class="n">are</span> <span class="n">currently</span> <span class="n">loaded</span><span class="p">.</span></span></span></code></pre></div><p>This error is happening because the module is not present in the directories specified in my <code>$env:PSModulePath</code>.
The <code>InModuleScope' keyword is part of the Discovery phase, so it can't find the module referenced with the </code>InModuleScope<code>keyword. If we change the</code>BeforeAll<code>at the top to</code>BeforeDiscovery`, it will be available during Discovery and won&rsquo;t give us errors anymore during initial runs.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="cm">&lt;#
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm"> example.tests.ps1
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">    BeforeDiscovery makes sure the module is always imported before it runs the Discovery Phase
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="n">BeforeDiscovery</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="nb">Import-Module</span> <span class="n">-Name</span> <span class="s2">&#34;</span><span class="nv">$PSScriptRoot</span><span class="s2">/testModule&#34;</span> <span class="n">-Force</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="n">Describe</span> <span class="s1">&#39;Get-ToBeTestedOutput&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="n">It</span> <span class="s1">&#39;Validates output of New-DummyOutput&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="nb">New-DummyOutput</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-Be</span> <span class="s1">&#39;I am a public Function&#39;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="n">InModuleScope</span> <span class="n">testModule</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">        <span class="n">It</span> <span class="s1">&#39;Validates output of New-DummyOutputPrivate&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">            <span class="nb">New-DummyOutputPrivate</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-Be</span> <span class="s1">&#39;I am a private Function&#39;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="c"># Output</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="nb">Invoke-Pester</span> <span class="s1">&#39;/Users/christianpiet/Documents/InSpark/Git/Personal/blog/content/script/example.tests.ps1&#39;</span> <span class="n">-Output</span> <span class="n">Detailed</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="n">Pester</span> <span class="n">v5</span><span class="p">.</span><span class="py">7</span><span class="p">.</span><span class="py">1</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">
</span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="n">Starting</span> <span class="n">discovery</span> <span class="k">in</span> <span class="mf">1</span> <span class="n">files</span><span class="p">.</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="n">Discovery</span> <span class="n">found</span> <span class="mf">2</span> <span class="n">tests</span> <span class="k">in</span> <span class="n">54ms</span><span class="p">.</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="n">Running</span> <span class="n">tests</span><span class="p">.</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">
</span></span><span class="line"><span class="ln">27</span><span class="cl"><span class="n">Running</span> <span class="n">tests</span> <span class="n">from</span> <span class="s1">&#39;/Users/christianpiet/Documents/InSpark/Git/Personal/blog/content/script/example.tests.ps1&#39;</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="n">Describing</span> <span class="nb">Get-ToBeTestedOutput</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">  <span class="p">[+]</span> <span class="n">Validates</span> <span class="n">output</span> <span class="n">of</span> <span class="nb">New-DummyOutput</span> <span class="n">5ms</span> <span class="p">(</span><span class="n">4ms</span><span class="p">|</span><span class="n">1ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">  <span class="p">[+]</span> <span class="n">Validates</span> <span class="n">output</span> <span class="n">of</span> <span class="nb">New-DummyOutputPrivate</span> <span class="n">1ms</span> <span class="p">(</span><span class="n">1ms</span><span class="p">|</span><span class="n">0ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl"><span class="n">Tests</span> <span class="n">completed</span> <span class="k">in</span> <span class="n">72ms</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl"><span class="n">Tests</span> <span class="n">Passed</span><span class="err">:</span> <span class="mf">2</span><span class="p">,</span> <span class="n">Failed</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">Skipped</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">Inconclusive</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">NotRun</span><span class="err">:</span> <span class="mf">0</span></span></span></code></pre></div><h2 id="foreachtestcases">ForEach/TestCases</h2>
<p>Consider/Run the following test:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="cm">&lt;#
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm"> count.tests.ps1
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">    Mind the assignment during the BeforeDiscovery and Foreach implementation with that variable.
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="n">BeforeDiscovery</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="nv">$array</span> <span class="p">=</span> <span class="mf">1</span><span class="p">.</span><span class="mf">.10</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="n">Describe</span> <span class="s2">&#34;Count count🦇&#34;</span> <span class="n">-ForEach</span> <span class="nv">$array</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="n">It</span> <span class="s2">&#34;The number &lt;_&gt; should be less than 11&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="nv">$_</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-BeLessThan</span> <span class="mf">11</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>The <strong>Describe</strong> keyword in this block is followed by <code>ForEach</code> and iterates on the <code>$array</code> variable, effectively running all of the tests in the <code>Describe</code> for each item in <code>$array</code>. The title has &lt;_&gt; referencing the current item, similar to <code>$_</code> in Foreach-Object in regular pwsh. You can also access properties this way:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="cm">&lt;#
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm"> deskitem.tests.ps1
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">    Mind the assignment of complex objects during BeforeDiscovery and the looping over all items and a subset of items.
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="n">BeforeDiscovery</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="nv">$itemsOnMyDesk</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">            <span class="n">Name</span>  <span class="p">=</span> <span class="s1">&#39;Pencil&#39;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">            <span class="n">Count</span> <span class="p">=</span> <span class="mf">3</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">            <span class="n">Name</span>           <span class="p">=</span> <span class="s1">&#39;GamePC&#39;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">            <span class="n">Count</span>          <span class="p">=</span> <span class="mf">1</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">            <span class="n">Color</span>          <span class="p">=</span> <span class="s1">&#39;White&#39;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">            <span class="n">NoiseLevel</span>     <span class="p">=</span> <span class="vm">$true</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">            <span class="n">InstalledGames</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">                <span class="s1">&#39;Diablo 4&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">                <span class="s1">&#39;Supreme Commander: Forged Alliance Forever&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">                <span class="s1">&#39;Battlefield V&#39;</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="n">Describe</span> <span class="s2">&#34;Desktop items&#34;</span> <span class="n">-ForEach</span> <span class="nv">$itemsOnMyDesk</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">    <span class="n">It</span> <span class="s2">&#34;&lt;_.Name&gt; has a Count-property&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">        <span class="nv">$_</span><span class="p">.</span><span class="py">Count</span> <span class="p">|</span> <span class="n">Should</span> <span class="o">-Not</span> <span class="n">-BeNullOrEmpty</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">    <span class="n">BeforeDiscovery</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">        <span class="nv">$PC</span> <span class="p">=</span> <span class="nv">$_</span> <span class="p">|</span> <span class="nb">Where-Object</span> <span class="n">Name</span> <span class="o">-EQ</span> <span class="s1">&#39;GamePC&#39;</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">    <span class="n">Context</span> <span class="s2">&#34;GamePC&#34;</span> <span class="n">-Foreach</span> <span class="nv">$PC</span><span class="p">.</span><span class="py">InstalledGames</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">        <span class="n">It</span> <span class="s2">&#34;Should not be a timesink (&lt;_&gt;)&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">            <span class="nv">$_</span> <span class="p">|</span> <span class="n">Should</span> <span class="o">-Not</span> <span class="n">-Be</span> <span class="s2">&#34;Satisfactory&#34;</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">36</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>This gives us the following results:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nb">Invoke-Pester</span> <span class="s1">&#39;/Users/christianpiet/Documents/InSpark/Git/Personal/blog/content/script/tests.tests.ps1&#39;</span> <span class="n">-Output</span> <span class="n">Detailed</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="n">Pester</span> <span class="n">v5</span><span class="p">.</span><span class="py">7</span><span class="p">.</span><span class="py">1</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="n">Starting</span> <span class="n">discovery</span> <span class="k">in</span> <span class="mf">1</span> <span class="n">files</span><span class="p">.</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="n">Discovery</span> <span class="n">found</span> <span class="mf">5</span> <span class="n">tests</span> <span class="k">in</span> <span class="n">8ms</span><span class="p">.</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="n">Running</span> <span class="n">tests</span><span class="p">.</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="n">Running</span> <span class="n">tests</span> <span class="n">from</span> <span class="s1">&#39;/Users/christianpiet/Documents/InSpark/Git/Personal/blog/content/script/tests.tests.ps1&#39;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="n">Describing</span> <span class="n">Desktop</span> <span class="n">items</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="p">[+]</span> <span class="n">Pencil</span> <span class="n">has</span> <span class="n">a</span> <span class="nb">Count-property</span> <span class="n">1ms</span> <span class="p">(</span><span class="n">1ms</span><span class="p">|</span><span class="n">1ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="n">Describing</span> <span class="n">Desktop</span> <span class="n">items</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">  <span class="p">[+]</span> <span class="n">GamePC</span> <span class="n">has</span> <span class="n">a</span> <span class="nb">Count-property</span> <span class="n">4ms</span> <span class="p">(</span><span class="n">4ms</span><span class="p">|</span><span class="n">1ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"> <span class="n">Context</span> <span class="n">GamePC</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">   <span class="p">[+]</span> <span class="n">Should</span> <span class="n">not</span> <span class="n">be</span> <span class="n">a</span> <span class="n">timesink</span> <span class="p">(</span><span class="n">Diablo</span> <span class="mf">4</span><span class="p">)</span> <span class="n">3ms</span> <span class="p">(</span><span class="n">1ms</span><span class="p">|</span><span class="n">2ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl"> <span class="n">Context</span> <span class="n">GamePC</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">   <span class="p">[+]</span> <span class="n">Should</span> <span class="n">not</span> <span class="n">be</span> <span class="n">a</span> <span class="n">timesink</span> <span class="p">(</span><span class="n">Supreme</span> <span class="n">Commander</span><span class="err">:</span> <span class="n">Forged</span> <span class="n">Alliance</span> <span class="n">Forever</span><span class="p">)</span> <span class="n">1ms</span> <span class="p">(</span><span class="n">1ms</span><span class="p">|</span><span class="n">1ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl"> <span class="n">Context</span> <span class="n">GamePC</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">   <span class="p">[+]</span> <span class="n">Should</span> <span class="n">not</span> <span class="n">be</span> <span class="n">a</span> <span class="n">timesink</span> <span class="p">(</span><span class="n">Battlefield</span> <span class="n">V</span><span class="p">)</span> <span class="n">1ms</span> <span class="p">(</span><span class="n">1ms</span><span class="p">|</span><span class="n">1ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="n">Tests</span> <span class="n">completed</span> <span class="k">in</span> <span class="n">60ms</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="n">Tests</span> <span class="n">Passed</span><span class="err">:</span> <span class="mf">5</span><span class="p">,</span> <span class="n">Failed</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">Skipped</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">Inconclusive</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">NotRun</span><span class="err">:</span> <span class="mf">0</span></span></span></code></pre></div><p>The Pester file above tests items in a predefined set of test cases/items to test. You can access the current looped object in the titles, loop over their properties, etc. I personally like to put the <code>BeforeDiscovery</code>-blocks close to where they are used if they are only used once, but you can also choose to place the <code>BeforeDiscovery</code>-blocks at the top of the describe block.</p>
<h2 id="the-power-of-discovery">The Power of Discovery</h2>
<p>If we spice up our module a bit, we can start to discover why this Discover phase can be so powerful. The final section of this blog will be without the training wheels; it&rsquo;s just a repetition of earlier mentioned concepts. Don&rsquo;t get intimidated by the amount code; much is still the same, and the Pester code just has some setup for scale.</p>
<p>We all want to know what parameters for functions do, so it can be convenient to check at least all your public functions for comment-based help and parameter descriptions.</p>
<p>I borrowed this code of Brandon Olin his excellent <a href="https://github.com/devblackops/Stucco/blob/main/tests/Help.tests.ps1">Stucco PowerShell Module template engine</a>, who borrowed it (with love) from <a href="https://raw.githubusercontent.com/juneb/PesterTDD/master/Module.Help.Tests.ps1">juneb on GitHub</a>.</p>
<p>Consider the following function definitions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c"># New-DummyOutput.ps1</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">New-DummyOutput</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="cm">&lt;#
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">        .</span><span class="sd">SYNOPSIS</span><span class="cm">
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="cm">     A short one-line action-based description, e.g. &#39;Tests if a function is valid&#39;
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="cm">        .</span><span class="sd">DESCRIPTION</span><span class="cm">
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="cm">     A longer description of the function, its purpose, common use cases, etc.
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="cm">        .</span><span class="sd">NOTES</span><span class="cm">
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="cm">     Information or caveats about the function e.g., &#39;This function is not supported in Linux.&#39;
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="cm">        .</span><span class="sd">LINK</span><span class="cm">
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="cm">     Specify a URI to a help page, this will show when Get-Help -Online is used.
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="cm">        .</span><span class="sd">EXAMPLE</span><span class="cm">
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="cm">     Test-MyTestFunction -Verbose
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="cm">     Explanation of the function or its result. You can include multiple examples with additional .EXAMPLE lines
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="cm">     #&gt;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">    <span class="k">param</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">        <span class="c"># I am a very helpful parameter</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">        <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">        <span class="nv">$message</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">    <span class="s2">&#34;I am a public Function: </span><span class="nv">$message</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="c"># New-DummyOutput2.ps1</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">New-DummyOutput2</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">    <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">    <span class="k">param</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">        <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">        <span class="nv">$message</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">    <span class="s2">&#34;I am a public Function: </span><span class="nv">$message</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>I added &lsquo;ProgressAction&rsquo; to <code>$commonParams</code> that was added in PowerShell 7.4. <code>FilterOutCommonParams</code> is a function with an access modifier so that the function is available both in the discovery phase and outside of it. Then, we import the module, just like we did earlier.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="n">BeforeDiscovery</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="kd">function</span><span class="w"> </span><span class="vm">global:</span><span class="nb">FilterOutCommonParams</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">        <span class="k">param</span> <span class="p">(</span><span class="nv">$Params</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="nv">$commonParams</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">            <span class="s1">&#39;Debug&#39;</span><span class="p">,</span> <span class="s1">&#39;ErrorAction&#39;</span><span class="p">,</span> <span class="s1">&#39;ErrorVariable&#39;</span><span class="p">,</span> <span class="s1">&#39;InformationAction&#39;</span><span class="p">,</span> <span class="s1">&#39;InformationVariable&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">            <span class="s1">&#39;OutBuffer&#39;</span><span class="p">,</span> <span class="s1">&#39;OutVariable&#39;</span><span class="p">,</span> <span class="s1">&#39;PipelineVariable&#39;</span><span class="p">,</span> <span class="s1">&#39;Verbose&#39;</span><span class="p">,</span> <span class="s1">&#39;WarningAction&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">            <span class="s1">&#39;WarningVariable&#39;</span><span class="p">,</span> <span class="s1">&#39;Confirm&#39;</span><span class="p">,</span> <span class="s1">&#39;Whatif&#39;</span><span class="p">,</span> <span class="s1">&#39;ProgressAction&#39;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="c"># We&#39;re not interested in these, we just want the custom parameters</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="nv">$params</span> <span class="p">|</span> <span class="nb">Where-Object</span> <span class="p">{</span> <span class="nv">$_</span><span class="p">.</span><span class="py">Name</span> <span class="n">-notin</span> <span class="nv">$commonParams</span> <span class="p">}</span> <span class="p">|</span> <span class="nb">Sort-Object</span> <span class="n">-Property</span> <span class="n">Name</span> <span class="n">-Unique</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="c"># We need to import our own module, so we can iterate over it&#39;s functions/cmdlets</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nb">Import-Module</span> <span class="n">-Name</span> <span class="s2">&#34;</span><span class="nv">$PSScriptRoot</span><span class="s2">/testModule&#34;</span> <span class="n">-Force</span> <span class="n">-Verbose:</span><span class="vm">$false</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="c"># Create a splat for get</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="nv">$getCommandsplat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">        <span class="n">Module</span>      <span class="p">=</span> <span class="p">(</span><span class="nb">Get-Module</span> <span class="n">testModule</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">        <span class="n">CommandType</span> <span class="p">=</span> <span class="p">[</span><span class="no">System.Management.Automation.CommandTypes[]</span><span class="p">]</span><span class="s1">&#39;Cmdlet, Function&#39;</span> <span class="c"># Not alias</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$PSVersionTable</span><span class="p">.</span><span class="py">PSVersion</span><span class="p">.</span><span class="py">Major</span> <span class="o">-lt</span> <span class="mf">6</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">        <span class="nv">$getCommandsplat</span><span class="p">.</span><span class="n">CommandType</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span> <span class="p">+=</span> <span class="s1">&#39;Workflow&#39;</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">    <span class="c">#Commands is available in all subsequent BeforeDiscovery Blocks and can be used in ForEach</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="nv">$commands</span> <span class="p">=</span> <span class="nb">Get-Command</span> <span class="nv">@getCommandsplat</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl">    <span class="c">## When testing help, remember that help is cached at the beginning of each session.</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">    <span class="c">## To test, restart session.</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>From there on, we make sure we get just the cmdlets and functions from our module, with a conditional statement to also make sure to add in workflows for earlier versions of PowerShell. No idea what those are; not relevant for now. The found (public) functions and cmdlets are stored in a variable called <code>$commands</code>.</p>
<p>Then you&rsquo;ll see the <strong>Describe</strong> keyword as we had earlier with a <code>ForEach</code> on that <code>$commands</code> variable, effectively running all of the tests in the <code>Describe</code> for each command in <code>$commands</code>. And it references the name of the current command in the ForEach loop. This is similar to <code>$_</code> in foreach-object, representing the current item.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">Describe</span> <span class="s2">&#34;Test help for &lt;_.Name&gt;&#34;</span> <span class="n">-ForEach</span> <span class="nv">$commands</span> <span class="p">{</span></span></span></code></pre></div><p>When ran it&rsquo;ll look like:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">Describing</span> <span class="n">Test</span> <span class="n">help</span> <span class="k">for</span> <span class="nb">New-DummyOutput</span></span></span></code></pre></div><p>Then another <code>BeforeDiscovery</code> block is created inside of <code>Describe</code> with several variables; this is still within that loop over <code>$commands.</code> The writer of the Pester file wants to access the properties of the current item in the loop so that they can use them to iterate over again. A use case you could think of is testing multiple parameters for a single command, maybe? I usually put <code>BeforeDiscovery</code> blocks directly above the blocks I am going to use them in, or when I use the Discovery in multiple places, I place them on top in their shared parent.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-pwsh" data-lang="pwsh"><span class="line"><span class="ln">1</span><span class="cl"> <span class="n">BeforeDiscovery</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="c"># Get command help, parameters, and links</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="nv">$command</span> <span class="p">=</span> <span class="nv">$_</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">    <span class="nv">$commandHelp</span> <span class="p">=</span> <span class="nb">Get-Help</span> <span class="nv">$command</span><span class="p">.</span><span class="py">Name</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">    <span class="nv">$commandParameters</span> <span class="p">=</span> <span class="k">global:</span><span class="n">FilterOutCommonParams</span> <span class="n">-Params</span> <span class="nv">$command</span><span class="p">.</span><span class="py">ParameterSets</span><span class="p">.</span><span class="py">Parameters</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">    <span class="nv">$commandParameterNames</span> <span class="p">=</span> <span class="nv">$commandParameters</span><span class="p">.</span><span class="py">Name</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl">    <span class="nv">$helpLinks</span> <span class="p">=</span> <span class="nv">$commandHelp</span><span class="p">.</span><span class="py">relatedLinks</span><span class="p">.</span><span class="py">navigationLink</span><span class="p">.</span><span class="py">uri</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"> <span class="p">}</span></span></span></code></pre></div><p>The <code>BeforeAll</code>-block with the same code makes sure that we have the same information available within our <code>Run</code>-phase. <strong>One important item is that in a loop in the Run phase, <code>$_</code> references the same <code>$commands</code> item as in the discovery phase</strong>. The rest of the BeforeAll block makes use of that mechanism, pointing to that same <code>$command</code>-variable.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-pwsh" data-lang="pwsh"><span class="line"><span class="ln"> 1</span><span class="cl"> <span class="n">BeforeAll</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="c"># These vars are needed in both the discovery and test phases, so we need to duplicate them here</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="nv">$command</span> <span class="p">=</span> <span class="nv">$_</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nv">$commandName</span> <span class="p">=</span> <span class="nv">$_</span><span class="p">.</span><span class="py">Name</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="nv">$commandHelp</span> <span class="p">=</span> <span class="nb">Get-Help</span> <span class="nv">$command</span><span class="p">.</span><span class="py">Name</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="nv">$commandParameters</span> <span class="p">=</span> <span class="k">global:</span><span class="n">FilterOutCommonParams</span> <span class="n">-Params</span> <span class="nv">$command</span><span class="p">.</span><span class="py">ParameterSets</span><span class="p">.</span><span class="py">Parameters</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="nv">$commandParameterNames</span> <span class="p">=</span> <span class="nv">$commandParameters</span><span class="p">.</span><span class="py">Name</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="nv">$helpParameters</span> <span class="p">=</span> <span class="k">global:</span><span class="n">FilterOutCommonParams</span> <span class="n">-Params</span> <span class="nv">$commandHelp</span><span class="p">.</span><span class="py">Parameters</span><span class="p">.</span><span class="nb">Parameter</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="nv">$helpParameterNames</span> <span class="p">=</span> <span class="nv">$helpParameters</span><span class="p">.</span><span class="py">Name</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"> <span class="p">}</span></span></span></code></pre></div><p>Then, several tests follow based on the <code>$commandHelp</code> help-object. It even includes a fancy HelpLinks-loop over the <code>$helpLinks</code> defined in the help documentation, ensuring that all related links are valid and accessible.</p>
<p>It loops again over each individual custom parameter after omitting the common parameters with the <code>FilterOutCommonParams</code>-function and continues to test each custom-defined parameter.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">  1</span><span class="cl"><span class="c"># Help.Tests.ps1</span>
</span></span><span class="line"><span class="ln">  2</span><span class="cl"><span class="n">BeforeDiscovery</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">  3</span><span class="cl">
</span></span><span class="line"><span class="ln">  4</span><span class="cl">    <span class="kd">function</span><span class="w"> </span><span class="vm">global:</span><span class="nb">FilterOutCommonParams</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">  5</span><span class="cl">        <span class="k">param</span> <span class="p">(</span><span class="nv">$Params</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">  6</span><span class="cl">        <span class="nv">$commonParams</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span>
</span></span><span class="line"><span class="ln">  7</span><span class="cl">            <span class="s1">&#39;Debug&#39;</span><span class="p">,</span> <span class="s1">&#39;ErrorAction&#39;</span><span class="p">,</span> <span class="s1">&#39;ErrorVariable&#39;</span><span class="p">,</span> <span class="s1">&#39;InformationAction&#39;</span><span class="p">,</span> <span class="s1">&#39;InformationVariable&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">  8</span><span class="cl">            <span class="s1">&#39;OutBuffer&#39;</span><span class="p">,</span> <span class="s1">&#39;OutVariable&#39;</span><span class="p">,</span> <span class="s1">&#39;PipelineVariable&#39;</span><span class="p">,</span> <span class="s1">&#39;Verbose&#39;</span><span class="p">,</span> <span class="s1">&#39;WarningAction&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">  9</span><span class="cl">            <span class="s1">&#39;WarningVariable&#39;</span><span class="p">,</span> <span class="s1">&#39;Confirm&#39;</span><span class="p">,</span> <span class="s1">&#39;Whatif&#39;</span><span class="p">,</span> <span class="s1">&#39;ProgressAction&#39;</span>
</span></span><span class="line"><span class="ln"> 10</span><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="ln"> 11</span><span class="cl">        <span class="nv">$params</span> <span class="p">|</span> <span class="nb">Where-Object</span> <span class="p">{</span> <span class="nv">$_</span><span class="p">.</span><span class="py">Name</span> <span class="n">-notin</span> <span class="nv">$commonParams</span> <span class="p">}</span> <span class="p">|</span> <span class="nb">Sort-Object</span> <span class="n">-Property</span> <span class="n">Name</span> <span class="n">-Unique</span>
</span></span><span class="line"><span class="ln"> 12</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 13</span><span class="cl">    <span class="nb">Import-Module</span> <span class="n">-Name</span> <span class="s2">&#34;</span><span class="nv">$PSScriptRoot</span><span class="s2">/testModule&#34;</span> <span class="n">-Force</span> <span class="n">-Verbose:</span><span class="vm">$false</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="ln"> 14</span><span class="cl">    <span class="nv">$params</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 15</span><span class="cl">        <span class="n">Module</span>      <span class="p">=</span> <span class="p">(</span><span class="nb">Get-Module</span> <span class="n">testModule</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 16</span><span class="cl">        <span class="n">CommandType</span> <span class="p">=</span> <span class="p">[</span><span class="no">System.Management.Automation.CommandTypes[]</span><span class="p">]</span><span class="s1">&#39;Cmdlet, Function&#39;</span> <span class="c"># Not alias</span>
</span></span><span class="line"><span class="ln"> 17</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 18</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$PSVersionTable</span><span class="p">.</span><span class="py">PSVersion</span><span class="p">.</span><span class="py">Major</span> <span class="o">-lt</span> <span class="mf">6</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 19</span><span class="cl">        <span class="nv">$params</span><span class="p">.</span><span class="n">CommandType</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span> <span class="p">+=</span> <span class="s1">&#39;Workflow&#39;</span>
</span></span><span class="line"><span class="ln"> 20</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 21</span><span class="cl">    <span class="nv">$commands</span> <span class="p">=</span> <span class="nb">Get-Command</span> <span class="nv">@params</span>
</span></span><span class="line"><span class="ln"> 22</span><span class="cl">
</span></span><span class="line"><span class="ln"> 23</span><span class="cl">    <span class="c">## When testing help, remember that help is cached at the beginning of each session.</span>
</span></span><span class="line"><span class="ln"> 24</span><span class="cl">    <span class="c">## To test, restart session.</span>
</span></span><span class="line"><span class="ln"> 25</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 26</span><span class="cl">
</span></span><span class="line"><span class="ln"> 27</span><span class="cl"><span class="n">Describe</span> <span class="s2">&#34;Test help for &lt;_.Name&gt;&#34;</span> <span class="n">-ForEach</span> <span class="nv">$commands</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 28</span><span class="cl">
</span></span><span class="line"><span class="ln"> 29</span><span class="cl">    <span class="n">BeforeDiscovery</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 30</span><span class="cl">        <span class="c"># Get command help, parameters, and links</span>
</span></span><span class="line"><span class="ln"> 31</span><span class="cl">        <span class="nv">$command</span> <span class="p">=</span> <span class="nv">$_</span>
</span></span><span class="line"><span class="ln"> 32</span><span class="cl">        <span class="nv">$commandHelp</span> <span class="p">=</span> <span class="nb">Get-Help</span> <span class="nv">$command</span><span class="p">.</span><span class="py">Name</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span>
</span></span><span class="line"><span class="ln"> 33</span><span class="cl">        <span class="nv">$commandParameters</span> <span class="p">=</span> <span class="k">global:</span><span class="n">FilterOutCommonParams</span> <span class="n">-Params</span> <span class="nv">$command</span><span class="p">.</span><span class="py">ParameterSets</span><span class="p">.</span><span class="py">Parameters</span>
</span></span><span class="line"><span class="ln"> 34</span><span class="cl">        <span class="nv">$commandParameterNames</span> <span class="p">=</span> <span class="nv">$commandParameters</span><span class="p">.</span><span class="py">Name</span>
</span></span><span class="line"><span class="ln"> 35</span><span class="cl">        <span class="nv">$helpLinks</span> <span class="p">=</span> <span class="nv">$commandHelp</span><span class="p">.</span><span class="py">relatedLinks</span><span class="p">.</span><span class="py">navigationLink</span><span class="p">.</span><span class="py">uri</span>
</span></span><span class="line"><span class="ln"> 36</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 37</span><span class="cl">
</span></span><span class="line"><span class="ln"> 38</span><span class="cl">    <span class="n">BeforeAll</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 39</span><span class="cl">        <span class="c"># These vars are needed in both the discovery and test phases, so we need to duplicate them here</span>
</span></span><span class="line"><span class="ln"> 40</span><span class="cl">        <span class="nv">$command</span> <span class="p">=</span> <span class="nv">$_</span>
</span></span><span class="line"><span class="ln"> 41</span><span class="cl">        <span class="nv">$commandName</span> <span class="p">=</span> <span class="nv">$_</span><span class="p">.</span><span class="py">Name</span>
</span></span><span class="line"><span class="ln"> 42</span><span class="cl">        <span class="nv">$commandHelp</span> <span class="p">=</span> <span class="nb">Get-Help</span> <span class="nv">$command</span><span class="p">.</span><span class="py">Name</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span>
</span></span><span class="line"><span class="ln"> 43</span><span class="cl">        <span class="nv">$commandParameters</span> <span class="p">=</span> <span class="k">global:</span><span class="n">FilterOutCommonParams</span> <span class="n">-Params</span> <span class="nv">$command</span><span class="p">.</span><span class="py">ParameterSets</span><span class="p">.</span><span class="py">Parameters</span>
</span></span><span class="line"><span class="ln"> 44</span><span class="cl">        <span class="nv">$commandParameterNames</span> <span class="p">=</span> <span class="nv">$commandParameters</span><span class="p">.</span><span class="py">Name</span>
</span></span><span class="line"><span class="ln"> 45</span><span class="cl">        <span class="nv">$helpParameters</span> <span class="p">=</span> <span class="k">global:</span><span class="n">FilterOutCommonParams</span> <span class="n">-Params</span> <span class="nv">$commandHelp</span><span class="p">.</span><span class="py">Parameters</span><span class="p">.</span><span class="nb">Parameter</span>
</span></span><span class="line"><span class="ln"> 46</span><span class="cl">        <span class="nv">$helpParameterNames</span> <span class="p">=</span> <span class="nv">$helpParameters</span><span class="p">.</span><span class="py">Name</span>
</span></span><span class="line"><span class="ln"> 47</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 48</span><span class="cl">
</span></span><span class="line"><span class="ln"> 49</span><span class="cl">    <span class="c"># If help is not found, synopsis in auto-generated help is the syntax diagram</span>
</span></span><span class="line"><span class="ln"> 50</span><span class="cl">    <span class="n">It</span> <span class="s1">&#39;Help is not auto-generated&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 51</span><span class="cl">        <span class="nv">$commandHelp</span><span class="p">.</span><span class="py">Synopsis</span> <span class="p">|</span> <span class="n">Should</span> <span class="o">-Not</span> <span class="n">-BeLike</span> <span class="s1">&#39;*`[`&lt;CommonParameters`&gt;`]*&#39;</span>
</span></span><span class="line"><span class="ln"> 52</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 53</span><span class="cl">
</span></span><span class="line"><span class="ln"> 54</span><span class="cl">    <span class="c"># Should be a description for every function</span>
</span></span><span class="line"><span class="ln"> 55</span><span class="cl">    <span class="n">It</span> <span class="s2">&#34;Has description&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 56</span><span class="cl">        <span class="nv">$commandHelp</span><span class="p">.</span><span class="py">Description</span> <span class="p">|</span> <span class="n">Should</span> <span class="o">-Not</span> <span class="n">-BeNullOrEmpty</span>
</span></span><span class="line"><span class="ln"> 57</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 58</span><span class="cl">
</span></span><span class="line"><span class="ln"> 59</span><span class="cl">    <span class="c"># Should be at least one example</span>
</span></span><span class="line"><span class="ln"> 60</span><span class="cl">    <span class="n">It</span> <span class="s2">&#34;Has example code&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 61</span><span class="cl">     <span class="p">(</span><span class="nv">$commandHelp</span><span class="p">.</span><span class="py">Examples</span><span class="p">.</span><span class="py">Example</span> <span class="p">|</span> <span class="nb">Select-Object</span> <span class="n">-First</span> <span class="mf">1</span><span class="p">).</span><span class="py">Code</span> <span class="p">|</span> <span class="n">Should</span> <span class="o">-Not</span> <span class="n">-BeNullOrEmpty</span>
</span></span><span class="line"><span class="ln"> 62</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 63</span><span class="cl">
</span></span><span class="line"><span class="ln"> 64</span><span class="cl">    <span class="c"># Should be at least one example description</span>
</span></span><span class="line"><span class="ln"> 65</span><span class="cl">    <span class="n">It</span> <span class="s2">&#34;Has example help&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 66</span><span class="cl">     <span class="p">(</span><span class="nv">$commandHelp</span><span class="p">.</span><span class="py">Examples</span><span class="p">.</span><span class="py">Example</span><span class="p">.</span><span class="py">Remarks</span> <span class="p">|</span> <span class="nb">Select-Object</span> <span class="n">-First</span> <span class="mf">1</span><span class="p">).</span><span class="py">Text</span> <span class="p">|</span> <span class="n">Should</span> <span class="o">-Not</span> <span class="n">-BeNullOrEmpty</span>
</span></span><span class="line"><span class="ln"> 67</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 68</span><span class="cl">
</span></span><span class="line"><span class="ln"> 69</span><span class="cl">    <span class="n">It</span> <span class="s2">&#34;Help link &lt;_&gt; is valid&#34;</span> <span class="n">-ForEach</span> <span class="nv">$helpLinks</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 70</span><span class="cl">     <span class="p">(</span><span class="nb">Invoke-WebRequest</span> <span class="n">-Uri</span> <span class="nv">$_</span> <span class="n">-UseBasicParsing</span><span class="p">).</span><span class="py">StatusCode</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-Be</span> <span class="s1">&#39;200&#39;</span>
</span></span><span class="line"><span class="ln"> 71</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 72</span><span class="cl">
</span></span><span class="line"><span class="ln"> 73</span><span class="cl">    <span class="n">Context</span> <span class="s2">&#34;Parameter &lt;_.Name&gt;&#34;</span> <span class="n">-Foreach</span> <span class="nv">$commandParameters</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 74</span><span class="cl">
</span></span><span class="line"><span class="ln"> 75</span><span class="cl">        <span class="n">BeforeAll</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 76</span><span class="cl">            <span class="nv">$parameter</span> <span class="p">=</span> <span class="nv">$_</span>
</span></span><span class="line"><span class="ln"> 77</span><span class="cl">            <span class="nv">$parameterName</span> <span class="p">=</span> <span class="nv">$parameter</span><span class="p">.</span><span class="py">Name</span>
</span></span><span class="line"><span class="ln"> 78</span><span class="cl">            <span class="nv">$parameterHelp</span> <span class="p">=</span> <span class="nv">$commandHelp</span><span class="p">.</span><span class="py">parameters</span><span class="p">.</span><span class="nb">parameter</span> <span class="p">|</span> <span class="nb">Where-Object</span> <span class="n">Name</span> <span class="o">-EQ</span> <span class="nv">$parameterName</span>
</span></span><span class="line"><span class="ln"> 79</span><span class="cl">            <span class="nv">$parameterHelpType</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$parameterHelp</span><span class="p">.</span><span class="n">ParameterValue</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$parameterHelp</span><span class="p">.</span><span class="py">ParameterValue</span><span class="p">.</span><span class="py">Trim</span><span class="p">()</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 80</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 81</span><span class="cl">
</span></span><span class="line"><span class="ln"> 82</span><span class="cl">        <span class="c"># Should be a description for every parameter</span>
</span></span><span class="line"><span class="ln"> 83</span><span class="cl">        <span class="n">It</span> <span class="s2">&#34;Has description&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 84</span><span class="cl">            <span class="nv">$parameterHelp</span><span class="p">.</span><span class="py">Description</span><span class="p">.</span><span class="py">Text</span> <span class="p">|</span> <span class="n">Should</span> <span class="o">-Not</span> <span class="n">-BeNullOrEmpty</span>
</span></span><span class="line"><span class="ln"> 85</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 86</span><span class="cl">
</span></span><span class="line"><span class="ln"> 87</span><span class="cl">        <span class="c"># Required value in Help should match IsMandatory property of parameter</span>
</span></span><span class="line"><span class="ln"> 88</span><span class="cl">        <span class="n">It</span> <span class="s2">&#34;Has correct [mandatory] value&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 89</span><span class="cl">            <span class="nv">$codeMandatory</span> <span class="p">=</span> <span class="nv">$_</span><span class="p">.</span><span class="py">IsMandatory</span><span class="p">.</span><span class="py">toString</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 90</span><span class="cl">            <span class="nv">$parameterHelp</span><span class="p">.</span><span class="py">Required</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-Be</span> <span class="nv">$codeMandatory</span>
</span></span><span class="line"><span class="ln"> 91</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 92</span><span class="cl">
</span></span><span class="line"><span class="ln"> 93</span><span class="cl">        <span class="c"># Parameter type in help should match code</span>
</span></span><span class="line"><span class="ln"> 94</span><span class="cl">        <span class="n">It</span> <span class="s2">&#34;Has correct parameter type&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 95</span><span class="cl">            <span class="nv">$parameterHelpType</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-Be</span> <span class="nv">$parameter</span><span class="p">.</span><span class="py">ParameterType</span><span class="p">.</span><span class="py">Name</span>
</span></span><span class="line"><span class="ln"> 96</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 97</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 98</span><span class="cl">
</span></span><span class="line"><span class="ln"> 99</span><span class="cl">    <span class="n">Context</span> <span class="s2">&#34;Test &lt;_&gt; help parameter help for &lt;commandName&gt;&#34;</span> <span class="n">-Foreach</span> <span class="nv">$helpParameterNames</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">100</span><span class="cl">
</span></span><span class="line"><span class="ln">101</span><span class="cl">        <span class="c"># Shouldn&#39;t find extra parameters in help.</span>
</span></span><span class="line"><span class="ln">102</span><span class="cl">        <span class="n">It</span> <span class="s2">&#34;finds help parameter in code: &lt;_&gt;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">103</span><span class="cl">            <span class="nv">$_</span> <span class="n">-in</span> <span class="nv">$parameterNames</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-Be</span> <span class="vm">$true</span>
</span></span><span class="line"><span class="ln">104</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">105</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">106</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>Running it gives the following results:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nb">Invoke-Pester</span> <span class="p">/</span><span class="n">Users</span><span class="p">/</span><span class="n">christianpiet</span><span class="p">/</span><span class="n">Documents</span><span class="p">/</span><span class="n">InSpark</span><span class="p">/</span><span class="n">Git</span><span class="p">/</span><span class="n">Personal</span><span class="p">/</span><span class="n">blog</span><span class="p">/</span><span class="n">content</span><span class="p">/</span><span class="n">script</span><span class="p">/</span><span class="n">Help</span><span class="p">.</span><span class="py">tests</span><span class="p">.</span><span class="py">ps1</span> <span class="n">-Output</span> <span class="n">Detailed</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="n">Pester</span> <span class="n">v5</span><span class="p">.</span><span class="py">7</span><span class="p">.</span><span class="py">1</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="n">Starting</span> <span class="n">discovery</span> <span class="k">in</span> <span class="mf">1</span> <span class="n">files</span><span class="p">.</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="n">Discovery</span> <span class="n">found</span> <span class="mf">14</span> <span class="n">tests</span> <span class="k">in</span> <span class="n">84ms</span><span class="p">.</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="n">Running</span> <span class="n">tests</span><span class="p">.</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="n">Running</span> <span class="n">tests</span> <span class="n">from</span> <span class="s1">&#39;/Users/christianpiet/Documents/InSpark/Git/Personal/blog/content/script/Help.tests.ps1&#39;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="n">Describing</span> <span class="n">Test</span> <span class="n">help</span> <span class="k">for</span> <span class="nb">New-DummyOutput</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="p">[+]</span> <span class="n">Help</span> <span class="n">is</span> <span class="n">not</span> <span class="nb">auto-generated</span> <span class="n">4ms</span> <span class="p">(</span><span class="n">3ms</span><span class="p">|</span><span class="n">1ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">  <span class="p">[+]</span> <span class="n">Has</span> <span class="n">description</span> <span class="n">6ms</span> <span class="p">(</span><span class="n">6ms</span><span class="p">|</span><span class="n">0ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">  <span class="p">[+]</span> <span class="n">Has</span> <span class="n">example</span> <span class="n">code</span> <span class="n">3ms</span> <span class="p">(</span><span class="n">2ms</span><span class="p">|</span><span class="n">0ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">  <span class="p">[+]</span> <span class="n">Has</span> <span class="n">example</span> <span class="n">help</span> <span class="n">2ms</span> <span class="p">(</span><span class="n">2ms</span><span class="p">|</span><span class="n">0ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"> <span class="n">Context</span> <span class="nb">Parameter</span> <span class="n">message</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">   <span class="p">[+]</span> <span class="n">Has</span> <span class="n">description</span> <span class="n">4ms</span> <span class="p">(</span><span class="n">2ms</span><span class="p">|</span><span class="n">2ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">   <span class="p">[+]</span> <span class="n">Has</span> <span class="n">correct</span> <span class="p">[</span><span class="no">mandatory</span><span class="p">]</span> <span class="n">value</span> <span class="n">9ms</span> <span class="p">(</span><span class="n">8ms</span><span class="p">|</span><span class="n">0ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">   <span class="p">[+]</span> <span class="n">Has</span> <span class="n">correct</span> <span class="nb">parameter</span> <span class="nb">type </span><span class="n">3ms</span> <span class="p">(</span><span class="n">2ms</span><span class="p">|</span><span class="n">0ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="n">Describing</span> <span class="n">Test</span> <span class="n">help</span> <span class="k">for</span> <span class="nb">New-DummyOutput2</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">  <span class="p">[-]</span> <span class="n">Help</span> <span class="n">is</span> <span class="n">not</span> <span class="nb">auto-generated</span> <span class="n">12ms</span> <span class="p">(</span><span class="n">11ms</span><span class="p">|</span><span class="n">1ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">   <span class="n">Expected</span> <span class="n">like</span> <span class="n">wildcard</span> <span class="s1">&#39;*`[`&lt;CommonParameters`&gt;`]*&#39;</span> <span class="n">to</span> <span class="n">not</span> <span class="n">match</span> <span class="s1">&#39;
</span></span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="s1">   New-DummyOutput2 [[-message] &lt;string&gt;] [&lt;CommonParameters&gt;]
</span></span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="s1">   &#39;</span><span class="p">,</span> <span class="n">but</span> <span class="n">it</span> <span class="n">did</span> <span class="n">match</span><span class="p">.</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">   <span class="n">at</span> <span class="nv">$commandHelp</span><span class="p">.</span><span class="py">Synopsis</span> <span class="p">|</span> <span class="n">Should</span> <span class="o">-Not</span> <span class="n">-BeLike</span> <span class="s1">&#39;*`[`&lt;CommonParameters`&gt;`]*&#39;</span><span class="p">,</span> <span class="p">/</span><span class="n">Users</span><span class="p">/</span><span class="n">christianpiet</span><span class="p">/</span><span class="n">Documents</span><span class="p">/</span><span class="n">InSpark</span><span class="p">/</span><span class="n">Git</span><span class="p">/</span><span class="n">Personal</span><span class="p">/</span><span class="n">blog</span><span class="p">/</span><span class="n">content</span><span class="p">/</span><span class="n">script</span><span class="p">/</span><span class="n">Help</span><span class="p">.</span><span class="py">tests</span><span class="p">.</span><span class="n">ps1</span><span class="err">:</span><span class="mf">50</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">   <span class="n">at</span> <span class="p">&lt;</span><span class="n">ScriptBlock</span><span class="p">&gt;,</span> <span class="p">/</span><span class="n">Users</span><span class="p">/</span><span class="n">christianpiet</span><span class="p">/</span><span class="n">Documents</span><span class="p">/</span><span class="n">InSpark</span><span class="p">/</span><span class="n">Git</span><span class="p">/</span><span class="n">Personal</span><span class="p">/</span><span class="n">blog</span><span class="p">/</span><span class="n">content</span><span class="p">/</span><span class="n">script</span><span class="p">/</span><span class="n">Help</span><span class="p">.</span><span class="py">tests</span><span class="p">.</span><span class="n">ps1</span><span class="err">:</span><span class="mf">50</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">  <span class="p">[-]</span> <span class="n">Has</span> <span class="n">description</span> <span class="n">37ms</span> <span class="p">(</span><span class="n">36ms</span><span class="p">|</span><span class="n">0ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">   <span class="n">Expected</span> <span class="n">a</span> <span class="n">value</span><span class="p">,</span> <span class="n">but</span> <span class="n">got</span> <span class="vm">$null</span> <span class="n">or</span> <span class="n">empty</span><span class="p">.</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">   <span class="n">at</span> <span class="nv">$commandHelp</span><span class="p">.</span><span class="py">Description</span> <span class="p">|</span> <span class="n">Should</span> <span class="o">-Not</span> <span class="n">-BeNullOrEmpty</span><span class="p">,</span> <span class="p">/</span><span class="n">Users</span><span class="p">/</span><span class="n">christianpiet</span><span class="p">/</span><span class="n">Documents</span><span class="p">/</span><span class="n">InSpark</span><span class="p">/</span><span class="n">Git</span><span class="p">/</span><span class="n">Personal</span><span class="p">/</span><span class="n">blog</span><span class="p">/</span><span class="n">content</span><span class="p">/</span><span class="n">script</span><span class="p">/</span><span class="n">Help</span><span class="p">.</span><span class="py">tests</span><span class="p">.</span><span class="n">ps1</span><span class="err">:</span><span class="mf">55</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">   <span class="n">at</span> <span class="p">&lt;</span><span class="n">ScriptBlock</span><span class="p">&gt;,</span> <span class="p">/</span><span class="n">Users</span><span class="p">/</span><span class="n">christianpiet</span><span class="p">/</span><span class="n">Documents</span><span class="p">/</span><span class="n">InSpark</span><span class="p">/</span><span class="n">Git</span><span class="p">/</span><span class="n">Personal</span><span class="p">/</span><span class="n">blog</span><span class="p">/</span><span class="n">content</span><span class="p">/</span><span class="n">script</span><span class="p">/</span><span class="n">Help</span><span class="p">.</span><span class="py">tests</span><span class="p">.</span><span class="n">ps1</span><span class="err">:</span><span class="mf">55</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">  <span class="p">[-]</span> <span class="n">Has</span> <span class="n">example</span> <span class="n">code</span> <span class="n">4ms</span> <span class="p">(</span><span class="n">4ms</span><span class="p">|</span><span class="n">0ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">   <span class="n">Expected</span> <span class="n">a</span> <span class="n">value</span><span class="p">,</span> <span class="n">but</span> <span class="n">got</span> <span class="vm">$null</span> <span class="n">or</span> <span class="n">empty</span><span class="p">.</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">   <span class="n">at</span> <span class="p">(</span><span class="nv">$commandHelp</span><span class="p">.</span><span class="py">Examples</span><span class="p">.</span><span class="py">Example</span> <span class="p">|</span> <span class="nb">Select-Object</span> <span class="n">-First</span> <span class="mf">1</span><span class="p">).</span><span class="py">Code</span> <span class="p">|</span> <span class="n">Should</span> <span class="o">-Not</span> <span class="n">-BeNullOrEmpty</span><span class="p">,</span> <span class="p">/</span><span class="n">Users</span><span class="p">/</span><span class="n">christianpiet</span><span class="p">/</span><span class="n">Documents</span><span class="p">/</span><span class="n">InSpark</span><span class="p">/</span><span class="n">Git</span><span class="p">/</span><span class="n">Personal</span><span class="p">/</span><span class="n">blog</span><span class="p">/</span><span class="n">content</span><span class="p">/</span><span class="n">script</span><span class="p">/</span><span class="n">Help</span><span class="p">.</span><span class="py">tests</span><span class="p">.</span><span class="n">ps1</span><span class="err">:</span><span class="mf">60</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">   <span class="n">at</span> <span class="p">&lt;</span><span class="n">ScriptBlock</span><span class="p">&gt;,</span> <span class="p">/</span><span class="n">Users</span><span class="p">/</span><span class="n">christianpiet</span><span class="p">/</span><span class="n">Documents</span><span class="p">/</span><span class="n">InSpark</span><span class="p">/</span><span class="n">Git</span><span class="p">/</span><span class="n">Personal</span><span class="p">/</span><span class="n">blog</span><span class="p">/</span><span class="n">content</span><span class="p">/</span><span class="n">script</span><span class="p">/</span><span class="n">Help</span><span class="p">.</span><span class="py">tests</span><span class="p">.</span><span class="n">ps1</span><span class="err">:</span><span class="mf">60</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">  <span class="p">[-]</span> <span class="n">Has</span> <span class="n">example</span> <span class="n">help</span> <span class="n">6ms</span> <span class="p">(</span><span class="n">6ms</span><span class="p">|</span><span class="n">0ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">   <span class="n">Expected</span> <span class="n">a</span> <span class="n">value</span><span class="p">,</span> <span class="n">but</span> <span class="n">got</span> <span class="vm">$null</span> <span class="n">or</span> <span class="n">empty</span><span class="p">.</span>
</span></span><span class="line"><span class="ln">36</span><span class="cl">   <span class="n">at</span> <span class="p">(</span><span class="nv">$commandHelp</span><span class="p">.</span><span class="py">Examples</span><span class="p">.</span><span class="py">Example</span><span class="p">.</span><span class="py">Remarks</span> <span class="p">|</span> <span class="nb">Select-Object</span> <span class="n">-First</span> <span class="mf">1</span><span class="p">).</span><span class="py">Text</span> <span class="p">|</span> <span class="n">Should</span> <span class="o">-Not</span> <span class="n">-BeNullOrEmpty</span><span class="p">,</span> <span class="p">/</span><span class="n">Users</span><span class="p">/</span><span class="n">christianpiet</span><span class="p">/</span><span class="n">Documents</span><span class="p">/</span><span class="n">InSpark</span><span class="p">/</span><span class="n">Git</span><span class="p">/</span><span class="n">Personal</span><span class="p">/</span><span class="n">blog</span><span class="p">/</span><span class="n">content</span><span class="p">/</span><span class="n">script</span><span class="p">/</span><span class="n">Help</span><span class="p">.</span><span class="py">tests</span><span class="p">.</span><span class="n">ps1</span><span class="err">:</span><span class="mf">65</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">   <span class="n">at</span> <span class="p">&lt;</span><span class="n">ScriptBlock</span><span class="p">&gt;,</span> <span class="p">/</span><span class="n">Users</span><span class="p">/</span><span class="n">christianpiet</span><span class="p">/</span><span class="n">Documents</span><span class="p">/</span><span class="n">InSpark</span><span class="p">/</span><span class="n">Git</span><span class="p">/</span><span class="n">Personal</span><span class="p">/</span><span class="n">blog</span><span class="p">/</span><span class="n">content</span><span class="p">/</span><span class="n">script</span><span class="p">/</span><span class="n">Help</span><span class="p">.</span><span class="py">tests</span><span class="p">.</span><span class="n">ps1</span><span class="err">:</span><span class="mf">65</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl"> <span class="n">Context</span> <span class="nb">Parameter</span> <span class="n">message</span>
</span></span><span class="line"><span class="ln">39</span><span class="cl">   <span class="p">[-]</span> <span class="n">Has</span> <span class="n">description</span> <span class="n">15ms</span> <span class="p">(</span><span class="n">12ms</span><span class="p">|</span><span class="n">3ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl">    <span class="n">Expected</span> <span class="n">a</span> <span class="n">value</span><span class="p">,</span> <span class="n">but</span> <span class="n">got</span> <span class="vm">$null</span> <span class="n">or</span> <span class="n">empty</span><span class="p">.</span>
</span></span><span class="line"><span class="ln">41</span><span class="cl">    <span class="n">at</span> <span class="nv">$parameterHelp</span><span class="p">.</span><span class="py">Description</span><span class="p">.</span><span class="py">Text</span> <span class="p">|</span> <span class="n">Should</span> <span class="o">-Not</span> <span class="n">-BeNullOrEmpty</span><span class="p">,</span> <span class="p">/</span><span class="n">Users</span><span class="p">/</span><span class="n">christianpiet</span><span class="p">/</span><span class="n">Documents</span><span class="p">/</span><span class="n">InSpark</span><span class="p">/</span><span class="n">Git</span><span class="p">/</span><span class="n">Personal</span><span class="p">/</span><span class="n">blog</span><span class="p">/</span><span class="n">content</span><span class="p">/</span><span class="n">script</span><span class="p">/</span><span class="n">Help</span><span class="p">.</span><span class="py">tests</span><span class="p">.</span><span class="n">ps1</span><span class="err">:</span><span class="mf">83</span>
</span></span><span class="line"><span class="ln">42</span><span class="cl">    <span class="n">at</span> <span class="p">&lt;</span><span class="n">ScriptBlock</span><span class="p">&gt;,</span> <span class="p">/</span><span class="n">Users</span><span class="p">/</span><span class="n">christianpiet</span><span class="p">/</span><span class="n">Documents</span><span class="p">/</span><span class="n">InSpark</span><span class="p">/</span><span class="n">Git</span><span class="p">/</span><span class="n">Personal</span><span class="p">/</span><span class="n">blog</span><span class="p">/</span><span class="n">content</span><span class="p">/</span><span class="n">script</span><span class="p">/</span><span class="n">Help</span><span class="p">.</span><span class="py">tests</span><span class="p">.</span><span class="n">ps1</span><span class="err">:</span><span class="mf">83</span>
</span></span><span class="line"><span class="ln">43</span><span class="cl">   <span class="p">[+]</span> <span class="n">Has</span> <span class="n">correct</span> <span class="p">[</span><span class="no">mandatory</span><span class="p">]</span> <span class="n">value</span> <span class="n">1ms</span> <span class="p">(</span><span class="n">1ms</span><span class="p">|</span><span class="n">0ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">44</span><span class="cl">   <span class="p">[+]</span> <span class="n">Has</span> <span class="n">correct</span> <span class="nb">parameter</span> <span class="nb">type </span><span class="n">6ms</span> <span class="p">(</span><span class="n">5ms</span><span class="p">|</span><span class="n">0ms</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">45</span><span class="cl"><span class="n">Tests</span> <span class="n">completed</span> <span class="k">in</span> <span class="n">315ms</span>
</span></span><span class="line"><span class="ln">46</span><span class="cl"><span class="n">Tests</span> <span class="n">Passed</span><span class="err">:</span> <span class="mf">9</span><span class="p">,</span> <span class="n">Failed</span><span class="err">:</span> <span class="mf">5</span><span class="p">,</span> <span class="n">Skipped</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">Inconclusive</span><span class="err">:</span> <span class="mf">0</span><span class="p">,</span> <span class="n">NotRun</span><span class="err">:</span> <span class="mf">0</span></span></span></code></pre></div><p>So we can see 9 tests passed (the ones for <code>New-DummyOutput</code>) and <code>New-DummyOutput2</code> still requires some love.</p>
<p>This approach works because everything in PowerShell is an object, even the help documentation. So, by creating a set of standards to which you want your code to submit, you can make a scaleable test suite for your modules.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this comprehensive guide, we&rsquo;ve explored the fundamentals of Pester, a powerful testing framework for PowerShell. We&rsquo;ve covered everything from setting up your environment and understanding the basic structure of Pester tests to leveraging advanced features like Discovery and <code>InModuleScope</code> for testing private functions.</p>
<p>By adopting Pester, you can ensure the reliability and maintainability of your PowerShell code, leading to fewer bugs and increased confidence in your PowerShell code. The ability to automate testing and validate your code against predefined standards is invaluable in any development workflow.</p>
<p>While this post provides a solid foundation, there&rsquo;s always more to learn. I encourage you to dive deeper into the Pester documentation, experiment with the examples provided, and explore the vast array of assertions and mocking capabilities that Pester offers. Happy testing!</p>
]]></content:encoded>
    </item>
    <item>
      <title>How to work with errors in PowerShell</title>
      <link>https://manbearpiet.github.io/posts/powershellerrors/</link>
      <pubDate>Wed, 20 Nov 2024 20:00:00 +0100</pubDate>
      <guid>https://manbearpiet.github.io/posts/powershellerrors/</guid>
      <description>&lt;p&gt;In my career, I&amp;rsquo;ve seen many different approaches to errors, all meant to address them.&#xA;However, none of these approaches provided a complete solution.&#xA;Either everything is dumped without a specific error, the script/function continues while it should error, or the wrong keywords are used, like &lt;strong&gt;break&lt;/strong&gt;.&#xA;Code with proper error handling is more reliable, easier to maintain, and makes it easier to understand what is happening.&#xA;In this blog, I will share what I have learned on how to create errors, how to handle errors, and what not to do.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>In my career, I&rsquo;ve seen many different approaches to errors, all meant to address them.
However, none of these approaches provided a complete solution.
Either everything is dumped without a specific error, the script/function continues while it should error, or the wrong keywords are used, like <strong>break</strong>.
Code with proper error handling is more reliable, easier to maintain, and makes it easier to understand what is happening.
In this blog, I will share what I have learned on how to create errors, how to handle errors, and what not to do.</p>
<h2 id="errors-">Errors ❌</h2>
<p>Errors are unexpected events that occur when executing code. For example, errors can happen when we fail to process objects. Luckily, you can anticipate errors. In PowerShell, everything is an object, so errors are objects, too. Errors contain the error message and a property called the exception.</p>
<p>I borrowed the definition of an exception from a <a href="https://learn.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-exceptions?view=powershell-7.4">Microsoft Learn page</a>, which adopted an article from Kevin Marquette his series &ldquo;Everything you want to know about *&rdquo;. In his post there is a pretty definition of an exception:</p>
<blockquote>
<p>An Exception is like an event that is created when normal error handling can&rsquo;t deal with the issue. Trying to divide a number by zero or running out of memory are examples of something that creates an exception. Sometimes the author of the code you&rsquo;re using creates exceptions for certain issues when they happen.</p></blockquote>
<p>Exceptions are objects in PowerShell, too. In some cases they even have specific types. They contain which line PowerShell failed where, with which argument, and the whole call stack (the &lsquo;stack&rsquo; of commands called to get to that point). So, exception objects are precious because they can show you information on what went wrong.</p>
<h2 id="error-types-">Error types 🆎</h2>
<p>In PowerShell, there are two types of errors: <strong>terminating</strong> and <strong>non-terminating</strong> errors.
A non-terminating error fails to process a request but doesn&rsquo;t stop processing altogether.
For example, if you copy the contents of a directory into another directory and it fails to copy one item, should it stop copying all other files? With a non-terminating error, it would continue, but a terminating error will stop all further execution.</p>
<p>When a terminating error occurs while executing a function, it stops the code&rsquo;s execution.
Depending on the specified <strong>ErrorAction</strong> or <strong>ErrorActionPreference</strong> setting, PowerShell will stop running the rest of the script, function, or runspace.
By changing the <strong>ErrorAction</strong> or <strong>ErrorActionPreference</strong> to <strong>Stop</strong>, you can change the behavior of errors from non-terminating to terminating.</p>
<p>The fastest way to understand what I mean is by considering the following code:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Write-Filler</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">([</span><span class="nb">Parameter</span><span class="p">(</span><span class="na">ValueFromPipeline</span><span class="p">)]</span><span class="nv">$Imnotused</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;I am filler&#34;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Write-NonTerminatingError</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="nb">Write-Error</span> <span class="n">-Message</span> <span class="s2">&#34;This is a non-terminating error&#34;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;This is inside of the function after the non-terminating error&#34;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Write-TerminatingError</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="nb">Write-Error</span> <span class="n">-Message</span> <span class="s2">&#34;This is a terminating error&#34;</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;This is inside of the function after the terminating error&#34;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="nb">Write-Host</span> <span class="s2">&#34;Start&#34;</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">
</span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="nb">Write-NonTerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="nb">Write-TerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">
</span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="nb">Write-Host</span> <span class="s2">&#34;End&#34;</span></span></span></code></pre></div><p>In the code above, I wrote an empty filler function to show that pipeline processing continues. I also wrapped all the error messages in functions for the same argument.</p>
<p>When you run this code, you can see that the code inside of the function <strong>Write-NonTerminatingError</strong> is still executed even after the error because it&rsquo;s a non-terminating error. PowerShell also executes the command that happens after the <strong>|</strong> pipe character.
When code executing reaches <strong>Write-TerminatingError</strong>, the code runs up to <strong>Write-Error</strong>-statement inside the function, with the <strong>ErrorAction</strong> value of <strong>Stop</strong> specified.
This <strong>ErrorAction</strong> Statement stops all further code execution when receiving an error.
The pattern to write a terminating error this way is uncommon, but using the <strong>throw</strong> statement combined with <strong>try/catch</strong> is more common. I&rsquo;ll continue on that later.</p>
<h2 id="statement-terminating-error-">Statement terminating error 💬</h2>
<p>There is a way to throw a statement terminating error, meaning it won&rsquo;t continue processing that specific line, but it will continue with the rest of the script.
You can create this type of statement terminating error within your function by typing <code>$PSCmdlet.ThrowTerminatingError()</code>. This method on the <strong>$PSCmdlet</strong>-object, which is available in cmdlets/advanced functions, has a specific argument/overload to provide an ErrorRecord-object.
The neat thing about this way of creating a statement terminating error is that it terminates the statement but not all other processing after the statement.</p>
<p>Consider the following code addition to our previous codeblock, all of the arguments to <strong>ThrowTerminatingError</strong> aren&rsquo;t relevant, but the <strong>$PSCmdlet.ThrowTerminatingError</strong> and <strong>Write-Host</strong> are:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Write-StatementTerminatingError</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ThrowTerminatingError</span><span class="p">(</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"> <span class="p">[</span><span class="no">System.Management.Automation.ErrorRecord</span><span class="p">]::</span><span class="n">new</span><span class="p">(</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"> <span class="p">[</span><span class="no">Exception</span><span class="p">]::</span><span class="n">new</span><span class="p">(</span><span class="s2">&#34;This is a statement terminating error&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">            <span class="s1">&#39;ErrorID&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"> <span class="p">[</span><span class="no">System.Management.Automation.ErrorCategory</span><span class="p">]::</span><span class="n">OperationStopped</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">            <span class="s1">&#39;TargetObject&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"> <span class="p">)</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;This is inside of the function after the statement terminating error&#34;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="s2">&#34;Start&#34;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="nb">Write-NonTerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="nb">Write-StatementTerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="nb">Write-TerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="s2">&#34;End&#34;</span></span></span></code></pre></div><p>When executing this code, it reacted like a non-terminating error. You couldn&rsquo;t read the message after the statement-terminating error in the output, nor did it execute/output <strong>Write-Filler</strong> its statement. It just stops the code in that function and pipeline processing. However, execution does continue on the rest of the script since it ran <strong>Write-TerminatingError</strong>.</p>
<p>Using statement-terminating errors can be very convenient if you create functions for a script or module, which should stop the processing of the pipeline. By using statement-terminating errors you leave the decision to stop processing altogether up to the user.
Since statement-terminating errors can only be used in advanced functions (functions with <code>[CmdletBinding()]</code> and/or <code>param()</code> in them), you can always specify whether you want the script to stop running by setting up <strong>ErrorAction</strong> on that line or changing the <strong>ErrorActionPreference</strong>.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-pwsh" data-lang="pwsh"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Write-StatementTerminatingError</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span> <span class="p">|</span> <span class="nb">Write-Filler</span></span></span></code></pre></div><p>I use statement terminating errors a lot during module development. I only use &rsquo;true&rsquo; terminating errors when continuing is impossible or potentially destructive. So if you can&rsquo;t get a token or refresh it, or when you can&rsquo;t connect even after retries, it&rsquo;s futile to continue. I haven&rsquo;t found a use case for implementing non-terminating errors.</p>
<h2 id="throw-">throw ⚾️</h2>
<p>Now, you might&rsquo;ve wondered, but what about <strong>throw</strong>? Well, <strong>throw</strong> causes a terminating error. In the previous section I referenced the following codeblock:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Write-TerminatingError</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">    <span class="nb">Write-Error</span> <span class="n">-Message</span> <span class="s2">&#34;This is a terminating error&#34;</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;This is inside of the function after the terminating error&#34;</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>The <strong>-ErrorAction Stop</strong> argument to a function creating an error will stop execution. Since Write-Error creates an error upon execution (duh) and the <strong>ErrorAction</strong> is set to <strong>Stop</strong>, PowerShell terminates the processing. It can be inconvenient to spot the <strong>ErrorAction</strong> if it&rsquo;s a long error message, especially when an alias is used like <strong>—ea</strong> (please just auto-resolve these in VSCode using <strong>ALT+SHIFT+E</strong>; thank you for teaching me this, Barbara Forbes).</p>
<p>That is where <strong>throw</strong> comes in; if you read <strong>throw</strong> in a script, you know it&rsquo;s a full stop if it hits that code. If <strong>throw</strong> is used within a script outside of a <strong>try/catch</strong> block it&rsquo;ll generate a <strong>ScriptHalted</strong> error and stop all the things. You&rsquo;ll see the following:
<strong>Exception: ScriptHalted</strong>, which is not very helpful. Luckily, <strong>throw</strong> will accept expressions like error messages similar to Write-Error but can also accept objects as arguments.</p>
<p>In the previously mentioned script, we can replace the terminating error of <strong>Write-Error -ErrorAction Stop</strong> with the more commonly used <strong>throw</strong>. <strong>throw</strong> will behave similarly to what we had earlier:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Write-TerminatingError</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="k">throw</span> <span class="s2">&#34;This is a terminating error&#34;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;This is inside of the function after the terminating error&#34;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="s2">&#34;Start&#34;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="nb">Write-NonTerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="nb">Write-StatementTerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="nb">Write-TerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="s2">&#34;End&#34;</span></span></span></code></pre></div><p><strong>throw</strong> is affected by <strong>ErrorAction</strong>/<strong>ErrorActionPreference</strong>. So be cautious when using <strong>Ignore</strong> and <strong>SilentlyContinue</strong> as this can create unexpected behavior.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Do-Stuff</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="k">throw</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;I come after the big error&#34;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="s2">&#34;Start&#34;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="nb">Do-Stuff</span> <span class="n">-ErrorAction</span> <span class="n">Ignore</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="s2">&#34;I am also executed, weird right?&#34;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="s2">&#34;End&#34;</span></span></span></code></pre></div><p>While terminating errors can occur within functions or scripts, it&rsquo;s up to us to catch those. In some cases, if something fails, you might want to retry it, create a ticket, log something specific to a log, or close a connection, but that&rsquo;s all dependent on what type of error happened, right?</p>
<h2 id="trycatch-">try/catch 🎣</h2>
<p><strong>try/catch</strong> is a functionality you can use to prepare and enact on terminating errors. The <strong>try</strong> part is a script block in which you assume (terminating) errors could happen.
If terminating errors occur within the script block, processing of the code within the <strong>try</strong> block is terminated, and the error record, with its exception property, is passed to the <strong>catch</strong> script block as the pipeline item (<strong>$_</strong> or <strong>$PSItem</strong>).</p>
<p>In the following code, we&rsquo;d want to know more about a specific directory and its contents only when something goes wrong. The catch block is an excellent way to do so:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;Start try&#34;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="nb">Get-Item</span> <span class="s2">&#34;LegoMilleniumFalcon&#34;</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;End try&#34;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;Start catch&#34;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;ErrorItemName: </span><span class="p">$(</span><span class="nv">$_</span><span class="p">.</span><span class="py">Exception</span><span class="p">.</span><span class="n">ItemName</span><span class="p">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="nb">Get-ChildItem</span> <span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="py">Exception</span><span class="p">.</span><span class="py">ItemName</span> <span class="p">|</span> <span class="nb">Split-Path</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="k">throw</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>I tried to find a <strong>LegoMilleniumFalcon</strong> item, but PowerShell couldn&rsquo;t find it. However, <strong>Get-Item</strong> doesn&rsquo;t throw a non-terminating error when it cannot find an item. That is convenient and nice of the devs, but if we want to stop all processing and find out why, we must access the catch block. To do so we need to make our script or Get-Item&rsquo;s error behavior to be terminating. By setting the <strong>-ErrorAction Stop</strong>, we change the non-terminating error to terminating so we can enter the catch block for more information.</p>
<p>If you executed this code and you read <strong>Write-Host &ldquo;End try&rdquo;</strong> you either have a <strong>LegoMilleniumFalcon</strong> file or directory in your machine, or you changed the <strong>ErrorAction</strong> (oh you). But in all other cases, you can see that PowerShell failed to catch the item, the catch was started (just for demo purposes), which item failed to process, and what the contents of the directory that failed were. If the directory is non-existent, <strong>Get-ChildItem</strong> will throw a non-terminating error.</p>
<p>The sharpest among you saw that we have <strong>throw</strong> in the <strong>catch</strong> block creating another terminating error, so our script stops after that statement. Also, you might&rsquo;ve noticed that we didn&rsquo;t provide another argument to <strong>throw</strong>. If <strong>throw</strong> has no arguments within a <strong>catch</strong> block, it&rsquo;ll rethrow the error record it was called with. So the error record in <strong>$_</strong>/<strong>$PSItem,</strong> available in the catch block, will be rethrown. Rethrowing can be confusing; submitting a comment might be nice.</p>
<p>You can also catch specific exceptions, the error-object contains the exception-object, but that&rsquo;s also a specific type. If you&rsquo;re debugging and want specific handling for this type of exception, you can get the type with:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nv">$_</span><span class="p">.</span><span class="py">Exception</span><span class="p">.</span><span class="py">gettype</span><span class="p">().</span><span class="n">Fullname</span></span></span></code></pre></div><p>Doing so allows us to do the following:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;Start try&#34;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="nb">Get-Item</span> <span class="s2">&#34;LegoMilleniumFalcon&#34;</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;End try&#34;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="p">}</span> <span class="k">catch</span> <span class="p">[</span><span class="no">System.Management.Automation.ItemNotFoundException</span><span class="p">]{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;ErrorItemName:&#34;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="nb">Write-Host</span> <span class="nv">$_</span><span class="p">.</span><span class="py">Exception</span><span class="p">.</span><span class="py">ItemName</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="nb">Get-ChildItem</span> <span class="s1">&#39;blablbla&#39;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="k">throw</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;Start generic catch&#34;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="k">throw</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>Catching specific exception types is very handy if the implementation of your function implements specific exception types.</p>
<p>Try/catch as a mechanism is very handy because you can enclose each section of your code within a try statement. Sometimes you don&rsquo;t want your script to stop, but just to throw a statement terminating error. In that case you can apply what you learned earlier and use a statement terminating error that reuses the error record of the failed action:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Get-NotSoImportantThing</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="nb">Write-Host</span> <span class="s2">&#34;Start try&#34;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="nb">Get-Item</span> <span class="s2">&#34;Thisisnotthefileyouarelookingfor&#34;</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="nb">Write-Host</span> <span class="s2">&#34;End try&#34;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"> <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ThrowTerminatingError</span><span class="p">(</span><span class="nv">$_</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="s2">&#34;Start&#34;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="nb">Get-NotsoImportantThing</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="s2">&#34;Very Important code&#34;</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="s2">&#34;End&#34;</span></span></span></code></pre></div><p>Lastly, I also use <strong>throw</strong> in scripts in case I enter an unhappy code path in my script that doesn&rsquo;t generate an error but is something we don&rsquo;t want to continue on.
But as a reminder, when developing functions/cmdlets you want to leave that decision up to the user and a statement terminating error is almost always the way to go.</p>
<p>For example, I have a script that processes a JSON file and misses a specific property. If I didn&rsquo;t check the JSON manually beforehand, the processing of the JSON will potentially error out later on, but I don&rsquo;t want to exit thinking it was completed successfully. In that case, you can choose to throw a terminating error with an error message or with a fully custom-made error record.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nv">$jsonConverted</span> <span class="p">=</span> <span class="sh">@&#39;
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="sh">{
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="sh"> &#34;aryaStark&#34;: {
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="sh"> &#34;knows&#34;: &#34;needle&#34;
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="sh"> },
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="sh"> &#34;johnSnow&#34;: {
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="sh"> &#34;knows&#34;: null
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="sh"> }
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="sh">}
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="sh">&#39;@</span> <span class="p">|</span> <span class="nb">ConvertFrom-Json</span> <span class="n">-AsHashtable</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="k">foreach</span> <span class="p">(</span><span class="nv">$key</span> <span class="k">in</span> <span class="nv">$jsonConverted</span><span class="p">.</span><span class="n">Keys</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="k">if</span> <span class="p">([</span><span class="no">String</span><span class="p">]::</span><span class="n">IsNullOrWhiteSpace</span><span class="p">(</span><span class="nv">$jsonConverted</span><span class="p">[</span><span class="nv">$key</span><span class="p">].</span><span class="n">knows</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="k">throw</span> <span class="s2">&#34;</span><span class="nv">$key</span><span class="s2"> knows nothing&#34;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">        <span class="nb">Write-Host</span> <span class="s2">&#34;</span><span class="nv">$key</span><span class="s2"> knows </span><span class="p">$(</span><span class="nv">$jsonConverted</span><span class="p">[</span><span class="nv">$key</span><span class="p">].</span><span class="n">knows</span><span class="p">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><h1 id="custom-errors">Custom errors</h1>
<p>Sometimes, your scripts require you to create a typed exception object to do specific catches.
You can do so with the code I referenced earlier:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Write-StatementTerminatingError</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ThrowTerminatingError</span><span class="p">(</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"> <span class="p">[</span><span class="no">System.Management.Automation.ErrorRecord</span><span class="p">]::</span><span class="n">new</span><span class="p">(</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"> <span class="p">[</span><span class="no">Exception</span><span class="p">]::</span><span class="n">new</span><span class="p">(</span><span class="s2">&#34;This is a statement terminating error&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">            <span class="s1">&#39;ErrorID&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"> <span class="p">[</span><span class="no">System.Management.Automation.ErrorCategory</span><span class="p">]::</span><span class="n">OperationStopped</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">            <span class="s1">&#39;TargetObject&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"> <span class="p">)</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;This is inside of the function after the statement terminating error&#34;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="s2">&#34;Start&#34;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="nb">Write-StatementTerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="s2">&#34;End&#34;</span></span></span></code></pre></div><p>The type of exception created with this error ErrorRecord/Error-object, is <strong>System.Exception</strong>.
Keep in mind that types aren&rsquo;t exported in PowerShell script modules.
To do so, you must create a binary module in C# to create a custom type you can catch up on in a <strong>catch</strong> block.
Therefore if you&rsquo;re not proficient in C#, you could use a hacky pattern:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Write-StatementTerminatingError</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;Start of your function code&#34;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"> <span class="nv">$ThisIsBrokenBeyondFixing</span> <span class="p">=</span> <span class="vm">$true</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nv">$ThisIsBrokenBeyondFixing</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">            <span class="k">throw</span> <span class="s2">&#34;aah this run of Write-StatementTerminatingError is broken beyond automatic repair&#34;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"> <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ThrowTerminatingError</span><span class="p">(</span><span class="nv">$_</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;This is inside of the function after the statement terminating error&#34;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="s2">&#34;Start&#34;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">    <span class="nb">Write-StatementTerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="py">Exception</span><span class="p">.</span><span class="py">Message</span> <span class="o">-eq</span> <span class="s2">&#34;aah this run of Write-StatementTerminatingError is broken beyond automatic repair&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">        <span class="nb">Write-host</span> <span class="s2">&#34;Inside of the specific catchblock&#34;</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">        <span class="k">throw</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="s2">&#34;End&#34;</span></span></span></code></pre></div><p>By throwing inside the function&rsquo;s <strong>try</strong> block, you create an error record for an exception containing a specific message or object.
The function&rsquo;s <strong>catch</strong> block can then be matched with if-logic to create a similar behavior.
Alternatively, you can learn C# and create your own types of exceptions. Do note that this is hacky; I&rsquo;d discuss this with my team if you want this type of hackyness in your codebase.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Handling errors effectively in PowerShell is crucial for creating robust and reliable scripts. Understanding the difference between terminating and non-terminating errors allows you to control the flow of your scripts more precisely. Using <strong>Write-Error</strong> with <strong>-ErrorAction</strong>, <strong>$PSCmdlet.ThrowTerminatingError()</strong>, and <strong>throw</strong> statements, you can manage how errors are handled and ensure that your scripts behave as expected in various error scenarios.</p>
<p>The <strong>try/catch</strong> mechanism provides a structured way to handle terminating errors. It allows you to perform specific actions when errors occur and maintain control over your script&rsquo;s execution. By catching specific exceptions, you can tailor your error handling to different types of errors, making your scripts more resilient and easier to debug.</p>
<p>Custom exceptions and advanced error-handling techniques, such as creating custom exception objects or using statement-terminating errors, enhance your ability to manage errors in complex scripts and modules.
But they might require you to learn C# or do hacky things. Either way discuss with your team what suits your codebase best and how you handle these things. Or even better, tell us at the (<a href="https://aka.ms/PSDiscord">PowerShell Discord</a>) or your PowerShell user group.</p>
<p>Applying these error techniques allows you to create PowerShell scripts that handle errors gracefully, provide meaningful feedback, and continue processing when appropriate, leading to more reliable and maintainable code.</p>
<blockquote>
<p>I couldn&rsquo;t have written this post without the guidance of the true pro&rsquo;s on the PowerShell discord through the years. Thank you all</p></blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Complete your resource groups and resource parameter values like Azure PowerShell</title>
      <link>https://manbearpiet.github.io/posts/azureargumentcompleters/</link>
      <pubDate>Wed, 20 Nov 2024 13:00:00 +0100</pubDate>
      <guid>https://manbearpiet.github.io/posts/azureargumentcompleters/</guid>
      <description>&lt;p&gt;This week I was busy with some module development, and I was wondering how the user experience could be more user-friendly.  When you use the Azure PowerShell modules you get nice autocompletion on resource groups and resources, so I was wondering if I could give the same comfort to my module and script users.&#xA;With this blog post I will show you, how I implement Azure PowerShell their argument completers, to give users of my scripts and modules this same experience with my parameters.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>This week I was busy with some module development, and I was wondering how the user experience could be more user-friendly.  When you use the Azure PowerShell modules you get nice autocompletion on resource groups and resources, so I was wondering if I could give the same comfort to my module and script users.
With this blog post I will show you, how I implement Azure PowerShell their argument completers, to give users of my scripts and modules this same experience with my parameters.</p>
<h2 id="argument-completers">Argument Completers?</h2>
<p>If our users interact with your script or module (outside the context of a pipeline), it can be convenient to give them relevant tab completion results on parameters.</p>
<p>I&rsquo;ve dealt with custom argument completers for parameter arguments before, I read the excellent <a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_argument_completion?view=powershell-7.4">about_Functions_Argument_Completion article</a> and thought I could do this the dumb way or the lazy way.
In the Learn article it&rsquo;s explained that you can either hardcode the options in a <code>ValidateSet</code>/<code>ArgumentCompletions</code> attribute decorator, use an argument completer/scriptblock to gather the autocomplete options, or use a class-based argument completer.</p>
<h3 id="source">Source</h3>
<p>The first option is not feasible since we don&rsquo;t know which resource exist where for each user, so that option is out. The sub-optimal way would be calling <code>Get-AzResource</code> in a scriptblock on everything and then offering the result as tab completion options. But the lazy way would be to just use the already made argument completers made by Azure PowerShell. The argument completers used in Azure PowerShell are functional - we all use them every day!</p>
<p>The resource argument completers are stored in the Azure PowerShell modules source code at <a href="https://github.com/Azure/azure-powershell-common/tree/main/src/ResourceManager/Version2016_09_01/ArgumentCompleters">the GitHub repo</a>. I asked for some help on why this works on the PowerShell discord, join us at <a href="https://aka.ms/PSDiscord">https://aka.ms/PSDiscord</a>, and I learned that the Azure PowerShell modules implemented these in public types, so if we load the correct module(s) we should be able to use these.
If you do implement argument completion it using these existing completers, mind that this feature is depending on the fact the types in the Azure Powershell Module are scoped to public for now, but Microsoft may decide otherwise in the future.</p>
<p>The directory has the following files containing argument completer classes:</p>
<ul>
<li>LocationCompleter.cs
<ul>
<li>The <code>LocationCompleter</code> attribute will allow the user to autocomplete the -Location parameter of a cmdlet with valid locations (as determined by the list of ResourceTypes given)</li>
</ul>
</li>
<li>ResourceGroupCompleter.cs
<ul>
<li>The <code>ResourceGroupCompleter</code> attribute will allow the user to autocomplete the <code>-ResourceGroup</code> parameter of a cmdlet with valid resource groups</li>
</ul>
</li>
<li>ResourceIdCompleter.cs
<ul>
<li>The <code>ResourceIdCompleter</code> attribute will allow the user to autocomplete the <code>-ResourceId</code> parameter of a cmdlet with valid resource identifiers (as determined by the list of ResourceTypes given)</li>
</ul>
</li>
<li>ResourceNameCompleter.cs
<ul>
<li>The <code>ResourceNameCompleter</code> attribute will allow the user to autocomplete the <code>-Location</code> parameter of a cmdlet with valid resource names (as determined by the list of ResourceTypes given)</li>
</ul>
</li>
<li>ResourceTypeCompleter.cs
<ul>
<li>The <code>ResourceTypeCompleter</code> attribute will allow the user to autocomplete the <code>-ResourceType</code> parameter of a cmdlet with valid resource types</li>
</ul>
</li>
<li>ScopeCompleter.cs
<ul>
<li>The <code>ScopeCompleter</code> class will provide a list of scopes that are available to the user. This will then be available to the user to tab through.</li>
</ul>
</li>
</ul>
<h2 id="lets-implement">Let&rsquo;s implement</h2>
<p>In the following section I&rsquo;ll give some examples, only the <code>Microsoft.Azure.Commands.ResourceManager.Common.ArgumentCompleters.*</code> attributes and the names of the parameters in these sections are relevant. Tab completion will work if you paste in these code sections and try it for yourself.</p>
<p>I do want to mention, <strong>never blindly copy-paste code you find</strong>, always read and understand it before you do, you never know what it might do.</p>
<p>The code below requires you to already have Azure PowerShell modules imported, like <code>Az.Accounts</code>, and you have a signed in session (which requires the former).</p>
<h3 id="resource-group-names">Resource Group names</h3>
<p>The simplest example using is the completer from <code>ResourceGroupCompleter.cs</code>. If you want to provide the option to give tab-completion to users for the resource group names you can do:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Get-ResourceGroup</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="c"># This attribute will allow the user to autocomplete with valid resource groups</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="p">[</span><span class="n">Microsoft</span><span class="p">.</span><span class="py">Azure</span><span class="p">.</span><span class="py">Commands</span><span class="p">.</span><span class="py">ResourceManager</span><span class="p">.</span><span class="py">Common</span><span class="p">.</span><span class="py">ArgumentCompleters</span><span class="p">.</span><span class="py">ResourceGroupCompleterAttribute</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="p">[</span><span class="no">string</span><span class="p">]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="nv">$ResourceGroupName</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><figure><img src="/images/azureargumentcompleters/rsg.png"
    alt="Tab completion for Resource Group names">
</figure>

<p>The resource group completer is the simplest implementation, since it doesn&rsquo;t require any additional arguments. It just works when you press tab to show all options, or if you type the start of a resource group name and it&rsquo;ll autocomplete.</p>
<h3 id="resource-types">Resource types</h3>
<p>This example show autocompletion for resource types available, it isn&rsquo;t context aware of what resource types you&rsquo;ve implemented:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Get-ResourceTypes</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="c"># This attribute will allow the user to autocomplete with valid resource types</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="p">[</span><span class="n">Microsoft</span><span class="p">.</span><span class="py">Azure</span><span class="p">.</span><span class="py">Commands</span><span class="p">.</span><span class="py">ResourceManager</span><span class="p">.</span><span class="py">Common</span><span class="p">.</span><span class="py">ArgumentCompleters</span><span class="p">.</span><span class="py">ResourceTypeCompleterAttribute</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="nv">$ResourceType</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><figure><img src="/images/azureargumentcompleters/alltypes.png"
    alt="Tab completion for Resource types">
</figure>

<p>So if we try to autocomplete the <code>ResourceType</code>-parameter for the resourcetypes ending with <code>Microsoft.Web/s</code> it&rsquo;ll bring up the following options if we press <code>&lt;TAB&gt;</code> twice.
I trimmed the output, but you get the idea.</p>
<figure><img src="/images/azureargumentcompleters/webtypes.png"
    alt="Tab completion for types starting with microsoft.web/s">
</figure>

<h3 id="scopes">Scopes</h3>
<p>Scopes is also a cool one to enumerate all the scopes available in the current context (subscription).</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Get-AzureResourceScopes</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="c"># This attribute will allow the user to autocomplete with valid scopes in current context</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="p">[</span><span class="n">Microsoft</span><span class="p">.</span><span class="py">Azure</span><span class="p">.</span><span class="py">Commands</span><span class="p">.</span><span class="py">ResourceManager</span><span class="p">.</span><span class="py">Common</span><span class="p">.</span><span class="py">ArgumentCompleters</span><span class="p">.</span><span class="py">ScopeCompleterAttribute</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="nv">$Scope</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>If you want to know what options are available, without pressing tab, you can press <code>CTRL</code> + <code>SPACEBAR</code>.
That way it&rsquo;ll show all the options, it does not work with many options.</p>
<figure><img src="/images/azureargumentcompleters/scopes.png"
    alt="Tab completion for deployment scopes">
</figure>

<h3 id="resource-names">Resource names</h3>
<p>The resource names completer requires additional arguments specified in the <code>ResourceNameCompleter.cs</code>-file. you must supply the Azure resource type you&rsquo;re looking for and <code>ResourceGroupName</code> it works like a breeze. I was wondering how the parameter is aware of the value of another parameter it&rsquo;s value, and then I learned about the <a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_argument_completion?view=powershell-7.4#argumentcompleter-script-block">FakeBoundParameters</a> and relearned about <code>PSBoundParameters</code>.</p>
<p>The code below shows you how you could fetch your Log Analytics workspaces. You could alter this to any resourcetype.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Get-ResourceNames</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="c"># This attribute will allow the user to autocomplete with valid resource groups</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="p">[</span><span class="n">Microsoft</span><span class="p">.</span><span class="py">Azure</span><span class="p">.</span><span class="py">Commands</span><span class="p">.</span><span class="py">ResourceManager</span><span class="p">.</span><span class="py">Common</span><span class="p">.</span><span class="py">ArgumentCompleters</span><span class="p">.</span><span class="py">ResourceGroupCompleterAttribute</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="p">[</span><span class="no">string</span><span class="p">]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="nv">$ResourceGroupName</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="c"># This attribute will allow the user to autocomplete resourcenames within the supplied resourcegroups</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">        <span class="p">[</span><span class="n">Microsoft</span><span class="p">.</span><span class="py">Azure</span><span class="p">.</span><span class="py">Commands</span><span class="p">.</span><span class="py">ResourceManager</span><span class="p">.</span><span class="py">Common</span><span class="p">.</span><span class="py">ArgumentCompleters</span><span class="p">.</span><span class="py">ResourceNameCompleterAttribute</span><span class="p">(</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">            <span class="s2">&#34;Microsoft.OperationalInsights/workspaces&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">            <span class="s2">&#34;ResourceGroupName&#34;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="p">)]</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">        <span class="nv">$WorkspaceName</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p><figure><img src="/images/azureargumentcompleters/names.png"
    alt="Tab completion for resource names">
</figure>

<figure><img src="/images/azureargumentcompleters/rsgscopedname.png"
    alt="Tab completion for resource names">
</figure>
</p>
<h3 id="resource-id-completer">Resource Id completer</h3>
<p>This one was one I find really cool, you can autocomplete resource-ids of a specified type.
In many cases you want to have the full resource-id of an Azure resource, but tab completion is mostly offered to just the resource group or the resource name. Which means you&rsquo;d have to do another call to find the resource-id. With this completer you can just offer tabcompletion of the whole id, yay!</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Get-ResourceID</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="c"># This attribute will allow the user to autocomplete resource-ids for the specified resource type</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="p">[</span><span class="n">Microsoft</span><span class="p">.</span><span class="py">Azure</span><span class="p">.</span><span class="py">Commands</span><span class="p">.</span><span class="py">ResourceManager</span><span class="p">.</span><span class="py">Common</span><span class="p">.</span><span class="py">ArgumentCompleters</span><span class="p">.</span><span class="py">ResourceIdCompleter</span><span class="p">(</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">            <span class="s2">&#34;Microsoft.OperationalInsights/workspaces&#34;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="p">)]</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="p">[</span><span class="no">string</span><span class="p">]</span><span class="nv">$ResourceId</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><figure><img src="/images/azureargumentcompleters/rid.png"
    alt="Tab completion for resource ids">
</figure>

<blockquote>
<p>Note: I&rsquo;ve discussed this post before publishing with the fantastic Mathias (@IISResetMe) from the PowerShell discord, he proofread the article, for which thanks again. Mathias added that the <code>Attribute</code> suffix in the typenames are automatically added by the PowerShell parser, when searching for typenames in syntactical contexts. So in this context, these will be handled the same:</p></blockquote>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-pwsh" data-lang="pwsh"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">[</span><span class="n">Microsoft</span><span class="p">.</span><span class="py">Azure</span><span class="p">.</span><span class="py">Commands</span><span class="p">.</span><span class="py">ResourceManager</span><span class="p">.</span><span class="py">Common</span><span class="p">.</span><span class="py">ArgumentCompleters</span><span class="p">.</span><span class="py">ResourceNameCompleterAttribute</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="p">[</span><span class="n">Microsoft</span><span class="p">.</span><span class="py">Azure</span><span class="p">.</span><span class="py">Commands</span><span class="p">.</span><span class="py">ResourceManager</span><span class="p">.</span><span class="py">Common</span><span class="p">.</span><span class="py">ArgumentCompleters</span><span class="p">.</span><span class="py">ResourceNameCompleter</span><span class="p">()]</span></span></span></code></pre></div><h1 id="conclusion">Conclusion</h1>
<p>This is all there&rsquo;s to it. You do create a dependency on the Azure PowerShell modules and the fact that these are public types.
But these argument completers can be a very nice comfort feature/easy win for your user experience - you just have to decorate a parameter with a single or two attributes.</p>
<p>I hope you learned as much as I did and that your user may enjoy fancy tab completion.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Necromancing my blog</title>
      <link>https://manbearpiet.github.io/posts/necromancing-blog/</link>
      <pubDate>Wed, 04 Oct 2023 12:47:03 +0200</pubDate>
      <guid>https://manbearpiet.github.io/posts/necromancing-blog/</guid>
      <description>&lt;h2 id=&#34;starting-to-blog-again&#34;&gt;Starting to blog again&lt;/h2&gt;&#xA;&lt;p&gt;The last few years have been great for me.&lt;/p&gt;&#xA;&lt;p&gt;My girlfriend and I bought a house 🏡, and we&amp;rsquo;ve done all sorts of DIY I wouldn&amp;rsquo;t dream of being able to.&#xA;I learned it&amp;rsquo;s great fun to do because you can immediately see/bear the the fruits of your work.&#xA;It was tiring, which was one of the reasons I didn&amp;rsquo;t pursue blogging anymore.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve had success with my team, I started a new team with a valued colleague of mine, primarily focused on Deployment and Automation 🚀 (DNA).&#xA;This was a large step from the usual break/fix day to day of my previous team, although we were mostly involved in building new solutions.&#xA;So, more PowerShell, Bicep, Azure DevOps, and GitHub for us now, although I see more and more cool stuff coming from our Managed Services team, I could learn a lot from them. Our DNA-team is growing and we&amp;rsquo;ve some new challenges we want to overcome, and goals and we want to accomplish.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="starting-to-blog-again">Starting to blog again</h2>
<p>The last few years have been great for me.</p>
<p>My girlfriend and I bought a house 🏡, and we&rsquo;ve done all sorts of DIY I wouldn&rsquo;t dream of being able to.
I learned it&rsquo;s great fun to do because you can immediately see/bear the the fruits of your work.
It was tiring, which was one of the reasons I didn&rsquo;t pursue blogging anymore.</p>
<p>I&rsquo;ve had success with my team, I started a new team with a valued colleague of mine, primarily focused on Deployment and Automation 🚀 (DNA).
This was a large step from the usual break/fix day to day of my previous team, although we were mostly involved in building new solutions.
So, more PowerShell, Bicep, Azure DevOps, and GitHub for us now, although I see more and more cool stuff coming from our Managed Services team, I could learn a lot from them. Our DNA-team is growing and we&rsquo;ve some new challenges we want to overcome, and goals and we want to accomplish.</p>
<p>I&rsquo;ve had two challenges within my blog, one was that I was so hard-focused on the quality of posts that none of my drafts was good enough.
This meant that I had prior to this post, 12 draft articles on all kinds of things that just weren&rsquo;t up to standard, nor I had the motivation to get them there.</p>
<p>My other challenge was more or less related to that, I never seemed to have found peace with my past career change.
I&rsquo;ve had years of chasing a potential med-school position, but each time it just didn&rsquo;t work out, either financially or I didn&rsquo;t pass a certain test.
This duped my confidence in my capabilities to learn things and since then I more or less avoided challenges.
From time to time, I would find something cool in Azure or DevOps and learn a lot about it, as I was used to on all the med stuff, but it would fade away after that. My blogs followed this cadence, a sudden spike of motivation and, then nothing.</p>
<p>This, atop our moving houses and DIY things, led to no more blogging. But over the past few months, I found some renewed confidence again.
I made a little peace with my past and found some motivation to blog again. I also learned you can read all the fancy quotes on coping with failure as a topic, but you don&rsquo;t know until you know. My blogs don&rsquo;t have to be perfect, but if there might be some/any value in them for anyone, then it&rsquo;s there for them.</p>
<p>I dumped all my previous draft blogs and will start writing some new ones soon.
I have to do something with that paid-for domain anyway right 😄.
Lastly I moved to a new Hugo theme with minimal JS in it and removed tracking via Azure Application Insights.</p>
<figure><img src="/images/necromancing-blog/necro.png"
    alt="DALL-E Created Dark Wizard image">
</figure>

]]></content:encoded>
    </item>
    <item>
      <title>Using Azure Policy to configure your resources</title>
      <link>https://manbearpiet.github.io/posts/applying-guest-configuration-policy/</link>
      <pubDate>Wed, 25 Aug 2021 08:07:31 +0100</pubDate>
      <guid>https://manbearpiet.github.io/posts/applying-guest-configuration-policy/</guid>
      <description>&lt;h1 id=&#34;azure-policy-as-a-configuration-engine&#34;&gt;Azure Policy as a configuration engine?&lt;/h1&gt;&#xA;&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://manbearpiet.github.io/images/applying-guest-config/feature.png&#34;&#xA;    alt=&#34;Azure Policy&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;br&gt;&#xA; &lt;/p&gt;&#xA;&lt;h2 id=&#34;azure-policy-guest-configuration&#34;&gt;Azure Policy Guest Configuration&lt;/h2&gt;&#xA;&lt;p&gt;In a previous blog, I showed how to audit your GPO-contained settings&#xA;inside Azure VM&amp;rsquo;s using Azure Policy Guest Configuration. The packaging process&#xA;is a bit too much for some, and in some cases, you only need to perform a few&#xA;configuration settings. Luckily there are some settings you can already&#xA;configure with built-in policies. In this blog, I will show you what Azure&#xA;Policies are and how they are assigned. When you&amp;rsquo;ve read this post, you&amp;rsquo;ll be&#xA;able to assign Azure Policies to configure the state in your Azure environment and&#xA;your Virtual Machines.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="azure-policy-as-a-configuration-engine">Azure Policy as a configuration engine?</h1>
<p><figure><img src="/images/applying-guest-config/feature.png"
    alt="Azure Policy">
</figure>
<br>
 </p>
<h2 id="azure-policy-guest-configuration">Azure Policy Guest Configuration</h2>
<p>In a previous blog, I showed how to audit your GPO-contained settings
inside Azure VM&rsquo;s using Azure Policy Guest Configuration. The packaging process
is a bit too much for some, and in some cases, you only need to perform a few
configuration settings. Luckily there are some settings you can already
configure with built-in policies. In this blog, I will show you what Azure
Policies are and how they are assigned. When you&rsquo;ve read this post, you&rsquo;ll be
able to assign Azure Policies to configure the state in your Azure environment and
your Virtual Machines.</p>
<h2 id="assigning-policies-and-policy-initiatives">Assigning policies and policy initiatives</h2>
<h3 id="azure-policy">Azure Policy</h3>
<p>As a recap, Azure Policy is a service Microsoft offers to audit, configure,
and enforce the configuration of Azure resources to govern the state of your
Azure environment. You could say that they are the embodiment of the
&lsquo;desired state&rsquo; of your Azure resources. Azure Policies are defined within the
policy definitions. A policy definition (JSON) defines which resource types and
properties to check for and what effects are supported by
that policy.</p>
<p>Policy effects are operations, which are triggered if the Policy rules have
been violated. Policies can be identified by their unique &lsquo;policy
definition id&rsquo;. More information about Azure Policies can be found on <a href="https://docs.microsoft.com/en-us/azure/governance/policy/overview#overview">Microsoft Docs</a>.</p>
<p>Policy definitions are assigned to resources scopes (resourcegroup(s),
subscriptions or management groups). This assignment has a distinct name and a
policy effect is chosen. For example, when assigning an Azure
Policy which evaluates if Azure Key Vaults have soft-delete in place, you can
choose the action in that assignment to be <code>Deny</code>. This will deny new
resource deployments in the scope the policy is assigned to.</p>
<p>Some policy definitions allow for several effects, such as &ldquo;Audit&rdquo; or &ldquo;Deny&rdquo;.
During the assignment of the policy, you can supply what policy effect you want
executed in case the policy is violated. More information about Azure Policy effects can be
found at <a href="https://docs.microsoft.com/en-us/azure/governance/policy/concepts/effects">Microsoft Docs</a>.</p>
<h3 id="azure-policy-definition-id">Azure Policy Definition ID</h3>
<p>As mentioned earlier, policy definitions are referenced by their id. You can
search for policy- and initiative definitions, using their ID or display name on the Azure Portal.</p>
<figure><img src="/images/applying-guest-config/searchdefinition.png"
    alt="Search Azure Policy Definitions">
</figure>

<p>Azure <strong>built-in</strong> policies can be referenced at each level with the same id
(subscription and Management Group), so the definition id will always be the
same.</p>
<p>Be wary if you&rsquo;re creating <strong>custom policies</strong> and initiatives. These
are stored at the object and level you create them. So if you&rsquo;ve created a
custom policy definition at a Management Group scope, you can apply that to
that MG or resources scopes beneath the MG, but not in other scopes (not
contained beneath that MG).</p>
<p><figure><img src="/images/applying-guest-config/assignment.png"
    alt="Azure Policy Assignment">
</figure>
<br>
 </p>
<p>Another gotcha from the custom policies is that their policy definition id&rsquo;s
differ from built-in policy definitions. The policy definition id of a custom
policy has a reference to the resource scope where the policy definition is stored.</p>
<p>Built in policy definition id&rsquo;s look like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="ln">1</span><span class="cl">/providers/Microsoft.Authorization/policyDefinitions/6141c932-9384-44c6-a395-59e4c057d7c9</span></span></code></pre></div><p>vs. custom policy definitions id&rsquo;s</p>
<p>Custom policy definition (id) stored in a Management group:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="ln">1</span><span class="cl">/providers/Microsoft.Management/managementGroups/MGNAME/providers/Microsoft.Authorization/policyDefinitions/0d030380-eff5-415c-8ea0-b4bb4af4bd20</span></span></code></pre></div><p>Custom policy definition (id) stored in a subscription:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="ln">1</span><span class="cl">/subscriptions/0192d01f-1632-4c36-a89e-807d825b5017/providers/Microsoft.Authorization/policyDefinitions/15f09619-2135-47c9-8af6-1f6a271b8f0d</span></span></code></pre></div><p>Azure Policy Initiatives have a similar definition id, but just a small
difference (policySetDefinitions instead of policyDefinitions):</p>
<p>Built-in:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="ln">1</span><span class="cl">/providers/Microsoft.Authorization/policySetDefinitions/75714362-cae7-409e-9b99-a8e5075b7fad</span></span></code></pre></div><p>vs. custom</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="ln">1</span><span class="cl">/providers/Microsoft.Management/managementGroups/MGNAME/providers/Microsoft.Authorization/policySetDefinitions/84317eb8115a47af90ab703c</span></span></code></pre></div><h2 id="assigning-azure-policies">Assigning Azure Policies</h2>
<p>While Azure Policy Definitions are a tool to reach a state, the policy requires
a target resource scope to be applied. The Azure Policy assignment is a
configuration item which contains the following:</p>
<ul>
<li>What resource scope should the policy apply to</li>
<li>What exclusions should there be within the assigned scope</li>
<li>What policy is assigned</li>
<li>What is the name of the assignment</li>
<li>Should the policy be Enforced</li>
<li>Who assigned the policy</li>
<li>Parameter data for policies with parameters</li>
<li>Which Azure Region the Managed Identity should be deployed in (if using DINE/modify
policy effects)</li>
<li>What default text string to display when a resource is not compliant or if a
resource deployment is not compliant.</li>
</ul>
<p>There are multiple methods to assign policies to Azure resource scopes. In my
previous blog I showed how to assign policies using the Azure Portal. I like
using PowerShell, so I&rsquo;ll use that. More methods to assign Azure Policies can be
found on the <a href="https://docs.microsoft.com/en-us/azure/governance/policy/">Microsoft Docs</a> at the Quickstarts tab.</p>
<p>To make it extra interesting, let&rsquo;s configure objects we can&rsquo;t edit in the
Azure portal. For example, settings in a virtual machine OS.</p>
<h3 id="prerequisites">Prerequisites</h3>
<p>We do need to setup a few things before we can configure Azure Policy to make
changes to our VM&rsquo;s.</p>
<p>In your subscription(s):</p>
<ul>
<li>Must have registered the Guest Configuration Resource provider
<ul>
<li>You can do so with PowerShell using:
<ul>
<li><code>Register-AzResourceProvider -ProviderNamespace Microsoft.GuestConfiguration</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>On your VM resources:</p>
<ul>
<li>You must have the <strong>Azure Policy Guest Extension</strong> present on your VM&rsquo;s
<ul>
<li>Can be deployed with an initiative definition:
<ul>
<li><code>/providers/Microsoft.Authorization/policySetDefinitions/12794019-7a00-42cf-95c2-882eed337cc8</code></li>
</ul>
</li>
</ul>
</li>
<li>Have a <strong>System assigned Managed Identity</strong> for your VM
<ul>
<li>The same initiative can be used mentioned above</li>
</ul>
</li>
<li>VM must be a <a href="https://docs.microsoft.com/en-us/azure/governance/policy/concepts/guest-configuration#supported-client-types">supported client</a></li>
<li>Allow outbound traffic on TCP 443 to NSG-tags <code>AzureArcInfrastructure</code> and
<code>Storage</code> or use Private Link</li>
</ul>
<p>Having met all these requirements, we&rsquo;re all set to deploy built-in GC policies.
Documentation for the built-in GC policies is available at <a href="https://docs.microsoft.com/en-us/azure/governance/policy/samples/built-in-policies#guest-configuration">Microsoft Docs</a>.
There&rsquo;s also a built-in <a href="https://docs.microsoft.com/en-us/azure/governance/policy/samples/built-in-initiatives#guest-configuration">policy initiative</a>.</p>
<h2 id="assigning-policies">Assigning policies</h2>
<p>To show the concept, I&rsquo;m using the
<code>Audit Windows machines that are not set to the specified time zone.</code> built-in
Azure Guest Configuration Policy. It&rsquo;s policy definition ID is:
<code>/providers/Microsoft.Authorization/policyDefinitions/4221adbc-5c0f-474f-88b7-037a99e6114c</code>.
In the <a href="https://github.com/Azure/azure-policy/blob/master/built-in-policies/policyDefinitions/Guest%20Configuration/GuestConfiguration_WindowsTimeZone_AINE.json">policy definition</a> the policy parameter timeZone is referenced, but it has no defaultValue. So we&rsquo;re required to supply the parameter when assigning this policy. Assigning the policy will create another unique ID, containing the scope of the assignment and the assignment name (<code>{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}</code>).</p>
<h3 id="audit">Audit</h3>
<p>We start with an Azure Policy that audits the setting on the machine. We&rsquo;ll perform the policy assignment with:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nv">$DefinitionId</span> <span class="p">=</span> <span class="s2">&#34;/providers/Microsoft.Authorization/policyDefinitions/c633f6a2-7f8b-4d9e-9456-02f0f04f5505&#34;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="nv">$splat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="n">Name</span> <span class="p">=</span> <span class="s1">&#39;Audit Windows machines - Timezone - Test&#39;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="n">Scope</span> <span class="p">=</span> <span class="s2">&#34;/subscriptions/0192d01f-1632-4c36-a89e-807d825b5017&#34;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  <span class="n">PolicyParameterObject</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="n">timeZone</span><span class="p">=</span> <span class="s2">&#34;(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna&#34;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">  <span class="n">PolicyDefinition</span> <span class="p">=</span> <span class="nb">Get-AzPolicyDefinition</span> <span class="n">-Builtin</span> <span class="p">|</span> <span class="nb">Where-Object</span> <span class="n">PolicyDefinitionId</span> <span class="o">-eq</span> <span class="nv">$DefinitionId</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="nb">New-AzPolicyAssignment</span> <span class="nv">@splat</span></span></span></code></pre></div><h3 id="deployifnotexists">DeployIfNotExists</h3>
<p>The policy we assigned in the previous example has <code>AuditIfNotExists</code> as a policy effect. However, we&rsquo;re interested in configuring
Windows Configuration via Azure Policies, instead of auditing.</p>
<p>Some policies can deploy resources or modify existing resources to automate the
steps towards desired state. Deploying and modifying does require a managed
identity for the Assignment, to perform the policy effects. When assigning a
policy with those effects (<code>DeployIfNotExists</code> (DINE) or <code>Modify</code>), the managed identity is assigned the RBAC-role, as defined in the policy definition under the <code>roleDefinitionIds</code>.</p>
<p>Using Azure Policy, we can now also set the timezone used on the machine. We can do so with a policy definition conveniently named: <code>Configure time zone on Windows machines</code>.
This has a roleDefinition property in the policy definition:</p>
<p><code>/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c</code></p>
<p>In the <a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles">built-in roles reference</a> we can see that <code>b24988ac-6180-42a0-ab88-20f7382dd24c</code>, maps to Contributor resource role. The role is assigned to a special type of service principal called a managed identity <a href="https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview">(Microsoft Docs page about managed identities)</a>.</p>
<p>Assigning the policy with a DeployIfNotExists policy, with the -AssignIdentity switch will create the Identity and assign the Contributor role to the Identity. Do mind that you need the proper authorizations to perform this assignment. Otherwise the remediation actions won&rsquo;t be performed.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nv">$DefinitionId</span> <span class="p">=</span>  <span class="s2">&#34;/providers/Microsoft.Authorization/policyDefinitions/6141c932-9384-44c6-a395-59e4c057d7c9&#34;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="nv">$splat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="n">Name</span> <span class="p">=</span> <span class="nb">New-Guid</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="n">DisplayName</span> <span class="p">=</span> <span class="s1">&#39;Configure time zone on Windows machines - test&#39;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  <span class="n">Scope</span> <span class="p">=</span> <span class="s2">&#34;/subscriptions/0192d01f-1632-4c36-a89e-807d825b5017&#34;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="n">PolicyParameterObject</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="n">timeZone</span><span class="p">=</span><span class="s2">&#34;(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna&#34;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="n">PolicyDefinition</span> <span class="p">=</span> <span class="nb">Get-AzPolicyDefinition</span> <span class="n">-Builtin</span> <span class="p">|</span> <span class="nb">Where-Object</span> <span class="n">PolicyDefinitionId</span> <span class="o">-eq</span> <span class="nv">$DefinitionId</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">  <span class="n">Location</span> <span class="p">=</span> <span class="s1">&#39;westeurope&#39;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="nb">New-AzPolicyAssignment</span> <span class="nv">@splat</span> <span class="n">-AssignIdentity</span></span></span></code></pre></div><p>After assigning the policy, the same principles apply as with the previous blogpost. Monitoring policy compliance is done with the <code>Compliance</code>-view in the <code>Policy</code>-management blade:</p>
<p><figure><img src="/images/applying-guest-config/compliance.png"
    alt="Azure Policy">
</figure>
<br>
 </p>
<p>Non-compliant resources will not be remediated until a remediation action is performed, a resource deployment is done (including a tag deployment). So don&rsquo;t forget to perform a remediation action or trigger a policy evaluation by adjusting a resource property.</p>
<p>In this case the assignment is done on an Azure Subscription. To remediate non-compliant resources of an assignment, using a remediation task, you have two options. You can remediate per-resource or remediate all the non-compliant resources for the whole assignment.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Start-AzPolicyRemediation</span> <span class="n">-Name</span> <span class="s2">&#34;RemediationAction&#34;</span> <span class="n">-PolicyAssignmentId</span> <span class="s2">&#34;/subscriptions/0192d01f-1632-4c36-a89e-807d825b5017/providers/Microsoft.Authorization/policyAssignments/b0b59220-dcfa-4dc2-9638-bda2133ed7b4&#34;</span></span></span></code></pre></div><p>Using the name we supplied we can view the changes in the <code>Remediation</code>-view in the <code>Policy</code>-blade. Under the <code>Remediation Tasks</code> we can see the progress of the remediation task. After a few minutes if remediation succeeded, the compliance will show that the previously non-compliant items are remediated. This can take up to 30 minutes. If remediation failed you can check the task and it&rsquo;s deployments (remediation actions use regular resource deployments to change configuration to be compliant).</p>
<h2 id="conclusion-and-next-steps">Conclusion and next steps</h2>
<p>In this blog I&rsquo;ve explained what Azure Policies definitions and assignments are. I&rsquo;ve shown the differences in assigning the policies using Azure PowerShell with the policy actions Audit and DeployIfNotExists. I also showed how you can initiate Remediate Tasks using Azure PowerShell.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Deliver your apps using Azure Front Door</title>
      <link>https://manbearpiet.github.io/posts/azurefrontdoor/</link>
      <pubDate>Wed, 04 Aug 2021 19:31:39 +0200</pubDate>
      <guid>https://manbearpiet.github.io/posts/azurefrontdoor/</guid>
      <description>&lt;h1 id=&#34;azure-front-door&#34;&gt;Azure Front Door&lt;/h1&gt;&#xA;&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://manbearpiet.github.io/images/front-door/feature.png&#34;&#xA;    alt=&#34;HTTP Settings&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;br&gt;&#xA; &lt;/p&gt;&#xA;&lt;p&gt;Frequently I speak to cloud admins and consultants who&amp;rsquo;ve heard about Azure Front Door, but are not sure about what it does or havent interacted with it. I have some experience deploying and managing Front Door instances of customers. Most heard comment is: &amp;ldquo;It&amp;rsquo;s a thing that does something with application delivery, right?&amp;rdquo;. In the near future I want pursue on the AZ-700 certification, so I thought a win-win in blogging about! With this blog I want to show what Azure Front Door is, what the components are and make sure to mention a few gotcha&amp;rsquo;s.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="azure-front-door">Azure Front Door</h1>
<p><figure><img src="/images/front-door/feature.png"
    alt="HTTP Settings">
</figure>
<br>
 </p>
<p>Frequently I speak to cloud admins and consultants who&rsquo;ve heard about Azure Front Door, but are not sure about what it does or havent interacted with it. I have some experience deploying and managing Front Door instances of customers. Most heard comment is: &ldquo;It&rsquo;s a thing that does something with application delivery, right?&rdquo;. In the near future I want pursue on the AZ-700 certification, so I thought a win-win in blogging about! With this blog I want to show what Azure Front Door is, what the components are and make sure to mention a few gotcha&rsquo;s.</p>
<p>At the end of this article hopefully you&rsquo;ll be able to answer these questions:</p>
<ul>
<li>Where can I configure free valid certificates for my Front Door hosted site/app?</li>
<li>Where can I configure Front Door load balancing for the hosts I&rsquo;m routing/redirecting traffic toward to?</li>
<li>Where can I control which requests are forwarded/redirected to which hosts?</li>
<li>How does Front Door deliver webtraffic to my users?</li>
</ul>
<h2 id="overview">Overview</h2>
<h3 id="another-load-balancer-service">Another Load Balancer service?</h3>
<p>Before we dive in some background information is relevant. Because Azure Front Door takes a specific role in the Azure Load Balancing options. There are several load balancers in the Azure native portfolio:</p>
<ul>
<li>For global DNS loadbalancing scenario&rsquo;s, Azure Traffic Manager can be used.</li>
<li>For load balancing network (HTTP(S) and non-HTTP(S))traffic to Virtual Machines or Virtual Machine scale sets, Azure Load Balancer is a fine choice.</li>
<li>For regional HTTP/HTTPS load balancing, TLS-offload and Web Application Firewall functionalities Azure Application Gateway is a great option.</li>
</ul>
<p><a href="https://docs.microsoft.com/en-us/azure/architecture/guide/technology-choices/load-balancing-overview">This Microsoft Docs article</a> provides an excellent overview of the portfolio of Azure Load Balancing options.</p>
<h3 id="components">Components</h3>
<p>Front Door provides the following functionalities:</p>
<ul>
<li>Forwarding/redirecting requests to backends/urls as a reverse proxy and load balance HTTP-requests.</li>
<li>Shape or rewrite the request url, body or headers.</li>
<li>Layer 7 HTTP(S) Web-Application Firewall scanning of traffic.</li>
<li>Provide a cached version of content to the user by providing CDN-functionality.</li>
</ul>
<p>There are more vendors that provide similar functionality, however Front Door&rsquo; strong points lie in the tight integration with Azure resources and above all the fact that it&rsquo;s deployed in each Azure POP, which makes it a globally scaleable service. With the caching options and WAF you can deliver apps fast and safe to all users across the world. And it&rsquo;s all manageable via the Azure Portal, not via another internal management panel on a Network Virtual Appliance.</p>
<h3 id="reverse-proxy">Reverse Proxy</h3>
<p><code>In computer networks, a reverse proxy is a type of proxy server where the servers return resources to the client where it would appear to the network that it originated from the reverse proxy server itself. It is mainly used to balance load.</code></p>
<p>From: <a href="https://en.wikipedia.org/wiki/Reverse_proxy">https://en.wikipedia.org/wiki/Reverse_proxy</a></p>
<p>In the case of Front Door this means that requests to url&rsquo;s will be sent to Front Door and the Front Door forwards the traffic to the backend.</p>
<p>The reverse proxy functionality is the most important function of the service. With the reverse proxy all traffic flows through the Front Door. This paves the way for monitoring options, allows you to scan traffic with the Web Application Traffic, but also allows you to provide cached versions of your content. Traffic routing has 3 main components within Azure Front Door:</p>
<ul>
<li>Frontend Domains</li>
<li>Backend Pools</li>
<li>Routing Rules</li>
</ul>
<h2 id="frontend-domains">Frontend Domains</h2>
<p>The frontend domain is the component with which you can start to define your customer experience before they&rsquo;ve even loaded your website. It can be an asset in your branding, but also become a convenient tool (who likes remembering servernames right?). Typing in the frontend domain is usually the only user interaction most users have with the url. The rest is mostly the system administrator and webmasters concern.</p>
<p>In Azure Front Door the frontend domain configuration panel is also the spot where you: onboard your custom domains, configure certificate settings for your custom domains, and configure session affinity for your backend hosts.</p>
<h3 id="onboarding-domains">Onboarding Domains</h3>
<p>By default the name of your Azure Front Door is used to provide you with a fresh start i.e. [{name of the Front Door}.azurefd.net]. Onboarding of domains is done via CNAME records, root/apex/naked domains are also supported via alias&rsquo;s via Azure DNS.</p>
<p>Subdomains are onboarded using CNAME records, where you reference your subdomain as the source domain and point to the frontend host(name) of your Front Door [{name of the Front Door}.azurefd.net] as the destination. After verification the domainname is available in Azure Front Door. You don&rsquo;t have to directly CNAME your domain initially, you can do the onboarding with <code>afdverify.{customdomain}</code> i.e. <code>afdverify.www.my90ieswebsite.tk</code>.</p>
<p>Onboarding root domains is documented at <a href="https://docs.microsoft.com/en-us/azure/frontdoor/front-door-how-to-onboard-apex-domain">Microsoft Docs: Onboard a root or apex domain on your Front Door</a>.<br>
 </p>
<p><figure><img src="/images/front-door/domain.png"
    alt="HTTP Settings">
</figure>
<br>
 </p>
<h3 id="custom-domain-https">Custom domain HTTPS</h3>
<p>To facilitate safe browsing to your website/app you can enable HTTPS to your custom domain. There is a toggle to select a minimum TLS versions with options for 1.0 and 1.2. There is no support for TLS 1.3 yet.</p>
<p>One of the cool features of Azure Front Door are free Front Door Managed Certificates for your custom domains. With this option you don&rsquo;t have to worry about where to save your certificates or to make sure your order and replace them before they expire.</p>
<p>If this is not an option due to regulatory compliance, custom certificates are also an options with Azure Key Vault integration. There are two requirements for this:</p>
<ul>
<li>Register Azure Front Door Service as an app in your Azure Active Directory (AAD) via PowerShell
<ul>
<li>Do so by using this command:</li>
</ul>
</li>
</ul>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">New-AzADServicePrincipal</span> <span class="n">-ApplicationId</span> <span class="s2">&#34;ad0e1c7e-6d38-4ba4-9efd-0bc77ba9f037&#34;</span></span></span></code></pre></div><ul>
<li>Grant Azure Front Door Service the permission to access the secrets in your Key vault.
<ul>
<li>Go to “Access policies” from your Key vault to add a new policy, then grant “Microsoft.Azure.Frontdoor” service principal a “get-secret” permission</li>
</ul>
</li>
</ul>
<p>After which you can select a keyvault, a secret and a secret version (<code>Latest</code> is an option), making replacement of certificates a breeze. Do be aware it can take a while for the certificate to be published at each POP.
<br>
<br>
<figure><img src="/images/front-door/https.png"
    alt="HTTP Settings">
</figure>
<br>
 </p>
<h3 id="session-affinity">Session Affinity</h3>
<p>To make sure your users aren&rsquo;t routed to a different backend(host) with consecutive calls to your stateful webapplication, (cookie based) session affinity is supported by Azure Front Door. This is configured at the frontend domain.
<br>
<br>
<figure><img src="/images/front-door/sa.png"
    alt="Session Affinity">
</figure>
</p>
<p>Session timeouts are configurable in the Settings tab. This is the number of seconds before a forwarded send or receive request times out. When a timeout occurs the request fails and the connection terminates.</p>
<figure><img src="/images/front-door/timeout.png"
    alt="Timeouts">
</figure>

<h2 id="backend-pools">Backend Pools</h2>
<p>Backends in Azure Front Door are the references to endpoints which host your server or webapp. Since it&rsquo;s the component hosting your website/app, you want to make sure your customers reach the right app/server.</p>
<p>It might be bit confusing, but the backend in case of the Azure Front Door is your web-frontend (hosting your site/app). Backends are grouped in backend pools. Backends usually host the same content at each backend host in the backend pool. Backends in Azure Front Door can be any public endpoint.</p>
<h3 id="setting-up-backends">Setting up backends</h3>
<p>There are some Azure services which can be configered as backends using Azure suggested settings, after selecting your resource. This integration is provided with the following Azure services:</p>
<ul>
<li>Azure App Services</li>
<li>Cloud Services</li>
<li>Storage Account (for Static websites), classic is also supported</li>
<li>Application Gateway</li>
<li>API Management</li>
<li>Public IP Address</li>
<li>Traffic Manager</li>
</ul>
<p><br>
Selecting one of the options above prefills the fields required to register a backend in the backend pool. If your backendtype is not mentioned in the options above, or you want to set it up yourself, then you can use the <code>Custom Host</code> option. Required options are shown in the image below:
<br>
<br>
<figure><img src="/images/front-door/backend.png"
    alt="Adding a Backend">
</figure>

 </p>
<p>You also have the option to disable backends in your backend pool, doing so traffic will be routed to different backends. If there are no backends available in the pool, requests will throw a recognizable Front Door white error screen with an error code.</p>
<h3 id="backend-traffic-routing-options">Backend traffic routing options</h3>
<p>The load balancing functionality of Azure Front Door is found in the fact that it can load balance between multiple backends within a backend pool. Priority and Weight in the image shown at <a href="/posts/azurefrontdoor/#backend-pools">Backend Pools</a> resp. provide functionality for priority based traffic-routing and weighted based traffic-routing.</p>
<h4 id="priority">Priority</h4>
<p>Priority on a backend is configurable from 1 to 5, where 1 is the first priority where traffic will be routed to. When the backends with priority 1 are down the backends with priority 2 are used et cetera.</p>
<h4 id="weighted">Weighted</h4>
<p>Weighted traffic routing is performed by configuring a weight (from 1 to 1000), the default is 50. It&rsquo;s ratio-based, so the higher the weight of a backend, the more traffic it will receive.
<br>
 </p>
<h3 id="health-probing">Health probing</h3>
<p>Front Door can be configured to assess the health of the backends in your backendpool by polling with HTTP(S) requests with a configurable health probe. The health probes can be configured to use both a <code>HEAD</code> and <code>GET</code> method on a specified path.</p>
<p><figure><img src="/images/front-door/probe.png"
    alt="Adding a health probe">
</figure>

<br>
The health probe expects a valid HTTP 200 answer from the backend on a provided path. In case HTTPS probing is used, the server should present itself with a valid certificate containing the entire certificate chain. If the backend host doesn&rsquo;t provide a certificate from a wellknown CA, traffic is not forwarded.
Whenever a backendhost is not responding with HTTP 200, it&rsquo;s deemed unhealthy. If all hosts in the backend are unhealthy Front Door throws a white error screen showing an error id. This error id can be used to find the corresponding log in Log Analytics.
<br>
<br>
<figure><img src="/images/front-door/lb.png"
    alt="Adding a health probe">
</figure>

<br>
For HTTPS traffic there&rsquo;s also an option available to disable enforcement of certificate namechecks. This option which is <code>Enabled</code> by default, it ensures that the backend host presents with a certificate where the hostname is contained in the subject of the certificate. Certificates must be issued by a <a href="https://ccadb-public.secure.force.com/microsoft/IncludedCACertificateReportForMSFT">valid certificate authority</a>, it must contain the complete certificate chain.
<br>
<figure><img src="/images/front-door/certcheck.png"
    alt="Certificate Checks">
</figure>

 </p>
<h2 id="routing-rules">Routing Rules</h2>
<p>With configured domains and backends to host our web(apps), the last and in my opinion most challenging topic are the so called <code>Routing rules</code>. These rules can be configured to forward traffic to backends, based on the front-end domain, a backend pool and the requested path. The decision how this is rule application performed is done with path pattern matching.</p>
<p>You can create multiple routing rules per frontend domain and add multiple domains per routing rule. There are some gotcha&rsquo;s though, these are adressed at the respective topics.</p>
<h3 id="frontend-domains-1">Frontend domains</h3>
<p>When creating a rule you must first you must name the rule and select the frontend(s) you want to route traffic for, then you select which protocol is accepted for that frontend(s).
<br>
<figure><img src="/images/front-door/rulename.png"
    alt="Adding a rule">
</figure>

 </p>
<h3 id="pattern-matching">Pattern Matching</h3>
<p>To determine which rule will be applied pattern matching is applied to the requested url path ie. <code>https://manbearpiet.github.io/posts/</code>. In case multiple rules are applicable, the most specific rule will be applied.
In case none of the rules is matched a 404 error will be thrown.</p>
<p>The most simple way to route traffic to backends is to use a catch-all wildcard, <code>/*</code>.
This will account for anything, but aware that you can only create one rule with a wildcard for a frontend domain.</p>
<p>For example:</p>
<table>
  <thead>
      <tr>
          <th>Rule</th>
          <th>Pattern</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td><code>/*</code></td>
      </tr>
  </tbody>
</table>
<table>
  <thead>
      <tr>
          <th>URL</th>
          <th>Match</th>
          <th>Matched Rule</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><a href="https://manbearpiet.github.io/">https://manbearpiet.github.io/</a></td>
          <td>1</td>
          <td><code>/*</code></td>
      </tr>
      <tr>
          <td><a href="https://manbearpiet.github.io/contact">https://manbearpiet.github.io/contact</a></td>
          <td>1</td>
          <td><code>/*</code></td>
      </tr>
      <tr>
          <td><a href="https://manbearpiet.github.io/contactyourlovedones">https://manbearpiet.github.io/contactyourlovedones</a></td>
          <td>1</td>
          <td><code>/*</code></td>
      </tr>
      <tr>
          <td><a href="https://manbearpiet.github.io/posts/">https://manbearpiet.github.io/posts/</a></td>
          <td>1</td>
          <td><code>/*</code></td>
      </tr>
      <tr>
          <td><a href="https://manbearpiet.github.io/posts/my-first-post/">https://manbearpiet.github.io/posts/my-first-post/</a></td>
          <td>1</td>
          <td><code>/*</code></td>
      </tr>
  </tbody>
</table>
<table>
  <thead>
      <tr>
          <th>Rule</th>
          <th>Pattern</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td><code>/*</code></td>
      </tr>
      <tr>
          <td>2</td>
          <td><code>/</code></td>
      </tr>
  </tbody>
</table>
<table>
  <thead>
      <tr>
          <th>URL</th>
          <th>Match</th>
          <th>Matched pattern</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><a href="https://manbearpiet.github.io/">https://manbearpiet.github.io/</a></td>
          <td>2</td>
          <td><code>/</code></td>
      </tr>
      <tr>
          <td><a href="https://manbearpiet.github.io/contact">https://manbearpiet.github.io/contact</a></td>
          <td>1</td>
          <td><code>/*</code></td>
      </tr>
      <tr>
          <td><a href="https://manbearpiet.github.io/contactyourlovedones">https://manbearpiet.github.io/contactyourlovedones</a></td>
          <td>1</td>
          <td><code>/*</code></td>
      </tr>
      <tr>
          <td><a href="https://manbearpiet.github.io/posts/">https://manbearpiet.github.io/posts/</a></td>
          <td>1</td>
          <td><code>/*</code></td>
      </tr>
      <tr>
          <td><a href="https://manbearpiet.github.io/posts/my-first-post/">https://manbearpiet.github.io/posts/my-first-post/</a></td>
          <td>1</td>
          <td><code>/*</code></td>
      </tr>
  </tbody>
</table>
<table>
  <thead>
      <tr>
          <th>Rule</th>
          <th>Pattern</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td><code>/*</code></td>
      </tr>
      <tr>
          <td>2</td>
          <td><code>/</code></td>
      </tr>
      <tr>
          <td>3</td>
          <td><code>/contact</code></td>
      </tr>
  </tbody>
</table>
<table>
  <thead>
      <tr>
          <th>URL</th>
          <th>Match</th>
          <th>Matched pattern</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><a href="https://manbearpiet.github.io/">https://manbearpiet.github.io/</a></td>
          <td>2</td>
          <td><code>/</code></td>
      </tr>
      <tr>
          <td><a href="https://manbearpiet.github.io/contact">https://manbearpiet.github.io/contact</a></td>
          <td>3</td>
          <td><code>/contact</code></td>
      </tr>
      <tr>
          <td><a href="https://manbearpiet.github.io/contactyourlovedones">https://manbearpiet.github.io/contactyourlovedones</a></td>
          <td>1</td>
          <td><code>/*</code></td>
      </tr>
      <tr>
          <td><a href="https://manbearpiet.github.io/posts/">https://manbearpiet.github.io/posts/</a></td>
          <td>1</td>
          <td><code>/*</code></td>
      </tr>
      <tr>
          <td><a href="https://manbearpiet.github.io/posts/my-first-post/">https://manbearpiet.github.io/posts/my-first-post/</a></td>
          <td>1</td>
          <td><code>/*</code></td>
      </tr>
  </tbody>
</table>
<h3 id="rules-engine">Rules Engine</h3>
<p>After being matched there is an option to perform granular adjustments to the request before it&rsquo;s redirected or forwarded  or to drop it entirely.
In example for adding headers, doing HTTP to HTTPS redirect et cetera. Options for this is too extensive for this blog, this will be featured in a seperate blog.</p>
<h3 id="route-details">Route Details</h3>
<p>After being matched to a routing rule it can have two generic outcomes, a forward to a backend or a HTTP redirect.
With a routing rules which performs a forward you&rsquo;re forwarding to a specific backend. With a HTTP redirecting you&rsquo;re redirecting the request to a different host, path or query string.</p>
<h3 id="forwarding-to-backends">Forwarding to backends</h3>
<h4 id="backend-pool">Backend pool</h4>
<p>You can select only one backendpool per forwarding rule, also as mentioned earlier it&rsquo;s possible to supply only one catch all pattern per frontend domain, so be mindful when setting up. Especially when binding multiple frontend domains to 1 routingrule (to 1 backend).</p>
<h4 id="forwarded-protocol">Forwarded protocol</h4>
<p>With the forwarded protocol configuration you can select which protocol (HTTP/HTTPS or choose to match the request&rsquo; protocol) the request is forwarded with to the backend.It&rsquo;s possible to use HTTPS for the users connection to Front Door and use http for backend calls if necessary.</p>
<h4 id="caching-options">Caching options</h4>
<p>There are also some caching options with forwarding, these will be adressed in an upcoming blog.</p>
<h3 id="http-redirection">HTTP redirection</h3>
<p>When you&rsquo;re setting up a redirect routing rule you can choose one or a combination of the following, preserving/replacing:</p>
<ul>
<li>The destination host
<ul>
<li>https://<strong><a href="https://www.example.com">www.example.com</a></strong>/whatdoesmarcelluswallacelooklike?a=switch</li>
</ul>
</li>
<li>The destination path
<ul>
<li><a href="https://www.example.com/">https://www.example.com/</a><strong>whatdoesmarcelluswallacelooklike</strong>?a=switch</li>
</ul>
</li>
<li>The query string
<ul>
<li><a href="https://www.example.com/whatdoesmarcelluswallacelooklike">https://www.example.com/whatdoesmarcelluswallacelooklike</a>?<strong>a=switch</strong></li>
</ul>
</li>
</ul>
<p>For more information about URL redirection,the <a href="https://docs.microsoft.com/en-us/azure/frontdoor/front-door-url-redirect">Azure Front Door Documentation</a> is really good. It contains good information about the redirect types,</p>
<h4 id="destination-fragment">Destination Fragment</h4>
<p>There also is an option for a URL destination fragment, this is used to navigate to a specific page section. You might recognize this from a direct link in a section to i.e. Microsoft Docs for example:</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/core/introduction#cross-platform">https://docs.microsoft.com/en-us/dotnet/core/introduction#cross-platform</a> , the last segment (#cross-platform), is the destination fragment.</li>
</ul>
<p>When redirecting you can add a specific destination fragment to add to the redirect URL.</p>
<h2 id="conclusion">Conclusion</h2>
<p>This was my overview of the Azure Front Door service. I hope you enjoyed reading and learned enough about the inners of Front Door. This article became a bit longer than I hoped for, but more is coming up. Other topics that will be featured in seperate future articles are:</p>
<ul>
<li>Example setups</li>
<li>Architectural considerations</li>
<li>Deployment</li>
<li>Rules Engine for Routing rules</li>
<li>Content Delivery Network (CDN)</li>
<li>Web Application Firewall (WAF)</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Auditing GPOs with Azure Guest Configuration Policy</title>
      <link>https://manbearpiet.github.io/posts/guest-configuration-policy/</link>
      <pubDate>Tue, 02 Feb 2021 08:07:31 +0100</pubDate>
      <guid>https://manbearpiet.github.io/posts/guest-configuration-policy/</guid>
      <description>&lt;h1 id=&#34;os-hardening-security-auditing&#34;&gt;OS-hardening security auditing&lt;/h1&gt;&#xA;&lt;h2 id=&#34;what&#34;&gt;What?&lt;/h2&gt;&#xA;&lt;p&gt;I wanted to check compliance of a security baseline on Azure without first applying it via DSC. My primary goal was to check out how to validate our own internal security controls without using GPO&amp;rsquo;s.&lt;/p&gt;&#xA;&lt;p&gt;Group Policy Objects are frequently used within a windows server domain to push settings, like security controls, and validate/reapply them to prevent configuration drift. My challenge was how to audit these settings, while knowing some customers also use Demilitarized Zones (DMZ&amp;rsquo;s) in Azure. Servers which reside in this network segment are exposed so they are not joined to the domain. But especially these servers do need to be checked on security controls. So there we have our puzzle. How to audit virtual machines on Azure for custom security configurations.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="os-hardening-security-auditing">OS-hardening security auditing</h1>
<h2 id="what">What?</h2>
<p>I wanted to check compliance of a security baseline on Azure without first applying it via DSC. My primary goal was to check out how to validate our own internal security controls without using GPO&rsquo;s.</p>
<p>Group Policy Objects are frequently used within a windows server domain to push settings, like security controls, and validate/reapply them to prevent configuration drift. My challenge was how to audit these settings, while knowing some customers also use Demilitarized Zones (DMZ&rsquo;s) in Azure. Servers which reside in this network segment are exposed so they are not joined to the domain. But especially these servers do need to be checked on security controls. So there we have our puzzle. How to audit virtual machines on Azure for custom security configurations.</p>
<h2 id="security-control-audit-mechanism">Security control audit-mechanism</h2>
<p>To prevent me from making another overengineered solution based on our own security baseline, I went looking for reference data. Luckily Microsoft offers their <a href="https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-security-baselines">Windows Security Baselines</a> in exported GPO&rsquo;s, so we have some reference data to check for in our VM&rsquo;s. I&rsquo;d almost want to say half of the puzzle is done! You can find the GPO&rsquo;s here <a href="https://www.microsoft.com/en-us/download/details.aspx?id=55319">link</a>.</p>
<p>But this was far from over! I&rsquo;ve written a few Pester testcases for other projects to validate files and settings, but I was not sure how to pull the audit data back again to some internal management panel to monitor compliance and drill down to what setting. All the cool stuff is in later Pester releases, so I&rsquo;d have to update the module on VM&rsquo;s and still exporting/pulling the audit-data was too much of a hassle in my opinion. We have multiple customers but that&rsquo;s just too much links in the chain. So Pester was not going to cut it for me.</p>
<p>So I was looking for an integrated security audit mechanism to prevent me writing everything and increasing the chance of stuff breaking randomly. So I checked out Automation Accounts and PowerShell Desired State Configuration, can&rsquo;t blame a PowerShell user right?, but there was no Audit/Monitor mode without applying the security controls. While I really like having safe environments, I really dislike broken applications due to too strict settings. So even with the <code>ApplyAndMonitor</code> this just would be too invasive to try in live environments. So Azure Automation DSC is off the table too.</p>
<h2 id="something-something-dark">Something, something dark</h2>
<p>I was a bit bugged and unsatisfied in my search for a solution for this challenge, I tend to find things immediately after stopping the search for said things, and I wanted to know more about DSC. To satisfy the knowledge craving I watched a <a href="https://youtu.be/hXS-rzs3Hak">PowerShell Conference EU 2020 video</a> by Gael Colas and Michael Greene, awesome video bit noisy though. I read the outline, but had to stop half way during the video. Boy I missed some nice stuff. I did however spot <code>Azure Policy Guest Configuration</code> on the outline of the talk.</p>
<p>Later on in my search for a solution to the security baseline challenge, I found a <a href="https://docs.microsoft.com/en-us/powershell/scripting/dsc/quickstarts/gpo-quickstart?view=powershell-7.1">quickstart</a> on Microsoft Docs which showed how to create a DSC configuration and .MOF file (compiled DSC configuration) from an exported GPO, which felt a little bit random, but hey let&rsquo;s see how far we can get.</p>
<p>I converted a GPO from the Microsoft Security Baseline and received some errors, but it did deliver both the configuration.ps1 and .MOF. The modules referenced on the <a href="https://github.com/microsoft/BaselineManagement">GitHub page</a> of the module were already installed, so I applied it to a test VM using Azure Automation DSC&rsquo; <code>ApplyAndMonitor</code> configuration. And it workses! Awesome! In case you&rsquo;d want to export your own GPO&rsquo;s you can use <a href="https://docs.microsoft.com/en-us/powershell/module/grouppolicy/backup-gpo?view=win10-ps">Backup-GPO</a> for this.</p>
<p>Later that week I saw a <a href="https://twitter.com/ThomasMaurer/status/1354531440944427008">post</a> on Twitter by Thomas Maurer mentioning <code>Azure Policy Guest Configuration</code>, waaait a minute I saw that before! I read the  Microsoft Docs page and came to the conclusion, this was my missing link to my solution! This was also the moment I realized I had performed the first steps in the <a href="https://docs.microsoft.com/en-us/azure/governance/policy/how-to/guest-configuration-create-group-policy">quickstart</a> on the Docs page, but no harm in doing so then!</p>
<h2 id="azure-policy-guest-configuration">Azure Policy Guest Configuration</h2>
<p>Maybe it&rsquo;s my English reading profiency, but I just couldn&rsquo;t really figure out what the quickstart was guiding me through. Eventually I came to the following conclusion:
Azure Policy Guest Configuration uses a .MOF-file and modules to validate local settings and report the compliance status to Azure Policy.</p>
<ul>
<li>The VM&rsquo;s require a Managed Identity and a VM extensions, both of which can be deployed via a default initiative.</li>
<li>The MOF-file and technical prerequisites must be packaged.</li>
<li>It uses a distinct PowerShell instance and doesn&rsquo;t interfere with DSC if it&rsquo;s already utilized on the VM.</li>
</ul>
<p>The steps to start using Azure Policy Guest Configuration could be summarized to:</p>
<ol>
<li>Create a .MOF file with security controls based on the GPO-export using <code>ConvertFrom-GPO</code> (Baseline Management).</li>
<li>Deploy prerequisites for auditing mechanism</li>
<li>Make a package with configuration using <code>New-GuestConfigurationPackage</code>.</li>
<li>(Maybe test configuration on VM using <code>Test-GuestConfigurationPackage</code>), can also be piped from <code>New-GuestConfigurationPackage</code>.</li>
<li>Use <code>Publish-GuestConfigurationPackage</code> to publish the configuration to a storage container in an Azure Storage Account and produce a sharing link with SAS-token.</li>
<li>Use the link + sas token, displayname, a description, platform specifion and potentially a tag filter, an Azure Policy is created with <code>New-GuestConfigurationPolicy</code>.</li>
<li>Publish the said policy and apply it to a scope.</li>
</ol>
<p>The cmdlets are from the PowerShell module <code>GuestConfiguration</code>. Ok,ok, so far so good.</p>
<h2 id="deployment">Deployment</h2>
<p>We&rsquo;ve a few choices here, we could use an own GPO with settings to be validated, but to make it interesting I&rsquo;ve added steps to download all the Windows Security baselines.
That way you&rsquo;d check your hardening for each server OS-version.</p>
<h3 id="1-creating-a-mof-file">1. Creating a MOF-file</h3>
<p>If you have an exported GPO then you can skip this part to the codeblock with <code>ConvertFrom-GPO</code></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="cm">&lt;#
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cm">  All the download links found for Windows Security baselines
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm">  Download each zip via it&#39;s link to the current working directory and replace the whitespace-character %20 in the foldername with a space
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="vm">@</span><span class="p">(</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="s2">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201909%20and%20Windows%20Server%20Version%201909%20Security%20Baseline.zip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="s2">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201507%20Security%20Baseline.zip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="s2">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201607%20and%20Windows%20Server%202016%20Security%20Baseline.zip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="s2">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201803%20Security%20Baseline.zip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="s2">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201809%20and%20Windows%20Server%202019%20Security%20Baseline.zip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="s2">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201903%20and%20Windows%20Server%20Version%201903%20Security%20Baseline%20-%20Sept2019Update.zip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="s2">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%201909%20and%20Windows%20Server%20Version%201909%20Security%20Baseline.zip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="s2">&#34;https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/Windows%2010%20Version%202004%20and%20Windows%20Server%20Version%202004%20Security%20Baseline.zip&#34;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">)</span> <span class="p">|</span> <span class="nb">Foreach-Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">  <span class="nb">Invoke-Webrequest</span> <span class="n">-URI</span> <span class="nv">$_</span> <span class="n">-OutFile</span> <span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="py">split</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)[</span><span class="mf">-1</span><span class="p">].</span><span class="py">replace</span><span class="p">(</span><span class="s1">&#39;%20&#39;</span><span class="p">,</span><span class="s1">&#39; &#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">  <span class="p">}</span></span></span></code></pre></div><p>I&rsquo;m primairly focussed on the <code>Windows 10 Version 2004 and Windows Server Version 2004 Security Baseline.zip</code> so I did:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="c"># Focus on the zip file and unzip the content in the working directory</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">Get-ChildItem</span> <span class="s2">&#34;.\Windows 10 Version 2004 and Windows Server Version 2004 Security Baseline.zip&#34;</span> <span class="p">|</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="nb">Expand-archive</span></span></span></code></pre></div><p>Inside the unzipped folder another theres another folder, which contains a <code>GPOs</code> folder. That&rsquo;s what we&rsquo;re looking for!
Now I was a bit bugged, because I had no idea which folder contains what inside the GPO folder (I don&rsquo;t speak GUID). Luckily there&rsquo;s an XML with the correct information.</p>
<figure><img src="/images/guest-configuration-policy/guid.png"
    alt="GUID to GPO">
</figure>






<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="c"># Create an XML-variable object</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="p">[</span><span class="no">xml</span><span class="p">]</span><span class="nv">$xml</span> <span class="p">=</span> <span class="nb">Get-Content</span> <span class="p">.\</span><span class="n">manifest</span><span class="p">.</span><span class="py">xml</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="c"># Create a new variable using the $xml and output the export ID (GUID) and the corresponding Displayname</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="nv">$guidtogpo</span> <span class="p">=</span> <span class="nv">$xml</span><span class="p">.</span><span class="py">Backups</span><span class="p">.</span><span class="py">BackupInst</span> <span class="p">|</span> <span class="nb">Select-Object</span> <span class="vm">@</span><span class="p">(</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">    <span class="vm">@</span><span class="p">{</span> <span class="n">n</span><span class="p">=</span><span class="s1">&#39;ID&#39;</span><span class="p">;</span> <span class="n">e</span><span class="p">={</span> <span class="nv">$_</span><span class="p">.</span><span class="py">ID</span><span class="p">.</span><span class="s1">&#39;#cdata-section&#39;</span> <span class="p">}}</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">    <span class="vm">@</span><span class="p">{</span> <span class="n">n</span><span class="p">=</span><span class="s1">&#39;DisplayName&#39;</span><span class="p">;</span> <span class="n">e</span><span class="p">={</span> <span class="nv">$_</span><span class="p">.</span><span class="py">GPOdisplayname</span><span class="p">.</span><span class="s1">&#39;#cdata-section&#39;</span> <span class="p">}}</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="p">)</span></span></span></code></pre></div><p>Thanks to help from the PowerShell discord I was able to unraffle the above, I was looking in the wrong direction (<code>Select-XML</code>).</p>
<p><strong>Matching GPO-ID to Displayname</strong></p>
<figure><img src="/images/guest-configuration-policy/guid-to-gpo.png"
    alt="GUID to GPO">
</figure>

<p>Configuration names can only contain alphanumerical characters and underscores, so knowing that I want to use the GPO <code>MSFT Windows Server 2004 - Member Server</code> I replaced the spaces with underscores (for the configurationname) and are going to convert the GPO to a MOF-file.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="c"># Using a regex search replace the spaces and - characters with an underscore</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="s2">&#34;MSFT Windows Server 2004 - Member Server&#34;</span> <span class="o">-replace</span> <span class="s1">&#39;[\s-]&#39;</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">MSFT_Windows_Server_2004_-_Member_Server</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c"># Convert the GPO and give the configuration the name of the GPO</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="nb">ConvertFrom-GPO</span> <span class="p">`</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="n">-Path</span> <span class="s1">&#39;.\{A57A9BF8-C5CC-4CBE-AC7D-A1D0746523FE}\&#39;</span> <span class="p">`</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="n">-ConfigName</span> <span class="s2">&#34;MSFT_Windows_Server_2004_Member_Server&#34;</span> <span class="p">`</span>
</span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="n">-OutputConfigurationScript</span></span></span></code></pre></div><p>This conversion operation creates an Output folder by default, which contains:</p>
<ul>
<li>a configuration .ps1 (this can be used to apply your GPO-settings with Azure Automation DSC !!)</li>
<li>Managed Object Format (MOF) file (this compiled configuration is used to check the settings)</li>
</ul>
<p><strong>.MOF-file</strong></p>
<figure><img src="/images/guest-configuration-policy/mof.png"
    alt="Policy Compliance">
</figure>

<p>Yay we can finally start with setting up our Policy deployment!</p>
<h3 id="2-deploy-prerequisites-for-auditing-mechanism">2. Deploy prerequisites for auditing mechanism</h3>
<p>I assigned the initiative <code>[Preview]: Deploy prerequisites to enable Guest Configuration policies on virtual machines</code> or <code>/providers/Microsoft.Authorization/policySetDefinitions/12794019-7a00-42cf-95c2-882eed337cc8</code> so the VM&rsquo;s receive the proper pre-requisites and the long Policy wait has begun.</p>
<p>The initiative contains the following (Policies and Effect Type):</p>
<ul>
<li>Add system-assigned managed identity to enable Guest Configuration assignments on virtual machines with no identities, Modify;</li>
<li>Add system-assigned managed identity to enable Guest Configuration assignments on VMs with a user-assigned identity, Modify;</li>
<li>Deploy the Windows Guest Configuration extension to enable Guest Configuration assignments on Windows VMs, DeployIfNotExists;</li>
<li>Deploy the Linux Guest Configuration extension to enable Guest Configuration assignments on Linux VMs,DeployIfNotExists;</li>
</ul>
<p>After a while the VM&rsquo;s had a Managed Identity in Azure AD and the proper extension: <code>AzurePolicyforWindows</code>.</p>
<h3 id="3-make-a-guest-configuration-package">3. Make a guest configuration package</h3>
<p>This is pretty straight forward, we need to create a package with the .MOF-file we created in step 1 and give our Guest Configuration policy a name.
<strong>Note</strong> that you can&rsquo;t have spaces in the name of your packages (this kept me busy for a few weeks).</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">New-GuestConfigurationPackage</span> <span class="p">`</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">-Name</span> <span class="s2">&#34;MSFT_Windows_Server_2004_Member_Server&#34;</span> <span class="p">`</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">-Configuration</span> <span class="p">.\</span><span class="n">localhost</span><span class="p">.</span><span class="n">mof</span></span></span></code></pre></div><p>This creates a package which has the name as set above and a folder with the contents of the package called <code>unzippedPackage</code> it contains all the prerequisites required to perform the audit if step 2 was performed correctly.</p>
<figure><img src="/images/guest-configuration-policy/package.png"
    alt="Policy Compliance">
</figure>

<h3 id="4-test-configuration-package">4. Test Configuration Package</h3>
<p>This step is not mandatory, but can be nice to test your converted GPO if it contains all the checks you need. I&rsquo;d mostly use a machine on which you&rsquo;d want audit anyway. I bound the results of a test to a variable so results can be revisited easily:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nv">$hank</span> <span class="p">=</span> <span class="nb">Test-GuestConfigurationPackage</span> <span class="p">`</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">-Path</span> <span class="s1">&#39;.\MSFT_Windows_Server_2004_Member_Server.zip&#39;</span></span></span></code></pre></div><p><strong>$hank</strong></p>
<figure><img src="/images/guest-configuration-policy/output.png"
    alt="Policy Compliance">
</figure>

<p>The outputted results arent&rsquo;t what&rsquo;s so nice, the value is in the <code>$hank.resources</code>.</p>
<p>When you check-out that one with out-gridview, it gives a nice example what the end-result will look like.</p>
<p><strong>Out-Gridview</strong></p>
<p>Results from <code>Out-Gridview $hank.resources</code></p>
<figure><img src="/images/guest-configuration-policy/ogv.png"
    alt="Policy Compliance">
</figure>

<p>This shows that we can succesfully audit the settings with the .MOF on one machine manually!
But I&rsquo;m lazy and want to make Azure Policy do the heavy lifting for me.</p>
<h3 id="5-publish-the-configuration-package-to-a-storage-container-and-produce-a-sharing-link">5. Publish the configuration package to a storage container and produce a sharing link</h3>
<p>This step initially was a bit confusing in the documentation. In the Microsoft Docs it states:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Publish-GuestConfigurationPackage</span> <span class="p">`</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">-Path</span> <span class="p">./</span><span class="n">AuditBitlocker</span><span class="p">.</span><span class="py">zip</span> <span class="p">`</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">-ResourceGroupName</span>  <span class="n">myResourceGroupName</span> <span class="p">`</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">-StorageAccountName</span> <span class="n">myStorageAccountName</span></span></span></code></pre></div><p>Filling in my information I received errors which stated:</p>
<ul>
<li>The specified container does not exist.</li>
</ul>
<p>I wasn&rsquo;t sure which container it couldn&rsquo;t find. One look in the .psm1 file and I found that the storageaccount container by default is named <code>guestcontainer</code>. Later I thought why bother looking there if <code>Get-Help</code> also would suffice, doh!</p>
<p>I went the easy way out and just created a storage container named <code>guestcontainer</code>, but you can name it anyway you want,<code>Publish-GuestConfigurationPackage</code> has an argument <code>-StorageContainerName</code>. This allows you to be creative and give an own name to your storage container.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Publish-GuestConfigurationPackage</span> <span class="p">`</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">-Path</span> <span class="s1">&#39;.\MSFT Windows Server 2004 - Member Server.zip&#39;</span> <span class="p">`</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">-ResourceGroupName</span> <span class="nb">christian-rsg</span> <span class="p">`</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">-StorageAccountName</span> <span class="p">&lt;</span><span class="n">name</span> <span class="n">of</span> <span class="n">my</span> <span class="n">storageaccount</span><span class="p">&gt;</span> <span class="p">`</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="n">-StorageContainerName</span> <span class="n">guestconfiguration</span></span></span></code></pre></div><p>This returns a sharing link with SAS-token, keep it close you&rsquo;ll need it later!</p>
<h3 id="6-create-an-azure-policy">6. Create an Azure Policy</h3>
<p>We&rsquo;re going to use the link + sas token, a displayname, a description, platform specifion and potentially a tag filter, and create an Azure Policy with <code>New-GuestConfigurationPolicy</code>.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"> <span class="nv">$NewGuestConfigurationPolicySplat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">     <span class="n">ContentUri</span> <span class="p">=</span> <span class="s1">&#39;&lt;fill in your sharing link&gt;&#39;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">     <span class="n">DisplayName</span> <span class="p">=</span> <span class="s1">&#39;MSFT Windows Server 2004 - Member Server&#39;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">     <span class="n">Description</span> <span class="p">=</span> <span class="s1">&#39;Validation os-hardening baseline configuration for Windows Server (2004) Domain Members&#39;</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">     <span class="n">Path</span> <span class="p">=</span> <span class="s1">&#39;./policyDefinitions&#39;</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">     <span class="n">Platform</span> <span class="p">=</span> <span class="s2">&#34;Windows&#34;</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="nb">New-GuestConfigurationPolicy</span> <span class="nv">@NewGuestConfigurationPolicySplat</span></span></span></code></pre></div><p>This creates a JSON-file (<code>AuditIfNotExists.json</code>) in the <code>Path</code> supplied in the splat. The contents of the file is the long awaited Azure Policy template!</p>
<p><strong>AuditIfNotExists.json</strong></p>
<figure><img src="/images/guest-configuration-policy/auditifnotexists.png"
    alt="Policy Compliance">
</figure>

<p>You can also immediately publish the Azure Policy, by doing <code>New-GuestConfigurationPolicy @NewGuestConfigurationPolicySplat</code>
But we didn&rsquo;t do that so we have to Publish the policy the policy by hand.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Publish-GuestConfigurationPolicy</span> <span class="n">-Path</span> <span class="s1">&#39;.\policyDefinitions&#39;</span></span></span></code></pre></div><p>I received the output below and saw it in the Azure Policy blade, awesome!!</p>
<p><strong>Policy</strong></p>
<figure><img src="/images/guest-configuration-policy/policy.png"
    alt="VM Compliance">
</figure>

<p>This command stores the policy definition in the current PowerShell-scope (subscription, with azcontext), you could also publish the policy definition to a different scope/policy-store (maybe a Management Group).</p>
<figure><img src="/images/guest-configuration-policy/policystore.png"
    alt="Policy Store">
</figure>

<p><strong>Policy Assignment</strong></p>
<p>The custom policy is available in the store, we assign the policy to a specific resource-scope, where can differentiate in assignment names (to specify scopes) and input our parameters. In this case we can chose to audit Azure Arc machines, but this is currently not relevant for our purpose.</p>
<figure><img src="/images/guest-configuration-policy/assignment.png"
    alt="Policy Assignment">
</figure>

<p>It took a while for all VM&rsquo;s to be processed, it stated for a long time:</p>
<p><em>Reason for non-compliance
No related resources match the effect details in the policy definition.</em></p>
<p>So a nice bowl of spaghetti later, and the details pane of the VM showed a new item:</p>
<ul>
<li>Last evaluated resource (out of 1) with a clickable resource-id.</li>
</ul>
<p>This gives the nice overview over all VM&rsquo;s with a drilldown on settings, this is exactly what I needed and what I&rsquo;d expect from an integrated tool to assess compliance of each setting. I really like it, it ticks all the boxes for the said challenge.</p>
<p><strong>Policy Compliance</strong></p>
<figure><img src="/images/guest-configuration-policy/policycomplianceoverviewnew.png"
    alt="Policy Compliance">
</figure>

<p><strong>VM Compliance details overview</strong></p>
<figure><img src="/images/guest-configuration-policy/vmdetailsnew.png"
    alt="VM Compliance">
</figure>

<p><strong>VM Compliance</strong></p>
<figure><img src="/images/guest-configuration-policy/vmcompliance.png"
    alt="VM Compliance">
</figure>

<h2 id="conclusion-and-next-steps">Conclusion and next steps</h2>
<p>By converting the GPO&rsquo;s to .MOF, packaging them and applying them to audit OS-settings, we&rsquo;ve a method to check our OS-hardening using DSC and Azure Policy.
Using this feature of Azure Policy you can check compliance and drill down on specific settings, or test your security baseline vs. a reference without applying it directly.
The examples used were the Microsoft Windows Security Baselines, but you could as well use something internal or something like the CIS GPO&rsquo;s.
Next steps are automating deployment to customers with tag filtering and creating a build pipeline when a new security policy is designed!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Start a blog!</title>
      <link>https://manbearpiet.github.io/posts/my-first-post/</link>
      <pubDate>Sun, 31 Jan 2021 10:19:52 +0100</pubDate>
      <guid>https://manbearpiet.github.io/posts/my-first-post/</guid>
      <description>&lt;h1 id=&#34;blog-blarg-blorg&#34;&gt;Blog! Blarg! Blorg!?&lt;/h1&gt;&#xA;&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;&#xA;&lt;p&gt;Sometimes I have decent&amp;rsquo;ish ideas to solve challenges faced on the Microsoft Azure cloud, using Azure DevOps or with PowerShell.&#xA;If there&amp;rsquo;s code involved with solving these problems, that code tends to disappear in a folder I&amp;rsquo;ve accordingly named &lt;code&gt;Trash&lt;/code&gt;.&#xA;I frequently hear from colleagues and read tweets of people struggling with the same challenges.&lt;/p&gt;&#xA;&lt;p&gt;This blog will mostly feature my noobish take on challenges with these topics.&#xA;By writing this blog I hope to improve my webdev and writing skills, but mostly try to help readers facing earlier mentioned challenges.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="blog-blarg-blorg">Blog! Blarg! Blorg!?</h1>
<h2 id="why">Why?</h2>
<p>Sometimes I have decent&rsquo;ish ideas to solve challenges faced on the Microsoft Azure cloud, using Azure DevOps or with PowerShell.
If there&rsquo;s code involved with solving these problems, that code tends to disappear in a folder I&rsquo;ve accordingly named <code>Trash</code>.
I frequently hear from colleagues and read tweets of people struggling with the same challenges.</p>
<p>This blog will mostly feature my noobish take on challenges with these topics.
By writing this blog I hope to improve my webdev and writing skills, but mostly try to help readers facing earlier mentioned challenges.</p>
<h2 id="how">How</h2>
<p>Years ago I did an attempt using a cheap hosting service and WordPress, that just wouldn&rsquo;t look like I wanted it to. I didn&rsquo;t ask for help and just let it bleed out.
To prevent the same error, I reached out earlier on the <a href="https://aka.ms/psdiscord">PowerShell discord</a> (amazing community). I told the members on the <em>#bridge</em> I had the idea to start a blog, but had no writing experience nor the idea on how to start a blog technically.  I was hinted to use GitHub Pages and Hugo and that it should be fairly easy to set up and go.</p>
<p>The nice thing about Hugo is that it allows me to write content in Markdown, which I&rsquo;m ok with. My webdev-skills are non-existant. So Hugo it is!</p>
<p>I read a blog where someone explained the steps <a href="https://earvingad.github.io/posts/blogwithhugo/">link</a></p>
<p>From this blog I learned:</p>
<ul>
<li>How to setup Hugo</li>
<li>How to use GitHub Pages for my Hugo based website</li>
<li>And how to install a theme for my Hugo based static website</li>
</ul>
<p>Before reading I was still looking toward hosting on a VPS (because new things like GitHub Pages are scary!), but reading eaarvingad his blog I had to give it a try.</p>
<h2 id="lets-go">Let&rsquo;s go</h2>
<p>So I created a private repository on GitHub, and you&rsquo;re looking at my first commit.
All in all setting up took less than 30 minutes.</p>
<p>My first choice was a minimalistic blog theme, but it didn&rsquo;t scale nicely with my content. Most of the extensive themes require seperate NPM packages, then I chose the the ananke theme it looks nice and doesn&rsquo;t really require all the bells and whistles.
But when I was reading the draft I almost was blinded by the white background. So I switched to <strong>hello-friend-ng</strong> by rhazdon on github <a href="https://github.com/rhazdon/hugo-theme-hello-friend-ng">link</a>.</p>
<p>This has a nice implementation which uses your system preference (light/dark).</p>
<h2 id="conclusion">Conclusion</h2>
<p>All in all the tips of the PowerShell discord members really helped, using Hugo and the right theme gives you an awesome experience.
While it is published under the MIT-license I really like Drodje Atlialp his theme so I bought him a coffee, if you like your theme please do the same!</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
