<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Throw on Azure and DevOops</title>
    <link>http://localhost:1313/tags/throw/</link>
    <description>Recent content in Throw on Azure and DevOops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Christian Piet (CC BY 4.0)</copyright>
    <lastBuildDate>Wed, 20 Nov 2024 20:00:00 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/throw/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to work with errors in PowerShell</title>
      <link>http://localhost:1313/posts/powershellerrors/</link>
      <pubDate>Wed, 20 Nov 2024 20:00:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/powershellerrors/</guid>
      <description>&lt;p&gt;In my career, I&amp;rsquo;ve seen many different approaches to errors, all meant to address them. However, none of these approaches provided a complete solution. Either everything is dumped without a specific error, the script/function continues while it should error, or the wrong keywords are used, like &lt;code&gt;break.&lt;/code&gt; Code with proper error handling is more reliable, easier to maintain, and makes it easier to understand what is happening. In this blog, I will share what I have learned on how to create errors, how to handle errors, and what not to do.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>In my career, I&rsquo;ve seen many different approaches to errors, all meant to address them. However, none of these approaches provided a complete solution. Either everything is dumped without a specific error, the script/function continues while it should error, or the wrong keywords are used, like <code>break.</code> Code with proper error handling is more reliable, easier to maintain, and makes it easier to understand what is happening. In this blog, I will share what I have learned on how to create errors, how to handle errors, and what not to do.</p>
<h2 id="errors-">Errors ‚ùå</h2>
<p>Errors are unexpected events that occur when executing code. For example, errors can happen when we fail to process objects. Luckily, you can anticipate errors. In PowerShell, everything is an object, so errors are objects, too. Errors contain the error message and a property called the exception.</p>
<p>I borrowed the definition of an exception from a <a href="https://learn.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-exceptions?view=powershell-7.4">Microsoft Learn page</a>, which adopted an article from Kevin Marquette his series &ldquo;Everything you want to know about X&rdquo;. In his post there is a pretty definition of an exception:</p>
<blockquote>
<p>An Exception is like an event that is created when normal error handling can&rsquo;t deal with the issue. Trying to divide a number by zero or running out of memory are examples of something that creates an exception. Sometimes the author of the code you&rsquo;re using creates exceptions for certain issues when they happen.
Exceptions are objects in PowerShell, too. In some cases they even have specific types. They contain which line PowerShell failed where, with which argument, and the whole call stack (the &lsquo;stack&rsquo; of commands called to get to that point). So, exception objects are precious because they can show you information on what went wrong.</p>
</blockquote>
<h2 id="error-types-">Error types üÜé</h2>
<p>In PowerShell, there are two types of errors: terminating and non-terminating errors.
A non-terminating error fails to process a request but doesn&rsquo;t stop processing altogether. For example, if you copy the contents of a directory into another directory and it fails to copy one item, should it stop copying all other files? With a non-terminating error, it would continue, but a terminating error will stop the processing.</p>
<p>When a terminating error occurs while executing a function, it stops the code&rsquo;s execution. Depending on the specified ErrorAction or ErrorActionPreference setting, it will stop running the rest of the script, function, or runspace. By changing the ErrorAction or ErrorActionPreference to <code>Stop</code>, you can change the behavior of errors from non-terminating to terminating.</p>
<p>The fastest way to understand what I mean is by considering the following code:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Write-Filler</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">([</span><span class="nb">Parameter</span><span class="p">(</span><span class="na">ValueFromPipeline</span><span class="p">)]</span><span class="nv">$Imnotused</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;I am filler&#34;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Write-NonTerminatingError</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="nb">Write-Error</span> <span class="n">-Message</span> <span class="s2">&#34;This is a non-terminating error&#34;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;This is inside of the function after the non-terminating error&#34;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Write-TerminatingError</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="nb">Write-Error</span> <span class="n">-Message</span> <span class="s2">&#34;This is a terminating error&#34;</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;This is inside of the function after the terminating error&#34;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="nb">Write-Host</span> <span class="s2">&#34;Start&#34;</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">
</span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="nb">Write-NonTerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="nb">Write-TerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">
</span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="nb">Write-Host</span> <span class="s2">&#34;End&#34;</span></span></span></code></pre></div><p>In the code above, I wrote an empty filler function to show that pipeline processing continues. I also wrapped all the error messages in functions for the same argument.</p>
<p>When you run this code, you can see that the code inside of the function <code>Write-NonTerminatingError</code> is still executed even after the error because it&rsquo;s a non-terminating error. PowerShell also executes the command that happens after the <code>|</code> pipe character.
When code executing reaches <code>Write-TerminatingError</code>, the code runs up to <code>Write-Error</code>-statement inside the function, with the <code>ErrorAction</code> value of <code>Stop</code> specified. This ErrorAction Statement stops all further code execution when receiving an error. The pattern to write a terminating error this way is uncommon, but using the <code>throw</code> statement combined with <code>try/catch</code> is more common. I&rsquo;ll continue on that later.</p>
<h2 id="statement-terminating-error-">Statement terminating error üí¨</h2>
<p>There is a way to throw a statement terminating error, meaning it won&rsquo;t continue processing that specific line, but it will continue with the rest of the script. You can create this type of statement terminating error within your function by typing <code>$PSCmdlet.ThrowTerminatingError()</code>. This method on the <code>$PSCmdlet</code>-object, which is available in cmdlets/advanced functions, has a specific argument/overload to provide an ErrorRecord-object. The neat thing about this way of creating a terminating error is that it terminates the statement but not all other processing after the statement.</p>
<p>Consider the following code addition to our previous codeblock, all of the arguments to <code>ThrowTerminatingError</code> aren&rsquo;t relevant, but the <code>$PSCmdlet.ThrowTerminatingError</code> and <code>Write-Host</code> are:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Write-StatementTerminatingError</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ThrowTerminatingError</span><span class="p">(</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"> <span class="p">[</span><span class="no">System.Management.Automation.ErrorRecord</span><span class="p">]::</span><span class="n">new</span><span class="p">(</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"> <span class="p">[</span><span class="no">Exception</span><span class="p">]::</span><span class="n">new</span><span class="p">(</span><span class="s2">&#34;This is a statement terminating error&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">            <span class="s1">&#39;ErrorID&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"> <span class="p">[</span><span class="no">System.Management.Automation.ErrorCategory</span><span class="p">]::</span><span class="n">OperationStopped</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">            <span class="s1">&#39;TargetObject&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"> <span class="p">)</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;This is inside of the function after the statement terminating error&#34;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="s2">&#34;Start&#34;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="nb">Write-NonTerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="nb">Write-StatementTerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="nb">Write-TerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="s2">&#34;End&#34;</span></span></span></code></pre></div><p>When executing this code, it reacted like a non-terminating error. You couldn&rsquo;t read the message after the statement-terminating mistake in the output, nor did it execute/output <code>Write-Filler</code> its statement. It just stops the code in that function and pipeline processing. However, execution does continue on the rest of the script since it ran <code>Write-TerminatingError</code>.</p>
<p>Using statement-terminating errors can be very convenient if you create functions for a script or module, which should stop the processing of the pipeline. However, using statement-terminating errors leaves the decision to stop processing altogether up to the user. Since statement-terminating errors can only be used in advanced functions (functions with <code>[CmdletBinding()]</code> in them), you can always specify whether you want the script to stop running by setting up <code>ErrorAction</code> on that line or changing the <code>ErrorActionPreference</code>.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-pwsh" data-lang="pwsh"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Write-StatementTerminatingError</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span> <span class="p">|</span> <span class="nb">Write-Filler</span></span></span></code></pre></div><p>I use statement terminating errors a lot during module development. I only use &rsquo;true&rsquo; terminating errors when continuing is impossible or potentially destructive. So if you can&rsquo;t get a token or refresh it, or when you can&rsquo;t connect even after retries, it&rsquo;s futile to continue. I haven&rsquo;t found a use case for implementing non-terminating errors.</p>
<h2 id="throw-">throw ‚öæÔ∏è</h2>
<p>Now, you might&rsquo;ve wondered, but what about <code>throw</code>? Well, <code>throw</code> causes a terminating error. In the previous section I referenced the following codeblock:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Write-TerminatingError</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">    <span class="nb">Write-Error</span> <span class="n">-Message</span> <span class="s2">&#34;This is a terminating error&#34;</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;This is inside of the function after the terminating error&#34;</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>The <code>-ErrorAction Stop</code> argument to a function creating an error will stop execution. Since Write-Error creates an error upon execution (duh) and the <code>ErrorAction</code> is set to <code>Stop</code>, PowerShell terminates the processing. It can be inconvenient to spot the <code>ErrorAction</code> if it&rsquo;s a long error message, especially when an alias is used like <code>‚Äîea</code> (please just auto-resolve these in VSCode using <code>ALT+SHIFT+E</code>; thank you for teaching me this, Barbara Forbes).</p>
<p>That is where <code>throw</code> comes in; if you read <code>throw</code> in a script, you know it&rsquo;s a full stop if it hits that code. If <code>throw</code> is used within a script outside of a <code>try/catch</code> block it&rsquo;ll generate a <code>ScriptHalted</code> error and stop all the things. You&rsquo;ll see the following:
<code>Exception: ScriptHalted</code>, which is not very helpful. Luckily, <code>throw</code> will accept expressions like error messages similar to Write-Error but can also accept objects as arguments.</p>
<p>In the previously mentioned script, we can replace the terminating error of <code>Write-Error -ErrorAction Stop</code> with the more commonly used <code>throw</code>. <code>throw</code> will behave similarly to what we had earlier:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Write-TerminatingError</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="k">throw</span> <span class="s2">&#34;This is a terminating error&#34;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;This is inside of the function after the terminating error&#34;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="s2">&#34;Start&#34;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="nb">Write-NonTerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="nb">Write-StatementTerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="nb">Write-TerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="s2">&#34;End&#34;</span></span></span></code></pre></div><p><code>throw</code> is affected by <code>ErrorAction</code>/<code>ErrorActionPreference</code>. So be cautious when using <code>Ignore</code> and <code>SilentlyContinue</code> as this can create unexpected behavior.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Do-Stuff</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="k">throw</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;I come after the big error&#34;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="s2">&#34;Start&#34;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="nb">Do-Stuff</span> <span class="n">-ErrorAction</span> <span class="n">Ignore</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="s2">&#34;I am also executed, weird right?&#34;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="s2">&#34;End&#34;</span></span></span></code></pre></div><p>While terminating errors can occur within functions or scripts, it&rsquo;s up to us to catch those. In some cases, if something fails, you might want to retry it, create a ticket, log something specific to a log, or close a connection, but that&rsquo;s all dependent on what type of error happened, right?</p>
<h2 id="trycatch-">try/catch üé£</h2>
<p><code>try/catch</code> is a functionality you can use to prepare and enact on terminating errors. The <code>try</code> part is a script block in which you assume (terminating) errors could happen.
If terminating errors occur within the script block, processing of the code within the <code>try</code> block is terminated, and the error record, with its exception property, is passed to the <code>catch</code> script block as the pipeline item ($_ or $PSItem).</p>
<p>In the following code, we&rsquo;d want to know more about a specific directory and its contents only when something goes wrong. The catch block is an excellent way to do so:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;Start try&#34;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="nb">Get-Item</span> <span class="s2">&#34;LegoMilleniumFalcon&#34;</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;End try&#34;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;Start catch&#34;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;ErrorItemName: </span><span class="p">$(</span><span class="nv">$_</span><span class="p">.</span><span class="py">Exception</span><span class="p">.</span><span class="n">ItemName</span><span class="p">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="nb">Get-ChildItem</span> <span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="py">Exception</span><span class="p">.</span><span class="py">ItemName</span> <span class="p">|</span> <span class="nb">Split-Path</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="k">throw</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>I tried to find a <code>LegoMilleniumFalcon</code> item, but PowerShell couldn&rsquo;t find it. However, <code>Get-Item</code> doesn&rsquo;t throw a non-terminating error when it cannot find an item. That is convenient and nice of the devs, but if we want to stop all processing and find out why, we must access the catch block. To do so we need to make our script or Get-Item&rsquo;s error behavior to be terminating. By setting the <code>-ErrorAction Stop</code>, we change the non-terminating error to terminating so we can enter the catch block for more information.</p>
<p>If you executed this code and you read <code>Write-Host &quot;End try&quot;</code> you either have a <code>LegoMilleniumFalcon</code> file or directory in your machine, or you changed the <code>ErrorAction</code> (oh you). But in all other cases, you can see that PowerShell failed to catch the item, the catch was started (just for demo purposes), which item failed to process, and what the contents of the directory that failed were. If the directory is non-existent, <code>Get-ChildItem</code> will throw a non-terminating error.</p>
<p>The sharpest among you saw that we have <code>throw</code> in the <code>catch</code> block creating another terminating error, so our script stops after that statement. Also, you might&rsquo;ve noticed that we didn&rsquo;t provide another argument to <code>throw</code>. If <code>throw</code> has no arguments within a <code>catch</code> block, it&rsquo;ll rethrow the error record it was called with. So the error record in <code>$_</code>/<code>$PSItem,</code> available in the catch block, will be rethrown. Rethrowing can be confusing; submitting a comment might be nice.</p>
<p>You can also catch specific exceptions, the error-object contains the exception-object, but that&rsquo;s also a specific type. If you&rsquo;re debugging and want specific handling for this type of exception, you can get the type with:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nv">$_</span><span class="p">.</span><span class="py">Exception</span><span class="p">.</span><span class="py">gettype</span><span class="p">().</span><span class="n">Fullname</span></span></span></code></pre></div><p>Doing so allows us to do the following:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;Start try&#34;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="nb">Get-Item</span> <span class="s2">&#34;LegoMilleniumFalcon&#34;</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;End try&#34;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="p">}</span> <span class="k">catch</span> <span class="p">[</span><span class="no">System.Management.Automation.ItemNotFoundException</span><span class="p">]{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;ErrorItemName:&#34;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="nb">Write-Host</span> <span class="nv">$_</span><span class="p">.</span><span class="py">Exception</span><span class="p">.</span><span class="py">ItemName</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="nb">Get-ChildItem</span> <span class="s1">&#39;blablbla&#39;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="k">throw</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;Start generic catch&#34;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="k">throw</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>Catching specific exception types is very handy if the implementation of your function implements specific exception types.</p>
<p>Try/catch as a mechanism is very handy because you can enclose each section of your code within a try statement. Sometimes you don&rsquo;t want your script to stop, but just to throw a statement terminating error. In that case you can apply what you learned earlier and use a statement terminating error that reuses the error record of the failed action:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Get-NotSoImportantThing</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="nb">Write-Host</span> <span class="s2">&#34;Start try&#34;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="nb">Get-Item</span> <span class="s2">&#34;Thisisnotthefileyouarelookingfor&#34;</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="nb">Write-Host</span> <span class="s2">&#34;End try&#34;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"> <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ThrowTerminatingError</span><span class="p">(</span><span class="nv">$_</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="s2">&#34;Start&#34;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="nb">Get-NotsoImportantThing</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="s2">&#34;Very Important code&#34;</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="s2">&#34;End&#34;</span></span></span></code></pre></div><p>Lastly, I also use <code>throw</code> in catch-blocks of scripts in case I enter an unhappy code path in my script that doesn&rsquo;t generate an error but is something we don&rsquo;t want to continue on. But as a reminder when developing functions/cmdlets you want to leave that decision up to the user and a statement terminating error is almost always the way to go.</p>
<p>For example, we have a script that processes a JSON file and misses a specific property. If I didn&rsquo;t check the JSON manually beforehand, the processing of the JSON will potentially error out later on, but I don&rsquo;t want to exit thinking it was completed successfully. In that case, you can choose to throw a terminating error with an error message or with a fully custom-made error record.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nv">$jsonConverted</span> <span class="p">=</span> <span class="sh">@&#39;
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="sh">{
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="sh"> &#34;aryaStark&#34;: {
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="sh"> &#34;knows&#34;: &#34;needle&#34;
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="sh"> },
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="sh"> &#34;johnSnow&#34;: {
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="sh"> &#34;knows&#34;: null
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="sh"> }
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="sh">}
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="sh">&#39;@</span> <span class="p">|</span> <span class="nb">ConvertFrom-Json</span> <span class="n">-AsHashtable</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="k">foreach</span> <span class="p">(</span><span class="nv">$key</span> <span class="k">in</span> <span class="nv">$jsonConverted</span><span class="p">.</span><span class="n">Keys</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="k">if</span> <span class="p">([</span><span class="no">String</span><span class="p">]::</span><span class="n">IsNullOrWhiteSpace</span><span class="p">(</span><span class="nv">$jsonConverted</span><span class="p">[</span><span class="nv">$key</span><span class="p">].</span><span class="n">knows</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="k">throw</span> <span class="s2">&#34;</span><span class="nv">$key</span><span class="s2"> knows nothing&#34;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">        <span class="nb">Write-Host</span> <span class="s2">&#34;</span><span class="nv">$key</span><span class="s2"> knows </span><span class="p">$(</span><span class="nv">$jsonConverted</span><span class="p">[</span><span class="nv">$key</span><span class="p">].</span><span class="n">knows</span><span class="p">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><h1 id="custom-errors">Custom errors</h1>
<p>Sometimes, your scripts require you to create a rich exception object. You can do so with the code I referenced earlier:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Write-StatementTerminatingError</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ThrowTerminatingError</span><span class="p">(</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"> <span class="p">[</span><span class="no">System.Management.Automation.ErrorRecord</span><span class="p">]::</span><span class="n">new</span><span class="p">(</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"> <span class="p">[</span><span class="no">Exception</span><span class="p">]::</span><span class="n">new</span><span class="p">(</span><span class="s2">&#34;This is a statement terminating error&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">            <span class="s1">&#39;ErrorID&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"> <span class="p">[</span><span class="no">System.Management.Automation.ErrorCategory</span><span class="p">]::</span><span class="n">OperationStopped</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">            <span class="s1">&#39;TargetObject&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"> <span class="p">)</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;This is inside of the function after the statement terminating error&#34;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="s2">&#34;Start&#34;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="nb">Write-StatementTerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="s2">&#34;End&#34;</span></span></span></code></pre></div><p>The type of exception created with this error ErrorRecord/Error-object, is <code>System.Exception</code>. Keep in mind that types aren&rsquo;t exported in PowerShell script modules. To do so, you must create a binary module in C# to create a custom type you can catch up on in a `catch &rsquo; block. Therefore if you&rsquo;re not proficient in C#, you could use a hacky pattern:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Write-StatementTerminatingError</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">()</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;Start of your function code&#34;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"> <span class="nv">$ThisIsBrokenBeyondFixing</span> <span class="p">=</span> <span class="vm">$true</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nv">$ThisIsBrokenBeyondFixing</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">            <span class="k">throw</span> <span class="s2">&#34;aah this run of Write-StatementTerminatingError is broken beyond automatic repair&#34;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"> <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ThrowTerminatingError</span><span class="p">(</span><span class="nv">$_</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;This is inside of the function after the statement terminating error&#34;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="s2">&#34;Start&#34;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">    <span class="nb">Write-StatementTerminatingError</span> <span class="p">|</span> <span class="nb">Write-Filler</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="py">Exception</span><span class="p">.</span><span class="py">Message</span> <span class="o">-eq</span> <span class="s2">&#34;aah this run of Write-StatementTerminatingError is broken beyond automatic repair&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">        <span class="nb">Write-host</span> <span class="s2">&#34;Inside of the specific catchblock&#34;</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">        <span class="k">throw</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="s2">&#34;End&#34;</span></span></span></code></pre></div><p>By throwing inside the function&rsquo;s <code>try</code> block, you create an error record for an exception containing a specific message or object. The function&rsquo;s <code>catch</code> block can then be matched with if-logic to create a similar behavior. Alternatively, you can learn C# and create your own types of exceptions. Do note that this is hacky; I&rsquo;d discuss this with my team if you want this type of hackyness in your codebase.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Handling errors effectively in PowerShell is crucial for creating robust and reliable scripts. Understanding the difference between terminating and non-terminating errors allows you to control the flow of your scripts more precisely. Using <code>Write-Error</code> with <code>-ErrorAction</code>, <code>$PSCmdlet.ThrowTerminatingError()</code>, and <code>throw</code> statements, you can manage how errors are handled and ensure that your scripts behave as expected in various error scenarios.</p>
<p>The <code>try/catch</code> mechanism provides a structured way to handle terminating errors. It allows you to perform specific actions when errors occur and maintain control over your script&rsquo;s execution. By catching specific exceptions, you can tailor your error handling to different types of errors, making your scripts more resilient and easier to debug.</p>
<p>Custom exceptions and advanced error-handling techniques, such as creating custom exception objects or using statement-terminating errors, enhance your ability to manage errors in complex scripts and modules. But they might require you to learn C# or do hacky things. Either way discuss with your team what suits your codebase best and how you handle these things. Or even better, tell us at the PowerShell Discord (<a href="https://aka.ms/PSDiscord"></a>) or your PowerShell user group.</p>
<p>Applying these error techniques allows you to create PowerShell scripts that handle errors gracefully, provide meaningful feedback, and continue processing when appropriate, leading to more reliable and maintainable code.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
