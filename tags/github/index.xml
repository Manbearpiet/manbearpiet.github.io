<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GitHub on Azure and DevOops</title>
    <link>http://localhost:1313/tags/github/</link>
    <description>Recent content in GitHub on Azure and DevOops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Christian Piet (CC BY 4.0)</copyright>
    <lastBuildDate>Wed, 14 Feb 2024 19:41:37 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automating GitHub operations using GitHub Apps and Azure KeyVault</title>
      <link>http://localhost:1313/posts/githubapp/</link>
      <pubDate>Wed, 14 Feb 2024 19:41:37 +0100</pubDate>
      <guid>http://localhost:1313/posts/githubapp/</guid>
      <description>&lt;h1 id=&#34;github-apps&#34;&gt;GitHub Apps&lt;/h1&gt;&#xA;&lt;p&gt;At the company I work at (InSpark), we had a use case for automating our operations on the GitHub platform. I used GitHub Apps to perform the actions, in this blog I will show you what I learned.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what&#34;&gt;What&lt;/h2&gt;&#xA;&lt;p&gt;We were looking how to automate the enrollment of a new customer for our company&amp;rsquo;s service. Enrollment meant that in a web portal, a customer would enter information, and, at the press of a button, the portal would make a single request to my tool, starting a chain of operations.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="github-apps">GitHub Apps</h1>
<p>At the company I work at (InSpark), we had a use case for automating our operations on the GitHub platform. I used GitHub Apps to perform the actions, in this blog I will show you what I learned.</p>
<h2 id="what">What</h2>
<p>We were looking how to automate the enrollment of a new customer for our company&rsquo;s service. Enrollment meant that in a web portal, a customer would enter information, and, at the press of a button, the portal would make a single request to my tool, starting a chain of operations.</p>
<p>I had a list of operations on the GitHub platform that should be made possible from my tool:</p>
<ul>
<li>Create a secret on the repository.</li>
<li>Copy template folder structure</li>
<li>Create a few new files in the new folder.</li>
<li>Create a new workflow.</li>
<li>Start a workflow with information from the request.</li>
</ul>
<h2 id="platform">Platform</h2>
<p>With my PowerShell background, I started looking into GitHub scripts and soon found that they did not fit my use case exactly. I found the REST API reference (GitHub REST API documentation - GitHub Docs), which does what I needed it to. I started looking into the REST API and wondered how to make a script interact with it headlessly. This service must be fast, available 24/7, and easily extendable, so Azure Automation was out of the question. I had yet to gain experience using Azure Functions, though.</p>
<p>I created an Azure Function and was puzzled. Am I going to use a Personal Access Token (PAT) and have every action attributed to my account, or do it in a more sophisticated way? In Azure DevOps, service accounts with PATs used to be an ugly workaround for the lack of SPN support.</p>
<p>PATs are always user-account bound, sometimes scoped, and expire when you don&rsquo;t want them to. If I win the lottery someday, I hope my colleagues don&rsquo;t pull too hairs out on the search which PAT expired where. So I wanted something else for my new shiny project.</p>
<blockquote>
<p>Entra ID SPNs can now integrate with Azure DevOps since a few months ago, and it works excellent <a href="https://learn.microsoft.com/en-us/azure/devops/release-notes/2023/sprint-228-update#managed-identity-and-service-principal-support-for-azure-devops-now-in-general-availability-ga">Managed identity and service principal support for Azure DevOps now in general availability (GA)</a>. This video by John Savill explains it in detail: <a href="https://www.youtube.com/watch?v=saTUeR_U3lA">Azure DevOps Workload Identity Federation with Azure Overview. NO MORE SECRETS!</a></p>
</blockquote>
<h2 id="github-app">GitHub App</h2>
<p>I looked to see if GitHub supported an extension from Microsoft Entra ID, so I could invite/register an Entra ID SPN to do these actions instead of everything attributed to my GitHub user with a PAT. Unfortunately, the GitHub platform doesn&rsquo;t support Entra ID SPNs as an entity, but GitHub has its own SPN implementation on its platform called a GitHub App.</p>
<p>I found documentation and started reading in on them at GitHub Apps overview - GitHub Docs. GitHub Apps are identities/apps that can act on it&rsquo;s own behalf or behalf of a user. This GitHub App can authenticate itself and call the REST API.
First, we needed to register a new GitHub App, which you can read about here: <a href="https://docs.github.com/en/apps/creating-github-apps/registering-a-github-app/registering-a-github-app">Registering a GitHub App - GitHub Docs</a>.</p>
<ul>
<li>I gave my GitHub app a name.</li>
<li>I gave the GitHub app a homepage URL (a reference to our company).</li>
<li>I didn&rsquo;t need anything related to users. So, I removed everything related to user flows and users.</li>
<li>There was no need for feedback on the PoC, so the webhook feedback was out, too.</li>
</ul>
<p>Based on the REST API documentation, I had a good idea of what repository permissions we required (it&rsquo;s fantastic on GitHub). So, we chose the required permissions based on the least privilege principle with the REST API documented requirements.
And lastly, I chose that you can only install the GitHub App on our demo org.
From there, we have a GitHub App. It was present in the GitHub Organization, and after registering the GitHub App, GitHub automatically forwards you to the overview of your GitHub App.</p>
<h2 id="authentication">Authentication</h2>
<p>The overview shows you details like Owned by (your organization or user, depending on where you created it), your App-ID, and a Client ID. This App ID is essential because you&rsquo;ll need it later.</p>
<p>GitHub has a 2 step authentication. Authentication to the GitHub Platform as the GitHub App is documentated as:</p>
<blockquote>
<p>To authenticate as itself, the app will use a JSON Web Token (JWT).
Your app should authenticate as itself when it needs to generate an installation access token. An installation access token is required to authenticate as an app installation.
Your app should also authenticate as itself when it needs to make API requests to manage resources related to the app.</p>
</blockquote>
<p>So first, we need to write some code to generate a JWT; with that JWT, we can authenticate to GitHub, request an installation token, and then make API requests. However, I had yet to learn what an installation token is.
I had to look it up, but your app&rsquo;s installed instance (at an organization) has an installation ID. The installation is the registration of the app in an organization. GitHub gives the following guidance to find the Installation ID:
You can also use the REST API to find the installation ID for an installation of your app. For example, you can get an installation ID with the GET /users/{username}/installation, GET /repos/{owner}/{repo}/installation, GET /orgs/{org}/installation, or GET /app/installations endpoints.</p>
<p>Secondly, you&rsquo;ll have to create an installation token to authenticate to that organization and fetch the access_tokens_url token.</p>
<figure><img src="/images/githubapp/auth.png"
    alt="Auth dance for GitHub App as an Installation">
</figure>

<p>In short:</p>
<ul>
<li>Create a JWT and send a request to <code>https://api.github.com/app/installations</code>, <code>/orgs/{org}/installation</code> or <code>/repos/{owner}/{repo}/installation</code></li>
<li>Find the correct installation in the response and its access_tokens_url</li>
<li>Call the access_tokens_url and receive an installation token</li>
<li>Call all the repo APIs</li>
</ul>
<h2 id="creating-a-jwt">Creating a JWT</h2>
<p>Creating JWT&rsquo;s sounds more scary than it is. You can download a private key to sign your JWT.
Luckily, a PowerShell module author already thought about all of these things. I tried using <a href="https://github.com/Nucleware/powershell-jwt">powershell-jwt</a>, which worked great, but unfortunately it required me to have the private key of my GitHub App locally on my host running my PowerShell code.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nb">Install-PSResource</span> <span class="s1">&#39;powershell-jwt&#39;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="nv">$newjwtSplat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="n">Algorithm</span> <span class="p">=</span> <span class="s2">&#34;RS256&#34;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="n">SecretKey</span> <span class="p">=</span> <span class="p">(</span><span class="nb">Get-Content</span> <span class="p">/</span><span class="n">Users</span><span class="p">/</span><span class="n">christian</span><span class="p">/</span><span class="n">Downloads</span><span class="p">/</span><span class="n">mykey</span><span class="p">.</span><span class="mf">2023</span><span class="p">-</span><span class="mf">07</span><span class="p">-</span><span class="mf">31</span><span class="p">.</span><span class="nb">private-key</span><span class="p">.</span><span class="py">pem</span> <span class="n">-AsByteStream</span><span class="p">)</span> <span class="c"># This accepts a byte-array</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="n">Issuer</span> <span class="p">=</span> <span class="s2">&#34;123456&#34;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="n">ExpiryTimestamp</span> <span class="p">=</span> <span class="p">([</span><span class="no">math</span><span class="p">]::</span><span class="n">Round</span><span class="p">((</span><span class="nb">Get-Date</span> <span class="n">-UFormat</span> <span class="k">%</span><span class="n">s</span><span class="p">))</span> <span class="p">+</span> <span class="p">(</span><span class="mf">8</span> <span class="p">*</span> <span class="mf">60</span><span class="p">))</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="nb">New-JWT</span> <span class="nv">@newjwtSplat</span></span></span></code></pre></div><p>Since I dove into this authentication dance GitHub updated their docs to provides a similar endresult:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="c">#!/usr/bin/env pwsh</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="nv">$app_id</span> <span class="p">=</span> <span class="n">YOUR_APP_ID</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="nv">$private_key_path</span> <span class="p">=</span> <span class="s2">&#34;YOUR_PATH_TO_PEM&#34;</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="nv">$header</span> <span class="p">=</span> <span class="p">[</span><span class="no">Convert</span><span class="p">]::</span><span class="n">ToBase64String</span><span class="p">([</span><span class="no">System.Text.Encoding</span><span class="p">]::</span><span class="n">UTF8</span><span class="p">.</span><span class="py">GetBytes</span><span class="p">((</span><span class="nb">ConvertTo-Json</span> <span class="n">-InputObject</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl">  <span class="n">alg</span> <span class="p">=</span> <span class="s2">&#34;RS256&#34;</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl">  <span class="n">typ</span> <span class="p">=</span> <span class="s2">&#34;JWT&#34;</span>
</span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="p">}))).</span><span class="py">TrimEnd</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">).</span><span class="py">Replace</span><span class="p">(</span><span class="s1">&#39;+&#39;</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">).</span><span class="py">Replace</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">);</span></span></span></code></pre></div><p>Create the JWT Header</p>
<ol>
<li>Convert the hashtable to JSON</li>
<li>Convert to a Base 64 string</li>
<li>Remove the ending <code>=</code>, replace <code>+</code> with <code>-</code> and <code>/</code> with <code>_</code>, to make the string base64Url encoded</li>
<li>Bind it to a variable named $header</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nv">$payload</span> <span class="p">=</span> <span class="p">[</span><span class="no">Convert</span><span class="p">]::</span><span class="n">ToBase64String</span><span class="p">([</span><span class="no">System.Text.Encoding</span><span class="p">]::</span><span class="n">UTF8</span><span class="p">.</span><span class="py">GetBytes</span><span class="p">((</span><span class="nb">ConvertTo-Json</span> <span class="n">-InputObject</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="n">iat</span> <span class="p">=</span> <span class="p">[</span><span class="no">System.DateTimeOffset</span><span class="p">]::</span><span class="n">UtcNow</span><span class="p">.</span><span class="py">AddSeconds</span><span class="p">(</span><span class="mf">-10</span><span class="p">).</span><span class="py">ToUnixTimeSeconds</span><span class="p">()</span>  
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="n">exp</span> <span class="p">=</span> <span class="p">[</span><span class="no">System.DateTimeOffset</span><span class="p">]::</span><span class="n">UtcNow</span><span class="p">.</span><span class="py">AddMinutes</span><span class="p">(</span><span class="mf">10</span><span class="p">).</span><span class="py">ToUnixTimeSeconds</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="n">iss</span> <span class="p">=</span> <span class="nv">$app_id</span>    
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="p">}))).</span><span class="py">TrimEnd</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">).</span><span class="py">Replace</span><span class="p">(</span><span class="s1">&#39;+&#39;</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">).</span><span class="py">Replace</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">);</span></span></span></code></pre></div><p>Create the JWT Payload</p>
<ol start="5">
<li>Convert the hashtable to JSON (mind the app-id)</li>
<li>Convert to a base64 string</li>
<li>Also make this string base64 url encoded</li>
<li>Bind it to a variable named $payload</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nv">$rsa</span> <span class="p">=</span> <span class="p">[</span><span class="no">System.Security.Cryptography.RSA</span><span class="p">]::</span><span class="n">Create</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nv">$rsa</span><span class="p">.</span><span class="py">ImportFromPem</span><span class="p">((</span><span class="nb">Get-Content</span> <span class="nv">$private_key_path</span> <span class="n">-Raw</span><span class="p">))</span></span></span></code></pre></div><p>Create a RSA object and import the private-key</p>
<ol start="9">
<li>Create a System.Security.Cryptography.RSA object</li>
<li>Import private key into the $rsa-object</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nv">$signature</span> <span class="p">=</span> <span class="p">[</span><span class="no">Convert</span><span class="p">]::</span><span class="n">ToBase64String</span><span class="p">(</span><span class="nv">$rsa</span><span class="p">.</span><span class="py">SignData</span><span class="p">([</span><span class="no">System.Text.Encoding</span><span class="p">]::</span><span class="n">UTF8</span><span class="p">.</span><span class="py">GetBytes</span><span class="p">(</span><span class="s2">&#34;</span><span class="nv">$header</span><span class="s2">.</span><span class="nv">$payload</span><span class="s2">&#34;</span><span class="p">),</span> <span class="p">[</span><span class="no">System.Security.Cryptography.HashAlgorithmName</span><span class="p">]::</span><span class="n">SHA256</span><span class="p">,</span> <span class="p">[</span><span class="no">System.Security.Cryptography.RSASignaturePadding</span><span class="p">]::</span><span class="n">Pkcs1</span><span class="p">)).</span><span class="py">TrimEnd</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">).</span><span class="py">Replace</span><span class="p">(</span><span class="s1">&#39;+&#39;</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">).</span><span class="py">Replace</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">)</span></span></span></code></pre></div><p>Create a signature string</p>
<ol start="11">
<li>Concatenate $header and $payload with a period and create a byte-array</li>
<li>Create a HashAlgorithmName instance representing the SHA256 hash algorithm.</li>
<li>Use PKCS padding for the plaintext</li>
<li>Convert the resulting byte-array to Base64 string</li>
<li>Make the signature string base64 url encoded</li>
</ol>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nv">$jwt</span> <span class="p">=</span> <span class="s2">&#34;</span><span class="nv">$header</span><span class="s2">.</span><span class="nv">$payload</span><span class="s2">.</span><span class="nv">$signature</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">Write-Host</span> <span class="nv">$jwt</span></span></span></code></pre></div><ol start="16">
<li>Concat the header, payload and signature</li>
<li>Output the JWT to the console and information stream</li>
</ol>
<p>So the result is the same, with a locally stored private key you can make your own JWT&rsquo;s very cool.</p>
<p>With this JWT we could request an installation token:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ShouldProcess</span><span class="p">(</span><span class="s2">&#34;Requesting GitHub App Installations using JWT&#34;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="nv">$invokeRestMethodSplat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="n">Uri</span>     <span class="p">=</span> <span class="s1">&#39;https://api.github.com/app/installations&#39;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="n">Headers</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">            <span class="n">Accept</span>                 <span class="p">=</span> <span class="s2">&#34;application/vnd.github+json&#34;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">            <span class="n">Authorization</span>          <span class="p">=</span> <span class="s2">&#34;Bearer </span><span class="nv">$JWT</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">            <span class="s2">&#34;X-GitHub-Api-Version&#34;</span> <span class="p">=</span> <span class="s2">&#34;2022-11-28&#34;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">        <span class="nv">$Installations</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="nv">@invokeRestMethodSplat</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="k">if</span> <span class="p">(!</span><span class="nv">$Installations</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">            <span class="k">throw</span> <span class="s2">&#34;Could not get installations with JWT&#34;</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">        <span class="k">throw</span> <span class="nv">$_</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="nv">$AccessTokensUrl</span> <span class="p">=</span> <span class="p">(</span><span class="nv">$Installations</span><span class="p">).</span><span class="py">access_tokens_url</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">
</span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ShouldProcess</span><span class="p">(</span><span class="s2">&#34;Requesting GitHub Repo token using JWT&#34;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">
</span></span><span class="line"><span class="ln">26</span><span class="cl">    <span class="nv">$irmSplat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">        <span class="n">Uri</span>     <span class="p">=</span> <span class="nv">$AccessTokensUrl</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">        <span class="n">Method</span>  <span class="p">=</span> <span class="s1">&#39;Post&#39;</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">        <span class="n">Headers</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">            <span class="n">Accept</span>                 <span class="p">=</span> <span class="s2">&#34;application/vnd.github+json&#34;</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">            <span class="n">Authorization</span>          <span class="p">=</span> <span class="s2">&#34;Bearer </span><span class="nv">$JWT</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">            <span class="s2">&#34;X-GitHub-Api-Version&#34;</span> <span class="p">=</span> <span class="s2">&#34;2022-11-28&#34;</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">36</span><span class="cl">        <span class="nv">$installationToken</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="nv">@irmSplat</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">        <span class="k">if</span> <span class="p">(!</span><span class="nv">$installationToken</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">            <span class="k">throw</span> <span class="s2">&#34;Could not get GitHub Repo token&#34;</span>
</span></span><span class="line"><span class="ln">39</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl">    <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">41</span><span class="cl">        <span class="k">throw</span> <span class="nv">$_</span>
</span></span><span class="line"><span class="ln">42</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">43</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">44</span><span class="cl"><span class="nv">$installationToken</span></span></span></code></pre></div><p>This <code>$installationToken</code> has our wanted installation token, the permissions the token has.</p>
<p>Finally we can call the REST API as we&rsquo;re used to:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nv">$Organization</span> <span class="p">=</span> <span class="s1">&#39;Manbearpiet&#39;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="nv">$RepositoryName</span> <span class="p">=</span> <span class="s1">&#39;Manbearpiet&#39;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="nv">$Path</span> <span class="p">=</span> <span class="s1">&#39;README.MD&#39;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="nv">$file</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="n">Uri</span>     <span class="p">=</span> <span class="s2">&#34;https://api.github.com/repos/</span><span class="nv">$Organization</span><span class="s2">/</span><span class="nv">$RepositoryName</span><span class="s2">/contents/</span><span class="nv">$Path</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="n">Method</span>  <span class="p">=</span> <span class="s1">&#39;Get&#39;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="n">Headers</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="n">Accept</span>                 <span class="p">=</span> <span class="s2">&#34;application/vnd.github+json&#34;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="n">Authorization</span>          <span class="p">=</span> <span class="s2">&#34;Bearer </span><span class="p">$(</span><span class="nv">$installationToken</span><span class="p">.</span><span class="n">token</span><span class="p">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="s2">&#34;X-GitHub-Api-Version&#34;</span> <span class="p">=</span> <span class="s2">&#34;2022-11-28&#34;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="nb">Invoke-RestMethod</span> <span class="nv">@file</span></span></span></code></pre></div><h3 id="azure-keyvault">Azure KeyVault</h3>
<p>Since the Azure Functions host is a public webserver, I intensely disliked storing my private key file locally on that host&rsquo;s filesystem. We usually store our private keys on a Microsoft-hosted secret vault, the Azure Key Vault-service. After much tinkering with Base64 Url Encoded strings and getting a last push over the hill with the hash, thanks again to Drew of the PowerShell Discord, I had a valid JWT signature using this code:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">New-AZKVTokenSignature</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">(</span><span class="na">SupportsShouldProcess</span><span class="p">)]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">(</span><span class="na">Mandatory</span><span class="p">)]</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="nv">$JWT</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="nv">$KeyVaultName</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">        <span class="nv">$PrivateKeyName</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="nv">$PrivateKeyVersion</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ShouldProcess</span><span class="p">(</span><span class="s2">&#34;Requesting KeyVault api acess token&#34;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">        <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">            <span class="nv">$KeyVaultToken</span> <span class="p">=</span> <span class="nb">Get-AzAccessToken</span> <span class="n">-ResourceTypeName</span> <span class="n">KeyVault</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">            <span class="k">if</span> <span class="p">(!</span><span class="nv">$KeyVaultToken</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">                <span class="k">throw</span> <span class="s2">&#34;Could not get KeyVault token&#34;</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">        <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">            <span class="k">throw</span> <span class="nv">$_</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">    <span class="nv">$JwsResultAsByteArr</span> <span class="p">=</span> <span class="p">[</span><span class="no">System.Text.Encoding</span><span class="p">]::</span><span class="n">UTF8</span><span class="p">.</span><span class="py">GetBytes</span><span class="p">(</span><span class="nv">$JWT</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">
</span></span><span class="line"><span class="ln">29</span><span class="cl">    <span class="c"># Signing requires the hash of the JWT at this point (which should include the header)</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">    <span class="nv">$hash</span> <span class="p">=</span> <span class="p">[</span><span class="no">System.Security.Cryptography.SHA256</span><span class="p">]::</span><span class="n">Create</span><span class="p">().</span><span class="py">ComputeHash</span><span class="p">(</span><span class="nv">$JwsResultAsByteArr</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">
</span></span><span class="line"><span class="ln">32</span><span class="cl">    <span class="nv">$hash64</span> <span class="p">=</span> <span class="p">[</span><span class="no">Convert</span><span class="p">]::</span><span class="n">ToBase64String</span><span class="p">(</span><span class="nv">$hash</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">
</span></span><span class="line"><span class="ln">34</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ShouldProcess</span><span class="p">(</span><span class="nv">$KeyVaultName</span><span class="p">,</span> <span class="s2">&#34;Requesting JWT signing operation from KeyVault with </span><span class="nv">$PrivateKeyName</span><span class="s2">&#34;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">        <span class="nv">$irmSplat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">36</span><span class="cl">            <span class="n">Method</span>      <span class="p">=</span> <span class="s1">&#39;Post&#39;</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">            <span class="n">Headers</span>     <span class="p">=</span> <span class="vm">@</span><span class="p">{</span><span class="n">Authorization</span> <span class="p">=</span> <span class="s2">&#34;Bearer </span><span class="p">$(</span><span class="nv">$KeyVaultToken</span><span class="p">.</span><span class="n">Token</span><span class="p">)</span><span class="s2">&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">            <span class="n">Body</span>        <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">39</span><span class="cl">                <span class="n">alg</span>   <span class="p">=</span> <span class="s1">&#39;RS256&#39;</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl">                <span class="n">value</span> <span class="p">=</span> <span class="nv">$hash64</span>
</span></span><span class="line"><span class="ln">41</span><span class="cl">            <span class="p">}</span> <span class="p">|</span> <span class="nb">ConvertTo-Json</span>
</span></span><span class="line"><span class="ln">42</span><span class="cl">            <span class="n">ContentType</span> <span class="p">=</span> <span class="s2">&#34;application/json&#34;</span>
</span></span><span class="line"><span class="ln">43</span><span class="cl">            <span class="n">Uri</span>         <span class="p">=</span> <span class="s2">&#34;https://</span><span class="nv">$KeyVaultName</span><span class="s2">.vault.azure.net/keys/</span><span class="nv">$PrivateKeyName</span><span class="s2">/</span><span class="nv">$PrivateKeyVersion</span><span class="s2">/sign?api-version=7.4&#34;</span>
</span></span><span class="line"><span class="ln">44</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">45</span><span class="cl">
</span></span><span class="line"><span class="ln">46</span><span class="cl">        <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">47</span><span class="cl">            <span class="nv">$signature</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="nv">@irmSplat</span>
</span></span><span class="line"><span class="ln">48</span><span class="cl">            <span class="k">if</span> <span class="p">(!</span><span class="nv">$signature</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">49</span><span class="cl">                <span class="k">throw</span> <span class="s2">&#34;Could not get signature from KeyVault&#34;</span>
</span></span><span class="line"><span class="ln">50</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln">51</span><span class="cl">        <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">52</span><span class="cl">            <span class="k">throw</span> <span class="nv">$_</span>
</span></span><span class="line"><span class="ln">53</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">54</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">55</span><span class="cl">    <span class="s2">&#34;{0}.{1}&#34;</span> <span class="o">-f</span> <span class="nv">$JWT</span><span class="p">,</span> <span class="nv">$signature</span><span class="p">.</span><span class="py">value</span>
</span></span><span class="line"><span class="ln">56</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>I could call my installations and retrieve a short-living installation token. AWESOME!</p>
<p>Automating all the things
In PowerShell, we can extend the built-in functionality with modules, so I firmly hoped that someone would support operation on the platform with a GitHub app. Unfortunately, this wasn&rsquo;t the case with the few modules I checked out, so I was off to make my code. The lack of a module supporting this resulted in the PowerShell module handling GitHub operations: GitHubPowerShell.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Access Tokens, access tokens everywhere</title>
      <link>http://localhost:1313/posts/access-tokens/</link>
      <pubDate>Wed, 04 Oct 2023 17:52:10 +0200</pubDate>
      <guid>http://localhost:1313/posts/access-tokens/</guid>
      <description>&lt;p&gt;Identities in a cloud world, we all have to deal with them whether we love or hate them.&#xA;If you&amp;rsquo;ve created automated actions to interact with Azure or MSGraph you&amp;rsquo;ll probably have requested an access token, or maybe you&amp;rsquo;ve used the Azure Portal or an e-mail-client like Outlook. Each of these rely on concepts called OIDC and OAuth, used for authentication and authorisation respectively. In this blog I&amp;rsquo;ll explain what a access token is and how they are used in a Microsoft Entra ID context.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Identities in a cloud world, we all have to deal with them whether we love or hate them.
If you&rsquo;ve created automated actions to interact with Azure or MSGraph you&rsquo;ll probably have requested an access token, or maybe you&rsquo;ve used the Azure Portal or an e-mail-client like Outlook. Each of these rely on concepts called OIDC and OAuth, used for authentication and authorisation respectively. In this blog I&rsquo;ll explain what a access token is and how they are used in a Microsoft Entra ID context.</p>
<h2 id="relevance">Relevance</h2>
<p>Nowadays as a user I don&rsquo;t have to login seperately in my Outlook, SharePoint, Teams etc. on my workstation each time my temporary access to the application is expired. Also I&rsquo;m used to the fact that my Teams app can view my calendar info and show me files from my OneDrive or the company SharePoint. By implementing technologies like single-sign-on and federation, we&rsquo;re able to click on-and-on within and cross-application, without realizing what cool technology makes this possible.</p>
<p>All of this data is served via Web-APIs via HTTPS on resource servers (a server hosting Exchange data, a SharePoint server etc.), some of these API&rsquo;s are public, but for the ones that are not, access tokens are a means to prove authentication to these Web-APIs. With public in this case I mean unauthenticated, not public or private networking.</p>
<p>The authentication protocol OpenID-Connect (how we prove who we are) and authorisation protocol OAuth (access info without giving your password) were created to safely operate in a public routable world, because we can&rsquo;t rely on everything to always be behind the &lsquo;safe&rsquo; private network with the big firewall in front of it and our precious Active Directory to prove who who we are. Nor can we federate all the things using ADFS.</p>
<p>So by integrating applications with OAuth we can access applications safely with the use of access tokens, without having to pass your password to each app.</p>
<h2 id="access-tokens">Access Tokens</h2>
<p>Access tokens in the Microsoft Identity Platform are JSON Web Tokens (JWT).</p>
<p>Each time you use client apps, that integrate with Entra ID using OAuth, to access data (on behalf of you), made available via Web APIs, access tokens are exchanged to access these Web APIs securely.
Client Apps use access tokens to access data, that we (probably) own, on behalf of us, via API&rsquo;s on a resource server.</p>
<p>One way I like to put the below picture in practice is by thinking of the resource-owner (the user) as myself. I&rsquo;ve provided evidence (password or passwordless) to the identity platform (Entra-ID) to proof who I claim to be, by logging into <code>https://login.microsoftonline.com</code>.</p>
<p>The client-app on the left I&rsquo;m using to view my calendar, can be Outlook or Teams (both can access calendar data). The resource server as as an Microsoft Exchange Online server serving my calendar data in response to authenticated requests (using Access tokens).</p>
<figure><img src="/images/access-tokens/oauth2.png"
    alt="Microsoft Identity Platform">
</figure>

<h2 id="access-tokens-1">Access Tokens</h2>
<p>I&rsquo;ve mentioned Access Tokens several times now without explaining what they actually are.
Access tokens with regards to Entra ID are implementations of JWTs. Access tokens or bearer tokens are valid for around 1 hour. In the abstract of <a href="https://datatracker.ietf.org/doc/html/rfc7519">RFC 7519</a> there&rsquo;s an excellent introduction of JWTs:</p>
<blockquote>
<p>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</p>
</blockquote>
<p>In the abstract above it&rsquo;s mentioned that a JWT is an encoded JSON object, this means we can decode it if we know what it&rsquo;s decoded with.
On Microsoft Learn, there is excellent guidance and examples of access tokens I found <a href="https://learn.microsoft.com/en-us/azure/active-directory/develop/access-tokens">here</a></p>





<pre tabindex="0"><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Imk2bEdrM0ZaenhSY1ViMkMzbkVRN3N5SEpsWSJ9.eyJhdWQiOiI2ZTc0MTcyYi1iZTU2LTQ4NDMtOWZmNC1lNjZhMzliYjEyZTMiLCJpc3MiOiJodHRwczovL2xvZ2luLm1pY3Jvc29mdG9ubGluZS5jb20vNzJmOTg4YmYtODZmMS00MWFmLTkxYWItMmQ3Y2QwMTFkYjQ3L3YyLjAiLCJpYXQiOjE1MzcyMzEwNDgsIm5iZiI6MTUzNzIzMTA0OCwiZXhwIjoxNTM3MjM0OTQ4LCJhaW8iOiJBWFFBaS84SUFBQUF0QWFaTG8zQ2hNaWY2S09udHRSQjdlQnE0L0RjY1F6amNKR3hQWXkvQzNqRGFOR3hYZDZ3TklJVkdSZ2hOUm53SjFsT2NBbk5aY2p2a295ckZ4Q3R0djMzMTQwUmlvT0ZKNGJDQ0dWdW9DYWcxdU9UVDIyMjIyZ0h3TFBZUS91Zjc5UVgrMEtJaWpkcm1wNjlSY3R6bVE9PSIsImF6cCI6IjZlNzQxNzJiLWJlNTYtNDg0My05ZmY0LWU2NmEzOWJiMTJlMyIsImF6cGFjciI6IjAiLCJuYW1lIjoiQWJlIExpbmNvbG4iLCJvaWQiOiI2OTAyMjJiZS1mZjFhLTRkNTYtYWJkMS03ZTRmN2QzOGU0NzQiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJhYmVsaUBtaWNyb3NvZnQuY29tIiwicmgiOiJJIiwic2NwIjoiYWNjZXNzX2FzX3VzZXIiLCJzdWIiOiJIS1pwZmFIeVdhZGVPb3VZbGl0anJJLUtmZlRtMjIyWDVyclYzeERxZktRIiwidGlkIjoiNzJmOTg4YmYtODZmMS00MWFmLTkxYWItMmQ3Y2QwMTFkYjQ3IiwidXRpIjoiZnFpQnFYTFBqMGVRYTgyUy1JWUZBQSIsInZlciI6IjIuMCJ9.pj4N-w_3Us9DrBLfpCt</code></pre><p>Microsoft has a JavaScript based website which can decode an access token locally <a href="https://jwt.ms/">jwt.ms</a>.
If we pasted our example access token in there, we can see colored highlighting on 3 different sections and a decoded version with corresponding higlighting.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="nt">&#34;typ&#34;</span><span class="p">:</span> <span class="s2">&#34;JWT&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="nt">&#34;alg&#34;</span><span class="p">:</span> <span class="s2">&#34;RS256&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="nt">&#34;kid&#34;</span><span class="p">:</span> <span class="s2">&#34;i6lGk3FZzxRcUb2C3nEQ7syHJlY&#34;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="p">}</span><span class="err">.</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  <span class="nt">&#34;aud&#34;</span><span class="p">:</span> <span class="s2">&#34;6e74172b-be56-4843-9ff4-e66a39bb12e3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="nt">&#34;iss&#34;</span><span class="p">:</span> <span class="s2">&#34;https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/v2.0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="nt">&#34;iat&#34;</span><span class="p">:</span> <span class="mi">1537231048</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">  <span class="nt">&#34;nbf&#34;</span><span class="p">:</span> <span class="mi">1537231048</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="nt">&#34;exp&#34;</span><span class="p">:</span> <span class="mi">1537234948</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">  <span class="nt">&#34;aio&#34;</span><span class="p">:</span> <span class="s2">&#34;AXQAi/8IAAAAtAaZLo3ChMif6KOnttRB7eBq4/DccQzjcJGxPYy/C3jDaNGxXd6wNIIVGRghNRnwJ1lOcAnNZcjvkoyrFxCttv33140RioOFJ4bCCGVuoCag1uOTT22222gHwLPYQ/uf79QX+0KIijdrmp69RctzmQ==&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">  <span class="nt">&#34;azp&#34;</span><span class="p">:</span> <span class="s2">&#34;6e74172b-be56-4843-9ff4-e66a39bb12e3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">  <span class="nt">&#34;azpacr&#34;</span><span class="p">:</span> <span class="s2">&#34;0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Abe Lincoln&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">  <span class="nt">&#34;oid&#34;</span><span class="p">:</span> <span class="s2">&#34;690222be-ff1a-4d56-abd1-7e4f7d38e474&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">  <span class="nt">&#34;preferred_username&#34;</span><span class="p">:</span> <span class="s2">&#34;abeli@microsoft.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">  <span class="nt">&#34;rh&#34;</span><span class="p">:</span> <span class="s2">&#34;I&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">  <span class="nt">&#34;scp&#34;</span><span class="p">:</span> <span class="s2">&#34;access_as_user&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">  <span class="nt">&#34;sub&#34;</span><span class="p">:</span> <span class="s2">&#34;HKZpfaHyWadeOouYlitjrI-KffTm222X5rrV3xDqfKQ&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">  <span class="nt">&#34;tid&#34;</span><span class="p">:</span> <span class="s2">&#34;72f988bf-86f1-41af-91ab-2d7cd011db47&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">  <span class="nt">&#34;uti&#34;</span><span class="p">:</span> <span class="s2">&#34;fqiBqXLPj0eQa82S-IYFAA&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">  <span class="nt">&#34;ver&#34;</span><span class="p">:</span> <span class="s2">&#34;2.0&#34;</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="p">}</span><span class="err">.</span><span class="p">[</span><span class="err">Signature</span><span class="p">]</span></span></span></code></pre></div><p>If you look closely it&rsquo;s not a single object, but three seperate objects.
A header, a body and a signature.</p>
<blockquote>
<p>If you&rsquo;ve looked carefully you can see that the JSON objects are &lsquo;glued&rsquo; together with <code>.</code>-characters.
For GitHub I had to make my own access tokens and I forgot to add the last dot, doh!</p>
</blockquote>
<h3 id="header">Header</h3>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nt">&#34;typ&#34;</span><span class="p">:</span> <span class="s2">&#34;JWT&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="nt">&#34;alg&#34;</span><span class="p">:</span> <span class="s2">&#34;RS256&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="nt">&#34;kid&#34;</span><span class="p">:</span> <span class="s2">&#34;i6lGk3FZzxRcUb2C3nEQ7syHJlY&#34;</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="p">}</span><span class="err">.</span></span></span></code></pre></div><p>The first JSON object in this decoded token is the (JOSE) Header of the JWT.
The <a href="https://www.rfc-editor.org/rfc/rfc7515#section-4.1.9"><code>typ</code></a>-key defines it is a JWT and <a href="https://www.rfc-editor.org/rfc/rfc7515#section-4.1.1"><code>alg</code></a> that in this case the JWT is MAC&rsquo;d with the HMC SHA-256 algorithm. Message Authentication Code (MAC) support is integrated be able to validate authenticity of a JWT using a signature. Lastly the <a href="https://www.rfc-editor.org/rfc/rfc7515#section-4.1.4"><code>kid</code></a> identifies the key with which the MAC operation.</p>
<h2 id="body">Body</h2>
<p>After the header and a seperating dot-character, jwt.ms it it&rsquo;s decoded form shows a JSON-body. This body contains claims. In the RFC7519 claims are defined as:</p>
<blockquote>
<p>Claim: A piece of information asserted about a subject. A claim is represented as a name/value pair consisting of a Claim Name and a Claim Value.</p>
</blockquote>
<p>These claims represent information on the token, for instance:</p>
<ul>
<li>What resource is the meant token meant for</li>
<li>Who issued the token</li>
<li>How long is it valid for</li>
</ul>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="nt">&#34;aud&#34;</span><span class="p">:</span> <span class="s2">&#34;6e74172b-be56-4843-9ff4-e66a39bb12e3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="nt">&#34;iss&#34;</span><span class="p">:</span> <span class="s2">&#34;https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/v2.0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="nt">&#34;iat&#34;</span><span class="p">:</span> <span class="mi">1537231048</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="nt">&#34;nbf&#34;</span><span class="p">:</span> <span class="mi">1537231048</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  <span class="nt">&#34;exp&#34;</span><span class="p">:</span> <span class="mi">1537234948</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="nt">&#34;aio&#34;</span><span class="p">:</span> <span class="s2">&#34;AXQAi/8IAAAAtAaZLo3ChMif6KOnttRB7eBq4/DccQzjcJGxPYy/C3jDaNGxXd6wNIIVGRghNRnwJ1lOcAnNZcjvkoyrFxCttv33140RioOFJ4bCCGVuoCag1uOTT22222gHwLPYQ/uf79QX+0KIijdrmp69RctzmQ==&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="nt">&#34;azp&#34;</span><span class="p">:</span> <span class="s2">&#34;6e74172b-be56-4843-9ff4-e66a39bb12e3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">  <span class="nt">&#34;azpacr&#34;</span><span class="p">:</span> <span class="s2">&#34;0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Abe Lincoln&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">  <span class="nt">&#34;oid&#34;</span><span class="p">:</span> <span class="s2">&#34;690222be-ff1a-4d56-abd1-7e4f7d38e474&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">  <span class="nt">&#34;preferred_username&#34;</span><span class="p">:</span> <span class="s2">&#34;abeli@microsoft.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">  <span class="nt">&#34;rh&#34;</span><span class="p">:</span> <span class="s2">&#34;I&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">  <span class="nt">&#34;scp&#34;</span><span class="p">:</span> <span class="s2">&#34;access_as_user&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">  <span class="nt">&#34;sub&#34;</span><span class="p">:</span> <span class="s2">&#34;HKZpfaHyWadeOouYlitjrI-KffTm222X5rrV3xDqfKQ&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">  <span class="nt">&#34;tid&#34;</span><span class="p">:</span> <span class="s2">&#34;72f988bf-86f1-41af-91ab-2d7cd011db47&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">  <span class="nt">&#34;uti&#34;</span><span class="p">:</span> <span class="s2">&#34;fqiBqXLPj0eQa82S-IYFAA&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">  <span class="nt">&#34;ver&#34;</span><span class="p">:</span> <span class="s2">&#34;2.0&#34;</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="p">}</span><span class="err">.</span></span></span></code></pre></div><p>In the RFC there&rsquo;s a section that references claims names for JWT&rsquo;s can be divided up into 3 classes:</p>
<ul>
<li>Registered Claim Names, IANA registered interoperable claims;</li>
<li>Public Claim Names, a collision resistant public name;</li>
<li>Private Claim Names, neither IANA Registered claim nor collision resistant;</li>
</ul>
<p>So not every JWT for every service will look the same, luckily we have services like <a href="https://jwt.io/">jwt.io</a> and <a href="https://jwt.ms/">jwt.ms</a> to decode it.</p>
<p>Do notice that the registered claims <code>iat</code>, <code>nbf</code> and <code>exp</code> their values are in a specific numerical format we don&rsquo;t see often in a Windows world.
This is called Epoch time or Unix time,which you can read more about in <a href="https://en.wikipedia.org/wiki/Unix_time">wikipedia</a>
In this case it&rsquo;s seconds since the Epoch to which you can convert to with PowerShell using <code>Get-Date -UFormat %s</code>.</p>
<h1 id="token-issuance">Token Issuance</h1>
<p>There are multiple flows how token issuance/flows/grants occur, this has to do with several factors.
But the end goal of all of them is getting a token to access the resource.</p>
<h2 id="daemon-appspipelines">Daemon apps/pipelines</h2>
<p>Firstly who &lsquo;owns&rsquo; the resource, or can grant access to the resource.</p>
<p>If you build a daemon app that fetches data that it owns, the resource owner is the same as the client (the client will have the credentials). This will use a flow called client credentials to retrieve a token (in an authentication request it&rsquo;ll use app-id/secret).</p>
<p>Differently phrased if an app acts on behalf of the resource owner, it is not the same party as the resource owner. These are not the apps you interact with as a regular user, they just do it&rsquo;s own thing. If you build scheduled scripts, this will probably be the authentication flow you&rsquo;ll probably use. Simply said the client will request a token for itself to the authorisation server.
All of the other flows are flows that retrieve tokens in a on-behalf-of flow, because the client doesn&rsquo;t own the resource.</p>
<h2 id="web-apps">Web apps</h2>
<p>The second factor is where is the client/app running, if it&rsquo;s a webapp you&rsquo;d want the access token not to be exposed through your machine/browser, it should flow directly from the authorisation endpoint to the webserver. If your app is running on your machine you shouldn&rsquo;t use this flow.</p>
<blockquote>
<p>We assume the app is known in the authorisation server and the user is allowed to use the app.</p>
</blockquote>
<p>Before this app can access data on-behalf-of you at the resource server, it can ask for your consent. After you did so it will receive an authorization code (from the authorisation server) and the app will use it&rsquo;s own credentials and the authorisation code to request an access token at the token server, to access your data. This flow is called Authorisation Code flow.</p>
<p>If you keep it to just these steps for authorisation code, there will be two flaws you might have spotted.
Since an access token has a default lifetime of an hour, you&rsquo;ll have to do this whole authorisation dance again, which isn&rsquo;t particularly user-friendly.</p>
<p>To temporarily fix this there&rsquo;s another token (yay), called a refresh token. A refresh token is a token with a longer lifetime, which during it&rsquo;s lifetime can be used to directly request an access token to the token server (without bothering user with another allow this app to view my &ldquo;X&rdquo; and &ldquo;Y&rdquo;).</p>
<p>Once the refresh token expires the app can request another access token and will get both an access token and a new refresh token. And it&rsquo;ll continue to show you your precious data/e-mails/calendar appointments.</p>
<h2 id="ropc">ROPC</h2>
<p>Some apps just don&rsquo;t support redirects, but do have to get data on-behalf-of the customer. Apps can use the Resource Owner Password Credentials flow to request tokens (and potentially refresh tokens), to access data on your behalf.</p>
<p>This is similar to the client-credentials flow, but different in the case that the client (app) isn&rsquo;t the same party as the resource-owner (you). Differently phrased these apps need your username/password to get a token (and potentially a refresh token), to access your data. But since you&rsquo;ve already sent your username + password, you must be asolutely sure this app processed the credentials properly. When I read this it sounded like oldschool accounts everywhere (20 years ago) and hope that the app doesn&rsquo;t get hacked and your credentials get exposed.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
