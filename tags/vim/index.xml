<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Vim on Azure and DevOops</title>
    <link>https://manbearpiet.github.io/tags/vim/</link>
    <description>Recent content in Vim on Azure and DevOops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Christian Piet (CC BY 4.0)</copyright>
    <lastBuildDate>Thu, 25 Sep 2025 10:00:00 +0200</lastBuildDate>
    <atom:link href="https://manbearpiet.github.io/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Other Neovim editing basics</title>
      <link>https://manbearpiet.github.io/posts/nvim-search/</link>
      <pubDate>Thu, 25 Sep 2025 10:00:00 +0200</pubDate>
      <guid>https://manbearpiet.github.io/posts/nvim-search/</guid>
      <description>&lt;h1 id=&#34;searching-replacing-and-commenting-in-neovim&#34;&gt;Searching, replacing, and commenting in Neovim&lt;/h1&gt;&#xA;&lt;p&gt;In my previous posts, I covered the basics of navigating Neovim and editing text. While moving around words, lines, or paragraphs in &lt;code&gt;Normal&lt;/code&gt; mode and selecting text with &lt;code&gt;Visual&lt;/code&gt; mode, it works swiftly to navigate around text; sometimes, you need to look for something specific one or multiple times. In this post, I will cover another set of basic editing features: searching, replacing text, and commenting.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="searching-replacing-and-commenting-in-neovim">Searching, replacing, and commenting in Neovim</h1>
<p>In my previous posts, I covered the basics of navigating Neovim and editing text. While moving around words, lines, or paragraphs in <code>Normal</code> mode and selecting text with <code>Visual</code> mode, it works swiftly to navigate around text; sometimes, you need to look for something specific one or multiple times. In this post, I will cover another set of basic editing features: searching, replacing text, and commenting.</p>
<h2 id="searching">Searching</h2>
<p>There are several ways to search for text in Neovim. The fastest way is to use <code>Normal</code>-mode commands. You can also use <code>Visual</code>-mode to search for the selected text. Finally, you can use <code>Command</code>-mode to perform more complex searches and replacements.</p>
<p>Searching in Neovim sometimes highlights text matches in your buffer/opened file. You can disable this highlighting using the <code>:nohlsearch</code>-command, or use the shortcut <code>:noh</code>. If you think &ldquo;Oh, I can&rsquo;t remember this command&rdquo;, you can map it to a key combination of your choice. In a later post, I will cover how to create custom mappings.</p>
<h3 id="searching-in-normal-mode">Searching in Normal mode</h3>
<p>The easiest way to search for text depends on your starting context/where your cursor is. If your cursor is on the word you&rsquo;re looking for, you can use <code>*</code> to search forward for the next occurrence of that word, or <code>#</code> to search backward. To go to the next occurrence of the word, you can press <code>n</code>, and to go to the previous occurrence, you can press <code>N</code>.</p>
<p>The status line will show the search term and the current match number out of the total number of matches.</p>
<table>
  <thead>
      <tr>
          <th>Search-method</th>
          <th>Key/Command</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Backwards search of word under cursor</td>
          <td><code>*</code></td>
      </tr>
      <tr>
          <td>Forward search of word under cursor</td>
          <td><code>#</code></td>
      </tr>
  </tbody>
</table>
<figure><img src="/images/nvim-search/ster.png"
    alt="Select all text on line">
</figure>

<p>However, if you&rsquo;re nowhere near the word you&rsquo;re looking for, you can also search for the term directly. You can use <code>/</code> to search forward by pressing <code>/</code> or <code>?</code> to search backward.</p>
<p>After typing <code>/</code> or <code>?</code>, you can type the word or phrase you want to search for and press <code>Enter</code>. Neovim will then move the cursor to the next occurrence of that word or phrase.</p>
<table>
  <thead>
      <tr>
          <th>Search-method</th>
          <th>Key/Command</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Backwards search</td>
          <td><code>?&lt;pattern&gt;&lt;CR&gt;</code></td>
      </tr>
      <tr>
          <td>Forward search</td>
          <td><code>/&lt;pattern&gt;&lt;CR&gt;</code></td>
      </tr>
  </tbody>
</table>
<p><code>&lt;CR&gt;</code> means pressing the <code>Enter</code>-key. You can ignore casing using <code>\c</code> at the end of your search term, or enforce casing with <code>\C</code>. You can also disable case sensitivity for all searches by adding <code>:set ignorecase</code> to ignore it, and <code>:set noignorecase</code> to enable case-sensitivity again. If you want to override this setting and enforce case sensitivity when searching, you can add <code>set smartcase</code> to your configuration file. This will make searches case-sensitive if your search term contains uppercase letters.</p>
<figure><img src="/images/nvim-search/slash.png"
    alt="Select all text on line">
</figure>

<h3 id="regex-searching">Regex searching</h3>
<p>The keen-eyed among you might have noticed that, when pressing <code>*</code> and <code>#</code>, the editor populates the search commands with the term under your cursor. So, if you&rsquo;re wondering how to search for this specific word manually, you can see that after pressing <code>*</code> and <code>#</code>, the search term is populated. You can then edit this term to your liking and press <code>Enter</code> to search for it.</p>
<p>You can also use regular expressions in your search terms. For example, if you want to search for all text on a line that starts with &ldquo;foo&rdquo; and ends with &ldquo;bar&rdquo;, you can use the search term <code>/foo.*bar</code>. For more information on regular expressions, you can read <code>:h regular-expression</code> and <code>:h magic</code>.</p>
<figure><img src="/images/nvim-search/regex.png"
    alt="Select all text on line">
</figure>

<p>There are also options to search for an offset of characters/lines before/after your matched text. You can read more on pattern searching at <code>:h pattern-searches</code> or at the Vim <a href="https://neovim.io/doc/user/usr_03.html#_simple-searches">user manual</a> written by Bram Molenaar (the creator of Vim).</p>
<h3 id="searching-with-visual-mode">Searching with Visual mode</h3>
<p>Sometimes you want to search for a specific piece of text near your cursor, but it&rsquo;s not a single word. In this case, you can use <code>Visual</code>-mode to select the text you want to search for and then press <code>*</code> or <code>#</code> to search for the next or previous occurrence of that text.</p>
<p>This works exactly the same as in <code>Normal</code>-mode, but now you can select the text you want to search for. This is especially useful if you wish to search for a specific set of characters or a phrase.</p>
<figure><img src="/images/nvim-search/vis.png"
    alt="Select all text on line">
</figure>

<h2 id="replacing">Replacing</h2>
<p>All this searching is great, but sometimes you want to replace text. You can do this in <code>Command</code>-mode using the <code>:substitute</code>, or <code>:s</code> command. The <code>:s</code> command allows you to search for a specific term and replace it with another term. Providing no replacement term will delete the matched text.</p>
<p>The substitute command is shown as follows in the help (<code>:h :s</code>):
<code>:[range]s[ubstitute]/{pattern}/{string}/[flags] [count]</code></p>
<p>The <code>range</code> specifies the lines you want to search and replace in. If you don&rsquo;t specify a range, it will only search and replace in the current line.</p>
<p>You can specify a range using line numbers, for example, <code>:1,19s</code> will search and replace in lines 1 to 19. You can also use <code>%</code> to specify the entire file, for example, <code>:%s/&lt;pattern&gt;&lt;CR&gt;</code> will search and replace in the whole file. Command ranges are explained in more detail at <a href="https://neovim.io/doc/user/usr_10.html#10.3">user manual - 10.3 - Command Ranges</a>.</p>
<p>The pattern is the text you want to search for, just like we did earlier with the <code>/</code> and <code>?</code> commands. The string is the text you want to replace the pattern with.</p>
<p>The flags are optional and can be used to modify the behavior of the substitute command. The most common flags are:</p>
<table>
  <thead>
      <tr>
          <th>Flag</th>
          <th>Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>i</code></td>
          <td>Ignore casing when searching for the pattern.</td>
      </tr>
      <tr>
          <td><code>I</code></td>
          <td>Enforce casing when searching for the pattern.</td>
      </tr>
      <tr>
          <td><code>g</code></td>
          <td>Replace all occurrences of the pattern in the line. If you don&rsquo;t specify this flag, only the first occurrence will be replaced.</td>
      </tr>
      <tr>
          <td><code>c</code></td>
          <td>Confirm each replacement.</td>
      </tr>
  </tbody>
</table>
<p>You can find more info on flags for substitute at <code>:h :s_flags</code>.</p>
<table>
  <thead>
      <tr>
          <th>Replace-example</th>
          <th>Key/Command</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Replace matched pattern on current line</td>
          <td><code>:s/&lt;pattern&gt;/&lt;replacing text&gt;&lt;CR&gt;</code></td>
      </tr>
      <tr>
          <td>Replace first match searched across entire file</td>
          <td><code>:%s/&lt;pattern&gt;/Iamthereplacingtext</code></td>
      </tr>
      <tr>
          <td>Replace all matches across the entire file</td>
          <td><code>:%s/&lt;pattern&gt;/Iamthereplacingtext/g</code></td>
      </tr>
      <tr>
          <td>Case insensitivy search and remove all pattern matches across the entire file and ask for confirmation on each try</td>
          <td><code>:%s/&lt;pattern&gt;//gci</code></td>
      </tr>
  </tbody>
</table>
<h3 id="example">Example</h3>
<p>Example of replacing all occurrences of &lsquo;dns&rsquo; with nothing (deleting), across the entire file, ignoring case, and asking for confirmation on each replacement:</p>
<p><figure><img src="/images/nvim-search/before.png"
    alt="Select all text on line">
</figure>

<figure><img src="/images/nvim-search/replace.png"
    alt="Select all text on line">
</figure>

<figure><img src="/images/nvim-search/confirm.png"
    alt="Select all text on line">
</figure>
</p>
<p>There are several options to repeat a search and flags you can use. This should be sufficient to get you started. You can read more about the substitute command at <code>:h :s</code> and <code>:h substitute</code>.</p>
<h2 id="commenting">Commenting</h2>
<p>Another common task when editing code is commenting and uncommenting code. There are several ways to do this in Neovim, accelerated by plugins, but there are also native methods available. You can read help on commenting at <code>:h commenting</code>.</p>
<p>In <code>Normal</code>-mode you can use <code>gcc</code> to comment or uncomment the current line. You can also use <code>gc</code> in <code>Visual</code>-mode to comment or uncomment the selected lines.</p>
<p><code>gcc</code> works by toggling the comment on the current line. If the line is already commented, it will uncomment it. If the line is not commented, it will comment it. This also supports multiple lines if you provide a count before the command; for example, <code>3gcc</code> will comment or uncomment the following three lines.</p>
<p>Do note that commenting doesn&rsquo;t work if Neovim is unaware of the filetype you&rsquo;re editing. You can check the filetype with <code>:set filetype?</code>. If Neovim doesn&rsquo;t know the filetype, it won&rsquo;t know how to comment the code. There are options to set the file type, but I find it easier to start a file with <code>:e myfile.&lt;filetype&gt;</code>.</p>
<figure><img src="/images/nvim-search/comment.png"
    alt="Select all text on line">
</figure>

<table>
  <thead>
      <tr>
          <th>Comment-method</th>
          <th>Key/Command</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Comment/uncomment current line</td>
          <td><code>gcc</code></td>
      </tr>
      <tr>
          <td>Comment/uncomment next 3 lines</td>
          <td><code>3gcc</code></td>
      </tr>
      <tr>
          <td>Comment/uncomment selected lines</td>
          <td>Visually select and press <code>gc</code> in Visual mode</td>
      </tr>
  </tbody>
</table>
<h2 id="the-end">The End</h2>
<p>That&rsquo;s it for the basics of navigating, editing, searching, replacing, and commenting in Neovim. I hope you found this post helpful. In my next post, I will cover how to customize your experience using options and create custom mappings to further speed up your workflow. Happy coding, everyone!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Basics of Vim/Neovim continued</title>
      <link>https://manbearpiet.github.io/posts/nvim-continued/</link>
      <pubDate>Fri, 19 Sep 2025 10:00:00 +0200</pubDate>
      <guid>https://manbearpiet.github.io/posts/nvim-continued/</guid>
      <description>&lt;h1 id=&#34;basics-of-vimneovim-continued&#34;&gt;Basics of Vim/Neovim continued&lt;/h1&gt;&#xA;&lt;p&gt;In my previous post (&lt;a href=&#34;https://manbearpiet.com/posts/nvim/%29&#34;&gt;https://manbearpiet.com/posts/nvim/)&lt;/a&gt;, I mentioned several modes and basics of editing in Vim/Neovim. In this post, I&amp;rsquo;ll continue the topic and show you how to use Tutor and help, as well as what you can do with Visual mode.&lt;/p&gt;&#xA;&lt;h2 id=&#34;help-and-tutor&#34;&gt;Help and Tutor&lt;/h2&gt;&#xA;&lt;p&gt;In the last post, I mentioned how to access and quit help articles in Vim/Neovim; these articles contain gems. There is even a tutoring tutorial program you can access with the Commandline Mode command using &lt;code&gt;:Tutor&lt;/code&gt;.&#xA;This program will guide you through the Neovim tutorial and will contain help with links.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="basics-of-vimneovim-continued">Basics of Vim/Neovim continued</h1>
<p>In my previous post (<a href="https://manbearpiet.com/posts/nvim/%29">https://manbearpiet.com/posts/nvim/)</a>, I mentioned several modes and basics of editing in Vim/Neovim. In this post, I&rsquo;ll continue the topic and show you how to use Tutor and help, as well as what you can do with Visual mode.</p>
<h2 id="help-and-tutor">Help and Tutor</h2>
<p>In the last post, I mentioned how to access and quit help articles in Vim/Neovim; these articles contain gems. There is even a tutoring tutorial program you can access with the Commandline Mode command using <code>:Tutor</code>.
This program will guide you through the Neovim tutorial and will contain help with links.</p>
<figure><img src="/images/nvim-continued/tutor.png"
    alt="Select all text on line">
</figure>

<p>The default Tutor is <code>:Tutor tutor</code>, but there are also <code>:Tutor vim-01-beginner</code> and <code>:Tutor vim-02-beginner</code>.
I couldn&rsquo;t access Tutor because I copied and pasted some flawed configuration code, d&rsquo;oh! But make sure to check <code>:Tutor</code>, it&rsquo;s excellent.
If the area of the help is too small, you can drag the borders with ehh your mouse.</p>
<p>Help can be accessed with the <code>:help</code>, or <code>:h</code>-command. This also supports tab-completion, and you can cycle through the articles with tab/shift-tab.</p>
<figure><img src="/images/nvim-continued/help.png"
    alt="Select all text on line">
</figure>

<h2 id="visual-mode">Visual Mode</h2>
<p>Visual mode is a mode in which you select text relative to your cursor&rsquo;s position. If you&rsquo;re still using your mouse, although it doesn&rsquo;t exist, dragging across a sentence, double-clicking, and dragging across lines is what Visual mode is. It&rsquo;s a swift way to select a lot of text and allows you to use your operators. Visual mode grants you flexibility in selecting the text.</p>
<p>Visual mode comes in three flavors:</p>
<ul>
<li>v</li>
<li>Ctrl-v</li>
<li>V</li>
</ul>
<h3 id="v">v</h3>
<p><code>v</code>, starts visual mode with just the character under your cursor selected, and with the motion keys (e.g. hjkl), you can choose more text.
Navigating with your cursor in the <code>v</code> mode will select all text between your visual starting position and your cursor&rsquo;s position. So if your cursor goes up with <code>k</code> in the middle of a sentence, it will select all text on the line backwards up to the position of the cursor.</p>
<p>As an example if you want to visually select all text from your cursor up to the end of the line, you can do <code>v$</code>, which enters visual mode at your cursor position. Say you&rsquo;d want to yank/copy the selected text, you could press <code>y' to do so, delete it with </code>d&rsquo; or change it.</p>
<p>This can be handy if you want to copy all text except the line ending. Of course, you can also press <code>Y</code>/<code>D</code>/<code>C</code> to do the same, but this will also include the line ending. <code>v</code> is excellent to use if you need precision.
<figure><img src="/images/nvim-continued/v.png"
    alt="Select all text on line">
</figure>
</p>
<h3 id="ctrl-v">Ctrl-v</h3>
<p><code>Ctrl-v</code> or blockwise Visual mode is a bit odd in the sense that it starts at the cursor&rsquo;s current position, but moving the cursor will select only the character relative to the cursor&rsquo;s starting position. So if you go up/down a line, it doesn&rsquo;t select all text on the line between your starting position and your cursor&rsquo;s position, like <code>v</code> does.</p>
<p>The way I remember this is it feels a lot like selecting a column in a spreadsheet, then you&rsquo;re also not interested in the rows before, just in the cells above or under your starting position. Ctrl-v is excellent when you need extreme precision or when you want to edit leading characters. Try it with <code>gg</code> (start of the file), <code>Ctrl-v</code>, <code>GG</code> (end of file), and <code>d</code> to delete the selected position.</p>
<p>One handy trick I frequently use in other IDEs is the multi-line insert; you can also do this with <code>Ctrl-v</code>. Select the positions you&rsquo;d want to enter text in, press <code>Shift+i</code>, make your change on a single line, and press <code>Esc</code>.
<figure><img src="/images/nvim-continued/block.png"
    alt="Select all text on line">
</figure>
</p>
<h3 id="v-1">V</h3>
<p><code>V</code> starts visual mode on the line your cursor is positioned at and selects all the text on that line. When you go up or down, it includes all text on that line and all text and other selected lines. This is the mode I use the most, as it allows me to select whole lines quickly.
<figure><img src="/images/nvim-continued/groteV.png"
    alt="Select all text on line">
</figure>
</p>
<h2 id="fin">Fin</h2>
<p>I don&rsquo;t frequently use visual mode, but some people like it, so it can be handy to have it in your toolbelt and know how to use it. The help for visual mode is excellent and can be found at <code>:h visual-mode</code>. I hope this was helpful. Happy coding, everyone!</p>
<p>PS:
There are some excellent resources I found on the web, be sure to checkout:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=TQn2hJeHQbM&amp;list=PLep05UYkc6wTyBe7kPjQFWVXTlhKeQejM&amp;index=1">Advent of Neovim by TJ de Vries - YouTube playlist</a></li>
<li>These posts by m4xshen:
<ul>
<li><a href="https://m4xshen.dev/posts/vim-basic-commands">Essential Vim commands for efficient text editing</a></li>
<li><a href="https://m4xshen.dev/posts/vim-command-workflow">Practical Vim command workflow</a></li>
<li><a href="https://m4xshen.dev/posts/vim-commands-for-navigation-between-brackets">3 Vim commands for blazingly fast navigation between brackets</a></li>
</ul>
</li>
<li>VSCode Learn Vim extension by vintharas:
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=vintharas.learn-vim">VSCode extension</a></li>
<li><a href="https://www.youtube.com/watch?v=llo7kgSjcBM">Learn Vim - the VSCode extension</a></li>
<li><a href="https://www.youtube.com/watch?v=zQ6Ua-8pM9g">Boost Your Coding Fu With VSCode and Vim - YouTube video</a></li>
<li><a href="https://www.barbarianmeetscoding.com/boost-your-coding-fu-with-vscode-and-vim/">Boost your coding Fu with VSCode and Vim - Website</a></li>
<li><a href="https://www.barbarianmeetscoding.com/boost-your-coding-fu-with-vscode-and-vim/table-of-contents">Free book online</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Basics of Vim/Neovim</title>
      <link>https://manbearpiet.github.io/posts/nvim/</link>
      <pubDate>Fri, 12 Sep 2025 10:00:00 +0200</pubDate>
      <guid>https://manbearpiet.github.io/posts/nvim/</guid>
      <description>&lt;h1 id=&#34;neowhat&#34;&gt;Neowhat?&lt;/h1&gt;&#xA;&lt;p&gt;It was the end of May 2025. A friend and former colleague of mine sent me a link about a YouTuber called ThePrimeagen. In his videos, he featured some funny takes on tech news and had some sassy remarks, but what sparked my interest was his IDE. He used a terminal in which he was editing text, but it didn&amp;rsquo;t look like old-school Vi. It had rich support for languages, an uncluttered interface, and I never saw a mouse cursor. I was interested, so I viewed some more videos, and my Neovim journey began. I&amp;rsquo;ve a deep interest in how technology works, and I wanted a deeper understanding of how VSCode works and how it helps me with code editing. What better way than to check out the competition? This, plus a desire to become more able with editors like Vi, made it a clear choice to invest time to better understand this editor.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="neowhat">Neowhat?</h1>
<p>It was the end of May 2025. A friend and former colleague of mine sent me a link about a YouTuber called ThePrimeagen. In his videos, he featured some funny takes on tech news and had some sassy remarks, but what sparked my interest was his IDE. He used a terminal in which he was editing text, but it didn&rsquo;t look like old-school Vi. It had rich support for languages, an uncluttered interface, and I never saw a mouse cursor. I was interested, so I viewed some more videos, and my Neovim journey began. I&rsquo;ve a deep interest in how technology works, and I wanted a deeper understanding of how VSCode works and how it helps me with code editing. What better way than to check out the competition? This, plus a desire to become more able with editors like Vi, made it a clear choice to invest time to better understand this editor.</p>
<p>If you&rsquo;re unfamiliar with Vim or Neovim, or if you&rsquo;re interested in the topic, this blog post will provide a brief overview of my understanding of how to navigate text in Vim/Neovim. In later posts, I&rsquo;ll dive deeper into more advanced topics and how to extend Neovim to make it a full-fledged IDE.</p>
<h2 id="neovim">Neovim</h2>
<p>Vim is the scary editor in your terminal where noobies die because they can&rsquo;t get out. However, it isn&rsquo;t as frightening as it looks. You do, however, need to understand why it works differently from other editors. Neovim is a fork of Vim, so it shares many similarities with Vim and offers added value beyond it. It provides speed, extensibility, and is a fun timesink.</p>
<h2 id="installing">Installing</h2>
<p>I&rsquo;m a macOS user, so I installed using <code>brew install neovim</code>. After doing so, you have to type <code>nvim</code> in your terminal, and you&rsquo;re in the editor. It is a strange editor if you&rsquo;re used to clicking on all the things, because where are the buttons? The central idea is that your buttons are on your keyboard, and you use shortcuts/keymaps to perform your actions.
An Integrated Developer Environment is a rich text editor first, so I did some baby steps in trying to edit, and I wasn&rsquo;t really successful. I had to read a bit and view some Vim for Dummies videos, because all Neovim getting-started videos are about extending functionality, but not about how to edit text.
I could&rsquo;ve saved myself a lot of time at this point by first reading the documentation, which is the first thing the editor shows you, d&rsquo;oh! When it launches, you can type <code>:help neovim</code> and read the help. Although you do need to know how to navigate text to do so.</p>
<h2 id="modes">Modes</h2>
<p>Neovim uses <strong>modes</strong> to change between functionalities.
When using a text editor, we&rsquo;re used to clicking on the position we want to edit, typing what we want, and then scrolling. Regular text editing is done in the <strong>Insert</strong>-mode, by default, the editor is launched in the <strong>Normal</strong> mode, in which you can navigate the text.
Every time I tried to use Vim via a terminal on a remote machine, I was intimidated and ended up installing the nano editor. But no more! If you press <code>i</code>, the editor enters <strong>Insert</strong> mode, and you can type as you&rsquo;re used to. This all worked fine, but when I needed to navigate to a different line, things got scary again. Luckily, <code>Esc</code> brings our editor back to <strong>Normal</strong>-mode.
But now I was faced with the scariest part: how do you exit the darn editor? When not in <strong>Insert</strong>-mode, you can press <code>:</code>, to enter <strong>Commandline</strong> mode. This Command-line mode allows us to <code>:write</code> the text in our current editor and <code>:quit</code> the editor, but this being a fast editor, you can also just type <code>:w</code> and <code>:q</code> or <code>:wq</code>.
Quitting a help or any vim tab also works via <code>:q</code>, so if you&rsquo;ve a help open, this way you can exit that too. You can read more about modes by reading the help on modes with <code>:help vim-modes</code>.
<figure><img src="/images/nvim/exit.jpg"
    alt="Exit Vim meme">
</figure>
</p>
<h2 id="navigating">Navigating</h2>
<p>So far so good, but this wasn&rsquo;t more than a extremely simple &ldquo;Hello World&rdquo;-like example. The normal mode isn&rsquo;t a shortcut to the command mode, it&rsquo;s so much more!
In the <strong>Normal</strong> mode you can navigate your cursor in the editor, manipulate text relative to your cursor and a lot more. But it all start with navigating your cursor across the editor. In all the videos they talked about the <strong>home row</strong>, this means the row your fingers hopefully land on when you touch a keyboard.</p>
<p>The most important fact you have to understand is, you have no mouse, and no arrow-keys they just don&rsquo;t exist anymore from this point on.</p>
<figure><img src="/images/nvim/meme.png"
    alt="Drake meme, don&#39;t use a mouse, use your keyboard">
</figure>

<p>On your home-row the most import keys are located in the portion of your right hand, the <code>hjkl</code> section.</p>
<p>The barebones:</p>
<ul>
<li><code>h</code> moves the cursor one character left</li>
<li><code>j</code> moves the cursor one line down</li>
<li><code>k</code> moves the cursor one line up</li>
<li><code>l</code> moves the cursor one character right</li>
</ul>
<p>I watched <a href="https://www.youtube.com/watch?v=z4eA2eC28qg">this video</a> by DevOps Toolbox. And I was ready to take on the world, at least I thought. It didn&rsquo;t click with me until I tried a browser based game called <a href="https://vim-adventures.com/">Vim Adventures</a>. After the video and the game I was able to navigate text using vim motions.</p>
<p>In the video and game it&rsquo;s made clear that in <strong>Normal</strong> mode you can move your cursor not only per character, but you can move around words, sentences, paragraphs etc. A small note I made to remember these:</p>
<ul>
<li><code>w</code> moves the cursor to the first character of the next word</li>
<li><code>b</code> moves the cursor to the first character of the previous word</li>
<li><code>e</code> moves the cursor to the last character of the current word</li>
<li><code>a</code> moves to the next character and enters <strong>Insert</strong> mode</li>
<li><code>$</code> moves the cursor to the end of the line</li>
<li><code>0</code> moves the cursor to the start of the line</li>
<li><code>^</code> moves the cursor to the first non blank character of the line</li>
<li><code>gg</code> moves towards the start of your file</li>
<li><code>G</code> moves towards the end of your file</li>
<li><code>H</code> moves to the top of your screen</li>
<li><code>M</code> moves towards the middle of your screen</li>
<li><code>L</code> moves towards the bottom of your screen</li>
<li><code>{</code> moves towards the previous paragraph</li>
<li><code>}</code> moves towards the next paragraph (blank line)</li>
<li><code>Ctrl + D</code> moves your screen down</li>
<li><code>Ctrl + U</code> moves your screen up</li>
<li><code>zz</code> moves your screen in a way your cursor is in the middle.</li>
</ul>
<p>Those are my most-used shortcuts for navigation. This makes you a lot faster navigating around files, so there might be something about that <strong>Normal</strong>-mode after all. However, the editing still felt a bit clunky; I was always moving around, entering <strong>Insert</strong> mode with i , and then going back to <strong>Normal</strong> mode.</p>
<h2 id="operators">Operators</h2>
<p>The clunkiness came from the fact that I was navigating, but not really combining knowledge. For instance if I wanted to delete a word, I&rsquo;d move towards the end of the word, then move right with <code>l</code>, enter <strong>Insert</strong> mode and backspace until the word is gone. There are better ways to do so. Enter operators, if I&rsquo;d only would&rsquo;ve read the manual at <code>:help operator</code> sooner..</p>
<p>Operators are commands you provide a motion and then the editor performs the command on the text based on the motion you provided. This maybe sounds difficult, but bear with me. The most important operators are:</p>
<ul>
<li><code>d</code> for delete</li>
<li><code>c</code> for change, this deletes and sets the editor mode to Insert, so you can type the text immediatly</li>
<li><code>y</code> for yank, this yanks/copies the text to a buffer/clipboard</li>
</ul>
<p>So, if you want to delete a word, you can type <code>dw</code>, which deletes from your current cursor position to the start of the next word. If you want to delete from your current position to the end of the line, you can type <code>d$</code>. You get the idea, you can combine operators with motions.
To delete a whole line, you can type <code>dd</code>, which deletes the entire line you are on. The same applies to <code>yy</code> , which yanks the entire line. Or <code>cc</code> , which removes the whole line and sets you in Insert-mode.</p>
<p>Pasting is done with <code>p</code> for paste after your cursor and <code>P</code> for paste before your cursor. What caught me offguard a few time is that your buffer/clipboard is filled when yanking but also with deleting text. So deleting a word will default to overwriting your clipboard. This caught me offguard a bit, since I usually copy/yank my text, delete the thing I want gone and then paste, but this will paste the deleted text.</p>
<p>This may feel like a lot, but just start small with <code>dw</code>, <code>d$</code>, <code>dd</code>,<code>cw</code>,<code>cc</code>,<code>yw</code>, <code>yy</code> and <code>p</code> and you&rsquo;ll be amazed how fast you can edit text.</p>
<h2 id="operators-on-steroids">Operators on Steroids</h2>
<p>This enables us to edit text much faster by combining motions and operators. But wait, there&rsquo;s more. You can also repeat an action a few times by providing a number before the operator. So if you want to delete 3 words, you can type <code>d3w</code>, or if you want to delete 4 lines, you can type <code>d4d</code>. This also works with change and yank, so <code>c3w</code>, <code>y3w</code>, <code>c4d</code>, and <code>y4d</code> work too. The same applies to <code>dd</code> and <code>yy</code>; so, <code>3dd</code> deletes 3 lines and <code>4yy</code> yanks 4 lines relative to your cursor.</p>
<p>There are also other tools, like delete until the character you provide, which is done with <code>d</code> + <code>t</code> + <code>character</code>. So if you want to delete until the next comma you can type <code>dt,</code>. This also works with change and yank, so <code>ct,</code> and <code>yt,</code> work too. If you want to include the comma, you can use <code>f</code> instead of <code>t</code>, so <code>df,</code>, <code>cf,</code> and <code>yf,</code>.</p>
<p>With some googling, I found out you can delete something and not have it in your buffer/clipboard, by using the <code>_</code> register, so <code>_d3w</code> deletes 3 words without putting it in your clipboard.</p>
<h2 id="undoredo">Undo/Redo</h2>
<p>Mistakes happen, luckily you can undo and redo your actions. Undo is done with <code>u</code> and redo with <code>Ctrl + r</code>.</p>
<h2 id="other-useful-commands">Other useful commands</h2>
<p>There are some other useful commands I use often:</p>
<ul>
<li><code>.</code> repeats your last action, so if you deleted a word with <code>dw</code> you can repeat that with <code>.</code></li>
<li><code>x</code> deletes the character under your cursor, this is like backspace in <strong>Insert</strong>-mode</li>
<li><code>X</code> deletes the character before your cursor, this is like delete in <strong>Insert</strong>-mode</li>
<li><code>r</code> + <code>character</code> replaces the character under your cursor with the character you provided</li>
<li><code>R</code> enters <strong>Replace</strong>-mode, this is like <strong>Insert</strong>-mode but it overwrites text</li>
<li><code>o</code> opens a new line below your current line and enters <strong>Insert</strong>-mode</li>
<li><code>O</code> opens a new line above your current line and enters <strong>Insert</strong>-mode</li>
<li><code>K</code> adds a new line above your cursor in <strong>Normal</strong>-mode</li>
<li><code>P</code> pastes on the line above your cursor</li>
<li><code>J</code> joins the current line with the next line</li>
<li><code>D</code> deletes from your cursor to the end of the line, this is like <code>d$</code></li>
<li><code>Y</code> yanks from your cursor to the end of the line, this is like <code>y$</code></li>
<li><code>C</code> changes from your cursor to the end of the line, this is like <code>c$</code></li>
<li><code>A</code> moves your cursor to the end of the line and enters <strong>Insert</strong>-mode</li>
<li><code>I</code> moves your cursor to the first non-blank character of the line and enters <strong>Insert</strong>-mode</li>
<li><code>ZZ</code> saves and exits the editor, this is like <code>:wq</code></li>
<li><code>ZQ</code> exits the editor without saving, this is like <code>:q!</code></li>
</ul>
<p>There is also a trick in which you can do a motion towards text inside braces, parentheses or quotes. If on a line you have text in quotes, you can use <code>ci&quot;</code> to change the text inside the quotes. Or for instance if there are braces on a line you can delete the text inside by typing <code>di[</code>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I left out a significant amount of commands and motions, but this is a good start to get you going. In a subsequent post, I&rsquo;d like to demonstrate how to utilize substitutions, visual mode, and extend Neovim to make it a full-fledged IDE. These tips work in both Vim and Neovim, so if you&rsquo;re using Vim, you can use these too. There are several cheat sheets available online; just Google &ldquo;vim cheat sheet&rdquo; and you&rsquo;ll find several. But the best way to git gud is by putting in the hours and getting it in the fingers, Happy Vimming!</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
