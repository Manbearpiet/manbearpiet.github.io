<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GitHub Apps on Azure and DevOops</title>
    <link>https://manbearpiet.github.io/tags/github-apps/</link>
    <description>Recent content in GitHub Apps on Azure and DevOops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Christian Piet (CC BY 4.0)</copyright>
    <lastBuildDate>Mon, 07 Jul 2025 10:00:00 +0200</lastBuildDate>
    <atom:link href="https://manbearpiet.github.io/tags/github-apps/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automating GitHub operations using GitHub Apps</title>
      <link>https://manbearpiet.github.io/posts/githubapp/</link>
      <pubDate>Mon, 07 Jul 2025 10:00:00 +0200</pubDate>
      <guid>https://manbearpiet.github.io/posts/githubapp/</guid>
      <description>&lt;h1 id=&#34;github-apps&#34;&gt;GitHub Apps&lt;/h1&gt;&#xA;&lt;p&gt;At the company I work at, InSpark, we had a use case for automating our operations on the GitHub platform. We needed to perform automated actions in a headless fashion, so an external process on Azure should be able to call the GitHub Platform and perform some actions. To do so, I learned about GitHub Apps, which enable me to perform actions from a script. In this blog, I will share what I&amp;rsquo;ve learned and how you can utilize a daemon application to automate actions on the GitHub platform.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="github-apps">GitHub Apps</h1>
<p>At the company I work at, InSpark, we had a use case for automating our operations on the GitHub platform. We needed to perform automated actions in a headless fashion, so an external process on Azure should be able to call the GitHub Platform and perform some actions. To do so, I learned about GitHub Apps, which enable me to perform actions from a script. In this blog, I will share what I&rsquo;ve learned and how you can utilize a daemon application to automate actions on the GitHub platform.</p>
<h2 id="why">Why</h2>
<p>In some cases, you need to be able to initiate a commit of specific files, address GitHub issues, or trigger a workflow dispatch event.</p>
<p>We were researching how to automate the enrollment process for a new customer of one of our company&rsquo;s services. Enrollment meant that, through a web portal, a customer would enter information, and, with the press of a button, the portal would initiate a single request to my tool, triggering a chain of operations.</p>
<p>I had a wishlist of operations on the GitHub platform for my tool:</p>
<ul>
<li>Create a repository secret on the repository.</li>
<li>Copy template folder structure</li>
<li>Create new files in the new folder.</li>
<li>Create a new workflow.</li>
<li>Start a workflow with information from the customer&rsquo;s web request.</li>
</ul>
<h2 id="platform">Platform</h2>
<p>With my PowerShell background, I began exploring GitHub scripts and soon discovered that they did not precisely meet my use case. I then read the REST API reference (<a href="https://docs.github.com/en/rest">GitHub REST API documentation - GitHub Docs</a>), which showed that the REST API was a better fit for the use case. I would like to know what platform to use to interact with the REST API from a PowerShell script. The host running my PowerShell must be fast, available 24/7, and easily extendable, which ruled out Azure Automation. I had yet to gain experience using Azure Functions, though.</p>
<p>I created an Azure Function App and was puzzled by the authentication. Will I use a Personal Access Token (PAT) and attribute every action to my account, or do it in a more sophisticated way? In Azure DevOps, service accounts (users) with PATs were once a workaround for the lack of SPN support.</p>
<p>PATs are always user-account bound, sometimes scoped, and expire when you don&rsquo;t want them to. If I win the lottery someday, I hope my colleagues don&rsquo;t pull too many hairs out on the search for which PAT expired. So, authentication-wise, I wanted something else for my new shiny project.</p>
<p>Entra ID SPNs can now integrate with Azure DevOps, and it works excellently <a href="https://learn.microsoft.com/en-us/azure/devops/release-notes/2023/sprint-228-update#managed-identity-and-service-principal-support-for-azure-devops-now-in-general-availability-ga">Managed identity and service principal support for Azure DevOps now in general availability (GA)</a>. This video by John Savill explains it in detail: <a href="https://www.youtube.com/watch?v=saTUeR_U3lA">Azure DevOps Workload Identity Federation with Azure Overview. NO MORE SECRETS!</a></p>
<h2 id="github-app">GitHub App</h2>
<p>I looked to see if GitHub supported an extension from Microsoft Entra ID, meaning I hoped to invite or register an Entra ID SPN to perform these actions instead of everything attributed to my GitHub user with a PAT. Unfortunately, the GitHub platform doesn&rsquo;t support Entra ID SPNs as an entity; however, GitHub has its own SPN implementation on its platform, known as a GitHub App.</p>
<p>I found documentation and started reading the GitHub documentation. GitHub Apps are identities or apps that can act independently, rather than on behalf of a user (this is also possible, but it is not my use case). In my use case, a PowerShell script can authenticate as the GitHub App and call the GitHub REST API with that identity.</p>
<p>First, we needed to register a new GitHub App, which you can read about here: <a href="https://docs.github.com/en/apps/creating-github-apps/registering-a-github-app/registering-a-github-app">Registering a GitHub App - GitHub Docs</a>.</p>
<ul>
<li>I gave my GitHub app a name.</li>
<li>I gave the GitHub app a homepage URL (a reference to our company).</li>
<li>I didn&rsquo;t need anything related to users. Therefore, I removed all content related to user flows and users.</li>
<li>There was no need for feedback on the PoC, so the webhook feedback was out, too.</li>
</ul>
<p>Based on the REST API documentation, I had a good idea of what repository permissions we required, and the role permissions are excellent. Therefore, I selected the required permissions, adhering to the principle of least privilege, while also considering the REST API&rsquo;s documented requirements.
From there, we have a GitHub App ready to be installed on our repositories. After registering, GitHub automatically forwards you to the overview of your GitHub App. Lastly, I chose to install the GitHub App only on a demo organization. If you&rsquo;d like to use this in your organization, you will need to delegate the GitHub App to a set of repositories. It will then have the permissions you configured earlier on those repositories.</p>
<h2 id="authentication">Authentication</h2>
<p>The overview shows you details like &ldquo;Owned by&rdquo; (your organization or user, depending on where you created it), your &ldquo;App-ID&rdquo;, and a &ldquo;Client ID&rdquo;. This App ID is essential because you&rsquo;ll need it later.</p>
<p>GitHub has a 2 step authentication. Authentication to the GitHub Platform as the GitHub App, as documented by GitHub:</p>
<blockquote>
<p>To authenticate as itself, the app will use a JSON Web Token (JWT).
Your app should authenticate as itself when it needs to generate an installation access token. An installation access token is required to authenticate as an app installation.
Your app should also authenticate as itself when it needs to make API requests to manage resources related to the app.</p></blockquote>
<p>First, we need to write some code to generate a JWT. With that JWT, we can authenticate to GitHub, request an installation token, and then make API requests. However, I had yet to learn what an installation token is.</p>
<p>I had to look up the meaning of &lsquo;installation&rsquo; in this context; the installation is the registration of the app in a GitHub organization. The installation ID is the identifier of that installation. GitHub gives the following guidance to find the Installation ID:
You can also use the REST API to find the installation ID for an installation of your app. For example, you can get an installation ID with the GET /users/{username}/installation, GET /repos/{owner}/{repo}/installation, GET /orgs/{org}/installation, or GET /app/installations endpoints.</p>
<p>Secondly, you&rsquo;ll need to create an installation token to authenticate with that organization and retrieve the access_tokens_url token.</p>
<figure><img src="/images/githubapp/auth.png"
    alt="Auth dance for GitHub App as an Installation">
</figure>

<p>In short:</p>
<ul>
<li>Create a JWT and send a request to <code>https://api.github.com/app/installations</code>, <code>/orgs/{org}/installation</code> or <code>/repos/{owner}/{repo}/installation</code> (make sure to use least privilege)</li>
<li>Find the correct installation in the response and its access_tokens_url</li>
<li>Call the access_tokens_url and receive an installation token</li>
<li>Call all the repo APIs</li>
</ul>
<h2 id="creating-a-jwt">Creating a JWT</h2>
<p>Creating JWTs may sound more intimidating than it is. It&rsquo;s just a base64 URL-encoded representation of a JSON string, accompanied by a signature. To sign your JWT, you can download a private key to sign your JWT.
Fortunately, a PowerShell module author has already taken into account all of these considerations. I tried using <a href="https://github.com/Nucleware/powershell-jwt">powershell-jwt</a>, which worked great. Note: The module&rsquo;s implementation requires having the private key file of my GitHub App locally on the host, where I am running the PowerShell code.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nb">install-PSResource</span> <span class="s1">&#39;powershell-jwt&#39;</span> <span class="n">-Repository</span> <span class="n">PSGallery</span> <span class="p">|</span> <span class="nb">Import-Module</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="nv">$newjwtSplat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="n">Algorithm</span>       <span class="p">=</span> <span class="s1">&#39;RS256&#39;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="n">SecretKey</span>       <span class="p">=</span> <span class="p">(</span><span class="nb">Get-Content</span> <span class="p">/</span><span class="n">Users</span><span class="p">/</span><span class="n">christianpiet</span><span class="p">/</span><span class="n">Downloads</span><span class="p">/</span><span class="nb">manbearpiet-app</span><span class="p">.</span><span class="mf">2025</span><span class="p">-</span><span class="mf">06</span><span class="p">-</span><span class="mf">25</span><span class="p">.</span><span class="nb">private-key</span><span class="p">.</span><span class="py">pem</span> <span class="n">-AsByteStream</span><span class="p">)</span> <span class="c"># This accepts a byte-array</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="n">ExpiryTimestamp</span> <span class="p">=</span> <span class="p">([</span><span class="no">math</span><span class="p">]::</span><span class="n">Round</span><span class="p">((</span><span class="nb">Get-Date</span> <span class="n">-UFormat</span> <span class="k">%</span><span class="n">s</span><span class="p">))</span> <span class="p">+</span> <span class="p">(</span><span class="mf">8</span> <span class="p">*</span> <span class="mf">60</span><span class="p">))</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="n">Issuer</span>          <span class="p">=</span> <span class="mf">1459729</span> <span class="c"># Trimmed</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="n">PayloadClaims</span>   <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="n">iat</span> <span class="p">=</span> <span class="p">([</span><span class="no">math</span><span class="p">]::</span><span class="n">Round</span><span class="p">((</span><span class="nb">Get-Date</span> <span class="n">-UFormat</span> <span class="k">%</span><span class="n">s</span><span class="p">))</span> <span class="p">-</span> <span class="mf">10</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="nv">$JWT</span> <span class="p">=</span> <span class="nb">New-JWT</span> <span class="nv">@newjwtSplat</span></span></span></code></pre></div><p>With a locally stored private key, you can create your JWTs. Very cool, right?</p>
<p>With this JWT, we could request an installation token:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">New-GHRepoToken</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">(</span><span class="na">SupportsShouldProcess</span><span class="p">)]</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">param</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="p">[</span><span class="no">String</span><span class="p">]</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="nv">$JWT</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ShouldProcess</span><span class="p">(</span><span class="s1">&#39;Requesting GitHub App Installations using Signed JWT Token&#39;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="nv">$invokeRestMethodSplat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">            <span class="n">Uri</span>     <span class="p">=</span> <span class="s1">&#39;https://api.github.com/app/installations&#39;</span> <span class="c"># This gets all installations and should just be used cross organizations.</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">            <span class="n">Headers</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">                <span class="n">Accept</span>                 <span class="p">=</span> <span class="s1">&#39;application/vnd.github+json&#39;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">                <span class="n">Authorization</span>          <span class="p">=</span> <span class="s2">&#34;Bearer </span><span class="nv">$JWT</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">                <span class="s1">&#39;X-GitHub-Api-Version&#39;</span> <span class="p">=</span> <span class="s1">&#39;2022-11-28&#39;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">        <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">            <span class="nv">$Installations</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="nv">@invokeRestMethodSplat</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">            <span class="k">if</span> <span class="p">(!</span><span class="nv">$Installations</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">                <span class="k">throw</span> <span class="s1">&#39;Could not get installations with JWT&#39;</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">        <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">            <span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ThrowTerminatingError</span><span class="p">(</span><span class="nv">$_</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">
</span></span><span class="line"><span class="ln">29</span><span class="cl">    <span class="nv">$AccessTokensUrl</span> <span class="p">=</span> <span class="p">(</span><span class="nv">$Installations</span><span class="p">).</span><span class="py">access_tokens_url</span> <span class="c"># This assumes there is only 1 installation</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">
</span></span><span class="line"><span class="ln">31</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ShouldProcess</span><span class="p">(</span><span class="s1">&#39;Requesting GitHub Repo token using JWT&#39;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">
</span></span><span class="line"><span class="ln">33</span><span class="cl">        <span class="nv">$irmSplat</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">            <span class="n">Uri</span>     <span class="p">=</span> <span class="nv">$AccessTokensUrl</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">            <span class="n">Method</span>  <span class="p">=</span> <span class="s1">&#39;Post&#39;</span>
</span></span><span class="line"><span class="ln">36</span><span class="cl">            <span class="n">Headers</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">                <span class="n">Accept</span>                 <span class="p">=</span> <span class="s1">&#39;application/vnd.github+json&#39;</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">                <span class="n">Authorization</span>          <span class="p">=</span> <span class="s2">&#34;Bearer </span><span class="nv">$JWT</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">39</span><span class="cl">                <span class="s1">&#39;X-GitHub-Api-Version&#39;</span> <span class="p">=</span> <span class="s1">&#39;2022-11-28&#39;</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln">41</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">42</span><span class="cl">        <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">43</span><span class="cl">            <span class="nv">$outputtoken</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="nv">@irmSplat</span>
</span></span><span class="line"><span class="ln">44</span><span class="cl">            <span class="k">if</span> <span class="p">(!</span><span class="nv">$outputtoken</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">45</span><span class="cl">                <span class="k">throw</span> <span class="s1">&#39;Could not get GitHub Repo token&#39;</span>
</span></span><span class="line"><span class="ln">46</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln">47</span><span class="cl">        <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">48</span><span class="cl">            <span class="nv">$PSCmdlet</span><span class="p">.</span><span class="py">ThrowTerminatingError</span><span class="p">(</span><span class="nv">$_</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">49</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">50</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">51</span><span class="cl">    <span class="nv">$outputtoken</span> <span class="c"># for reflection, this has the token as plaintext as a property</span>
</span></span><span class="line"><span class="ln">52</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">53</span><span class="cl">
</span></span><span class="line"><span class="ln">54</span><span class="cl"><span class="nv">$installationToken</span> <span class="p">=</span> <span class="nb">New-GHRepoToken</span> <span class="n">-JWT</span> <span class="nv">$JWT</span></span></span></code></pre></div><p>This <code>$installationToken</code>-variable has our wanted installation token, which works similarly to a short-lived PAT.</p>
<p>Finally, we can call the REST API as we&rsquo;re used to:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nv">$Organization</span> <span class="p">=</span> <span class="s1">&#39;Manbearpiet&#39;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="nv">$RepositoryName</span> <span class="p">=</span> <span class="s1">&#39;Manbearpiet&#39;</span> <span class="c"># Public repo</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="nv">$Path</span> <span class="p">=</span> <span class="s1">&#39;README.md&#39;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="nv">$file</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="n">Uri</span>     <span class="p">=</span> <span class="s2">&#34;https://api.github.com/repos/</span><span class="nv">$Organization</span><span class="s2">/</span><span class="nv">$RepositoryName</span><span class="s2">/contents/</span><span class="nv">$Path</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="n">Method</span>  <span class="p">=</span> <span class="s1">&#39;Get&#39;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="n">Headers</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="n">Accept</span>                 <span class="p">=</span> <span class="s1">&#39;application/vnd.github+json&#39;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="n">Authorization</span>          <span class="p">=</span> <span class="s2">&#34;Bearer </span><span class="p">$(</span><span class="nv">$installationToken</span><span class="p">.</span><span class="n">token</span><span class="p">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="s1">&#39;X-GitHub-Api-Version&#39;</span> <span class="p">=</span> <span class="s1">&#39;2022-11-28&#39;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="nb">Invoke-RestMethod</span> <span class="nv">@file</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="nv">$Organization</span> <span class="p">=</span> <span class="s1">&#39;ManbearpietApp&#39;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="nv">$RepositoryName</span> <span class="p">=</span> <span class="s1">&#39;thisisprivate&#39;</span> <span class="c"># Private repo</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="nv">$file</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">    <span class="n">Uri</span>     <span class="p">=</span> <span class="s2">&#34;https://api.github.com/repos/</span><span class="nv">$Organization</span><span class="s2">/</span><span class="nv">$RepositoryName</span><span class="s2">/contents/</span><span class="nv">$Path</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="n">Method</span>  <span class="p">=</span> <span class="s1">&#39;Get&#39;</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="n">Headers</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">        <span class="n">Accept</span>                 <span class="p">=</span> <span class="s1">&#39;application/vnd.github+json&#39;</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">        <span class="n">Authorization</span>          <span class="p">=</span> <span class="s2">&#34;Bearer </span><span class="p">$(</span><span class="nv">$installationToken</span><span class="p">.</span><span class="n">token</span><span class="p">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">        <span class="s1">&#39;X-GitHub-Api-Version&#39;</span> <span class="p">=</span> <span class="s1">&#39;2022-11-28&#39;</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">
</span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="nb">Invoke-RestMethod</span> <span class="nv">@file</span></span></span></code></pre></div><figure><img src="/images/github-apps/content.png"
    alt="Getting public content with a GitHub App">
</figure>

<figure><img src="/images/github-apps/private-content.png"
    alt="Getting private content with a GitHub App">
</figure>

<p>In the content key of the response body we can find our private repositories it&rsquo;s README.md contents base64 encoded:</p>





<pre tabindex="0"><code class="language-base64" data-lang="base64">IyB0aGlzaXNwcml2YXRlCuKAnE9uZSBkb2VzIG5vdCBzaW1wbHkgYWNjZXNzIGEgcHJpdmF0ZSByZXBvIHdpdGhvdXQgYSB0b2tlbi7igJ0g4oCTIEJvcm9taXIK</code></pre><p>With this setup I can call my installations and retrieve a short-lived installation token. Using that I can access our repositories, start workflows et cetera. AWESOME!</p>
<h2 id="conclusion">Conclusion</h2>
<p>Using GitHub Apps, we have an identity that allows us to automate actions on the GitHub platform. After registering and installing a GitHub App, you can assign it access to repositories or the organization and access the REST API. By fetching and accessing the installation token, you can access your public and private repositories through GitHub REST APIs. So we can continue to automate all the things. That&rsquo;s my adventure with GitHub Apps. I hope someone can utilize this to do cool stuff with it. I certainly enjoyed tinkering with it.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
